<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>etcd相关</title>
      <link href="/post/11843/"/>
      <url>/post/11843/</url>
      
        <content type="html"><![CDATA[<p>参考etcd中文文档：<a href="https://www.zhaowenyu.com/etcd-doc/">https://www.zhaowenyu.com/etcd-doc/</a><br>etcd客户端手册：<a href="https://www.zhaowenyu.com/etcd-doc/reference/command/etcdctl.html">https://www.zhaowenyu.com/etcd-doc/reference/command/etcdctl.html</a><br>etcd服务端手册：<a href="https://www.zhaowenyu.com/etcd-doc/reference/etcd-server/">https://www.zhaowenyu.com/etcd-doc/reference/etcd-server/</a><br>大神自己梳理的资料：<a href="https://www.lixueduan.com/tags/etcd/">https://www.lixueduan.com/tags/etcd/</a></p><h1 id="1、ETCD能力"><a href="#1、ETCD能力" class="headerlink" title="1、ETCD能力"></a>1、ETCD能力</h1><ul><li>提供存储以及获取数据：它通过协议保证 Etcd 集群中的多个节点数据的强一致性。用于存储元信息以及共享配置。</li><li>提供监听机制，客户端可以监听某个key或者某些key的变更，用于监听和推送变更。</li><li>提供key的过期以及续约机制，客户端通过定时刷新来实现续约。用于集群监控以及服务注册发现。</li><li>提供原子的CAS（Compare-and-Swap）和 CAD（Compare-and-Delete）支持，用于分布式锁以及leader选举（基于raft算法）。</li></ul><p><strong>底层也是B+树</strong></p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><h2 id="etcd安装"><a href="#etcd安装" class="headerlink" title="etcd安装"></a><a href="https://github.com/etcd-io/etcd">etcd安装</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像 </span></span><br><span class="line">docker pull quay.io/coreos/etcd:v3.5.15</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -itd -p 2379:2379 quay.io/coreos/etcd:v3.5.15 \</span><br><span class="line">/usr/local/bin/etcd \</span><br><span class="line">--listen-client-urls http://0.0.0.0:2379 \ </span><br><span class="line">--advertise-client-urls http://0.0.0.0:2379 </span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据</span></span><br><span class="line">docker <span class="built_in">exec</span> &#123;CONTAINER_ID&#125; /usr/local/bin/etcdctl put foo bar</span><br><span class="line"><span class="comment"># 拉取数据</span></span><br><span class="line">docker <span class="built_in">exec</span> &#123;CONTAINER_ID&#125; /usr/local/bin/etcdctl get foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群运行状态</span></span><br><span class="line">docker <span class="built_in">exec</span> &#123;CONTAINER_ID&#125; /usr/local/bin/etcdctl --endpoints http://127.0.0.1:2379 endpoint status -w table</span><br><span class="line"><span class="comment"># 得到</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"><span class="comment"># |       ENDPOINT        |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"><span class="comment"># | http://127.0.0.1:2379 | 8e9e05c52164694d |  3.5.15 |   20 kB |      true |      false |         2 |          6 |                  6 |        |</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试命令，对集群进行60s的压测命令</span></span><br><span class="line">docker <span class="built_in">exec</span> &#123;CONTAINER_ID&#125; /usr/local/bin/etcdctl check perf</span><br><span class="line"><span class="comment"># 得到</span></span><br><span class="line"><span class="comment">#  60 / 60  100.00% 1m0s1s</span></span><br><span class="line"><span class="comment"># PASS: Throughput is 150 writes/s</span></span><br><span class="line"><span class="comment"># PASS: Slowest request took 0.051119s</span></span><br><span class="line"><span class="comment"># PASS: Stddev is 0.003086s</span></span><br><span class="line"><span class="comment"># PASS</span></span><br></pre></td></tr></table></figure><h2 id="etcd安装2"><a href="#etcd安装2" class="headerlink" title="etcd安装2"></a><a href="https://hub.docker.com/r/bitnami/etcd">etcd安装2</a></h2><p>不建议用上面的哪个镜像，进不去镜像，pull的人还不多，不懂为啥官网提供的是这个，用这个新的镜像也要注意很多事，记得看他的文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像 </span></span><br><span class="line">docker pull bitnami/etcd</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -itd \</span><br><span class="line">--publish 2379:2379 \</span><br><span class="line">    --<span class="built_in">env</span> ALLOW_NONE_AUTHENTICATION=<span class="built_in">yes</span> \</span><br><span class="line">    --<span class="built_in">env</span> ETCD_ADVERTISE_CLIENT_URLS=http://etcd-server:2379 \</span><br><span class="line">    bitnami/etcd:3.5.14</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 命令行测试 ########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接进入镜像操作，方便点：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &#123;CONTAINER_ID&#125; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据</span></span><br><span class="line">etcdctl put foo bar</span><br><span class="line"><span class="comment"># 拉取数据</span></span><br><span class="line">etcdctl get foo</span><br><span class="line"><span class="comment"># 集群运行状态</span></span><br><span class="line">etcdctl --endpoints http://127.0.0.1:2379 endpoint status -w table</span><br><span class="line"><span class="comment"># 得到</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"><span class="comment"># |       ENDPOINT        |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"><span class="comment"># | http://127.0.0.1:2379 | 8e9e05c52164694d |  3.5.15 |   20 kB |      true |      false |         2 |          6 |                  6 |        |</span></span><br><span class="line"><span class="comment"># +-----------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试命令，对集群进行60s的压测命令</span></span><br><span class="line">etcdctl check perf</span><br><span class="line"><span class="comment"># 得到</span></span><br><span class="line"><span class="comment">#  60 / 60  100.00% 1m0s1s</span></span><br><span class="line"><span class="comment"># PASS: Throughput is 150 writes/s</span></span><br><span class="line"><span class="comment"># PASS: Slowest request took 0.051119s</span></span><br><span class="line"><span class="comment"># PASS: Stddev is 0.003086s</span></span><br><span class="line"><span class="comment"># PASS</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 数据备份 &amp; 恢复 ########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档上写着该镜像数据路径为 /bitnami/etcd/data </span></span><br><span class="line"><span class="comment"># 备份，创建目录：</span></span><br><span class="line"><span class="built_in">mkdir</span> /bitnami/etcd/data/backup</span><br><span class="line"><span class="comment"># 备份数据</span></span><br><span class="line">etcdctl snapshot save /bitnami/etcd/data/backup/backup.db</span><br><span class="line"><span class="comment"># 查看备份数据</span></span><br><span class="line">etcdctl snapshot status backup.db -w table</span><br><span class="line"><span class="comment"># 展示如下</span></span><br><span class="line"><span class="comment"># +----------+----------+------------+------------+</span></span><br><span class="line"><span class="comment"># |   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |</span></span><br><span class="line"><span class="comment"># +----------+----------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 326171ca |        6 |         11 |      20 kB |</span></span><br><span class="line"><span class="comment"># +----------+----------+------------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以去修改etcd中的数据</span></span><br><span class="line"><span class="comment"># 恢复数据到备份数据，创建目录，必须是空目录，否则会报错</span></span><br><span class="line"><span class="built_in">mkdir</span> /bitnami/etcd/data/restore</span><br><span class="line"><span class="comment"># 解析备份的数据</span></span><br><span class="line">etcdctl snapshot restore /bitnami/etcd/data/backup/backup.db --data-dir=/bitnami/etcd/data/restore/</span><br><span class="line"><span class="comment"># 将当前的数据替换为备份的数据</span></span><br><span class="line"><span class="built_in">rm</span> -rf /bitnami/etcd/data/member; <span class="built_in">mv</span> /bitnami/etcd/data/restore/member/ /bitnami/etcd/data/</span><br><span class="line"><span class="comment"># 重启一下docker镜像，数据便可以恢复</span></span><br><span class="line">docker restart &#123;CONTAINER_ID&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 数据压缩 ########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前数据的revison</span></span><br><span class="line">etcdctl endpoint status -w json</span><br><span class="line"><span class="comment"># 根据需要压缩到指定revision，此处的revision，不能大于当前的revision</span></span><br><span class="line"><span class="comment"># 此处不用命令行，使用代码也是可以的 </span></span><br><span class="line"><span class="comment"># Compact(ctx context.Context, rev int64, opts ...CompactOption) (*CompactResponse, error)</span></span><br><span class="line">etcdctl compact &#123;revision&#125;</span><br><span class="line"><span class="comment"># 清理碎片，注意：碎片整理会阻塞对etcd的读写操作</span></span><br><span class="line">etcdctl defrag</span><br><span class="line"><span class="comment"># 如果有告警清理一下告警</span></span><br><span class="line">etcdctl alarm list</span><br><span class="line">etcdctl alarm disarm</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><p>用的是<a href="https://github.com/evildecay/etcdkeeper">etcdkeeper</a>，我是在docker上安装，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull evildecay/etcdkeeper</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -itd -p 8080:8080 evildecay/etcdkeeper</span><br></pre></td></tr></table></figure><p>网页访问8080端口，对应的界面：</p><img src="https://img.ncfl.tech/202409101900815.jpg" width=600px/><h1 id="3、版本"><a href="#3、版本" class="headerlink" title="3、版本"></a>3、版本</h1><ul><li>Revision</li><li>作用域为集群，逻辑时间戳，全局单调递增，任何 key 的增删改都会使其自增</li><li>CreateRevision</li><li>作用域为 key, 等于创建这个 key 时集群的 Revision, 直到删除前都保持不变</li><li>ModRevision</li><li>作用域为 key, 等于修改这个 key 时集群的 Revision, 只要这个 key 更新都会自增</li><li>Version</li><li>作用域为 key, 这个key刚创建时Version为1，之后每次更新都会自增，即这个key从创建以来更新的总次数。</li></ul><h1 id="4、client相关API使用"><a href="#4、client相关API使用" class="headerlink" title="4、client相关API使用"></a>4、client相关API使用</h1><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取etcd的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">resp, err := cli.Get(context.Background(), key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[get] from etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[get] key:%s  val:%s&quot;</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPrefix 获取开头的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPrefix</span><span class="params">(keyPrefix <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">resp, err := cli.Get(context.Background(), keyPrefix, clientv3.WithPrefix())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[get] from etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[get] key:%s  val:%s&quot;</span>, ev.Key, ev.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetRev 获取对应版本的值，此处的rev应该是当前key的modReversion，或者某一刻集群的Reversion</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRev</span><span class="params">(key <span class="type">string</span>, rev <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">resp, err := cli.Get(context.Background(), key, clientv3.WithRev(rev))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[get] from etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> resp.Kvs &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[get] key:%s val:%s, ev %+v&quot;</span>, ev.Key, ev.Value, ev)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put 设置etcd的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Put</span><span class="params">(key, val <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">_, err = cli.Put(context.Background(), key, val)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[put] to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;[put] key:%s  val:%s&quot;</span>, key, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutWithTimeout 超时，也叫租约</span></span><br><span class="line"><span class="comment">// key 和 Lease 是多对一的关系。一个 key 最多只能挂绑定一个 Lease ，但是一个 Lease 上能挂多个key 。 </span></span><br><span class="line"><span class="comment">// 这种设计提高 etcd 整体的性能。Lease 刷新一次就对应了一批的 key ，否则每一个 key 都独立刷新 ttl 的话，会加大开销</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutWithTimeout</span><span class="params">(key, val <span class="type">string</span>, timeout <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">grantResp, err := cli.Grant(ctx, timeout)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = cli.Put(ctx, key, val, clientv3.WithLease(grantResp.ID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[put] to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;[put] key:%s  val:%s&quot;</span>, key, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutKeepalive 设置超时，并在过期前永久不过期，注意KeepAlive的官方文档，如果不消费chan，chan会满，后续的rsp就会被丢弃，进而无法通信了</span></span><br><span class="line"><span class="comment">// KeepAlive attempts to keep the given lease alive forever. If the keepalive responses posted</span></span><br><span class="line"><span class="comment">// to the channel are not consumed promptly the channel may become full. When full, the lease</span></span><br><span class="line"><span class="comment">// client will continue sending keep alive requests to the etcd server, but will drop responses</span></span><br><span class="line"><span class="comment">// until there is capacity on the channel to send more responses.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutKeepalive</span><span class="params">(key, val <span class="type">string</span>, timeout <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">grantResp, err := cli.Grant(ctx, timeout)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = cli.Put(ctx, key, val, clientv3.WithLease(grantResp.ID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[put] to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;[put] key:%s  val:%s&quot;</span>, key, val)</span><br><span class="line"></span><br><span class="line">ch, err := cli.KeepAlive(ctx, grantResp.ID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_ = &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cli.Grant(ctx, timeout) 创建一个租约，其他的key可以共享这个租约，共享之后，则同生共死</span></span><br><span class="line"><span class="comment">// cli.Revoke(ctx, clientv3.LeaseID(LeaseID)) 撤销租约，等价于del租约，也就是租约直接至0，该租约的key都会消失</span></span><br><span class="line"><span class="comment">// cli.KeepAlive(ctx, grantResp.ID) 需要对返回的chan不断监听，client和server端之前是通过grpc的stream通信的，注意KeepAlive的官方文档，如果不消费chan，chan会满，后续的rsp就会被丢弃，进而无法通信了</span></span><br><span class="line"><span class="comment">// cli.TimeToLive(ctx, clientv3.LeaseID(LeaseID)) 取出这个租约ID下的信息</span></span><br><span class="line"><span class="comment">// cli.TimeToLive(ctx, LeaseID, clientv3.WithAttachedKeys())  取出这个租约ID下的信息，并取出key</span></span><br><span class="line"><span class="comment">// cli.Leases(ctx) 列出当前集群所有的租约（感觉用处不大）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>keepailive</code>为啥需要监听接受chan的原因（看了好久的源码才注意到）：<br><img src="https://img.ncfl.tech/202409132031880.jpg" width=600px/></p><p>检查 Lease 是否过期、维护最小堆、针对过期的 Lease 发起 revoke 操作，都是 Leader 节点负责的，它类似于 Lease 的仲裁者</p><p>租约优化：</p><ul><li>之前用的是map，且每个key分配一个ttl，续期的时候需要扫描map中所有的key，看看是否满足续期的要求。</li><li>现在用的是最小堆，多个key可以共享一个ttl，续期的时候O(1)获取最小堆，来判断是否满足续期的要求即可</li></ul><h2 id="Del"><a href="#Del" class="headerlink" title="Del"></a>Del</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Del 删除etcd的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Del</span><span class="params">(key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">resp, err := cli.Delete(context.Background(), key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;get from etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;get key:%s  delete num:%d&quot;</span>, key, resp.Deleted)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DelPrefix 删除开头的key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelPrefix</span><span class="params">(keyPrefix <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">resp, err := cli.Delete(context.Background(), keyPrefix, clientv3.WithPrefix())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;[del] from etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;[del] key:%s  delete num:%d&quot;</span>, keyPrefix, resp.Deleted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch 监听</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Watch</span><span class="params">(key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">rch := cli.Watch(context.Background(), key) <span class="comment">// &lt;-chan WatchResponse</span></span><br><span class="line"><span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[watch] Type: %s Key:%s Value:%s&quot;</span>, ev.Type, ev.Kv.Key, ev.Kv.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WatchPrefix 监听</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WatchPrefix</span><span class="params">(keyPrefix <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">rch := cli.Watch(context.Background(), keyPrefix, clientv3.WithPrefix()) <span class="comment">// &lt;-chan WatchResponse</span></span><br><span class="line"><span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[watch] Type: %s Key:%s Value:%s, kv %+v&quot;</span>, ev.Type, ev.Kv.Key, ev.Kv.Value, ev.Kv)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WatchWithRev 基于版本监听某个key，具体的rev建议根据请求头中的Reversion来定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WatchWithRev</span><span class="params">(key <span class="type">string</span>, rev <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line">rch := cli.Watch(context.Background(), key, clientv3.WithRev(rev)) <span class="comment">// &lt;-chan WatchResponse</span></span><br><span class="line"><span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[watch] Type: %s Key:%s Value:%s, kv %+v&quot;</span>, ev.Type, ev.Kv.Key, ev.Kv.Value, ev.Kv)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tx-事务"><a href="#Tx-事务" class="headerlink" title="Tx 事务"></a>Tx 事务</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tx</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">txn := clientv3.NewKV(cli).Txn(ctx)</span><br><span class="line">txnResp, err := txn.</span><br><span class="line">If(</span><br><span class="line"><span class="comment">// 多个compare之间是&amp;关系，需要都满足才是true</span></span><br><span class="line">clientv3.Compare(clientv3.Value(<span class="string">&quot;/123&quot;</span>), <span class="string">&quot;=&quot;</span>, <span class="string">&quot;123131231&quot;</span>),</span><br><span class="line">clientv3.Compare(clientv3.Value(<span class="string">&quot;/foo&quot;</span>), <span class="string">&quot;=&quot;</span>, <span class="string">&quot;123&quot;</span>),</span><br><span class="line"><span class="comment">// compare的方法还有如下，建议看源码</span></span><br><span class="line"><span class="comment">//func Value(key string) Cmp 获取Key的值</span></span><br><span class="line"><span class="comment">//func Version(key string) Cmp 获取Key的版本号</span></span><br><span class="line"><span class="comment">//  func CreateRevision(key string) Cmp 获取Key的创建版本号</span></span><br><span class="line"><span class="comment">//  func ModRevision(key string) Cmp 获取Key的修改版本号</span></span><br><span class="line"><span class="comment">//func LeaseValue(key string) Cmp 获取Key的LeaseID</span></span><br><span class="line">).</span><br><span class="line">Then(</span><br><span class="line"><span class="comment">// OpPut、OpGet、OpDelete等操作都可以，建议看源码</span></span><br><span class="line">clientv3.OpGet(<span class="string">&quot;/foo&quot;</span>),</span><br><span class="line">).</span><br><span class="line">Else(</span><br><span class="line"><span class="comment">// OpPut、OpGet、OpDelete等操作都可以，建议看源码</span></span><br><span class="line">clientv3.OpGet(<span class="string">&quot;/test&quot;</span>, clientv3.WithPrefix()),</span><br><span class="line">).</span><br><span class="line">Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;tx commit to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">marshal, _ := json.Marshal(txnResp)</span><br><span class="line"><span class="keyword">if</span> txnResp.Succeeded &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[if true] data: %s&quot;</span>, marshal)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[if false] data: %s&quot;</span>, marshal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lock-加锁"><a href="#Lock-加锁" class="headerlink" title="Lock 加锁"></a>Lock 加锁</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"><span class="string">&quot;go.etcd.io/etcd/client/v3/concurrency&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LockWithTX 用事务实现加锁，核心就是保证原子性</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LockWithTX</span><span class="params">(key <span class="type">string</span>, timeout <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">grantResp, err := cli.Grant(ctx, timeout)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事务</span></span><br><span class="line">txn := clientv3.NewKV(cli).Txn(context.TODO())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事务</span></span><br><span class="line">txnResp, err := txn.</span><br><span class="line"><span class="comment">// 按照CreateRevision判断是否存在</span></span><br><span class="line">If(clientv3.Compare(clientv3.CreateRevision(key), <span class="string">&quot;=&quot;</span>, <span class="number">0</span>)).</span><br><span class="line"><span class="comment">// 不存在就put一个key</span></span><br><span class="line">Then(clientv3.OpPut(key, fmt.Sprintf(<span class="string">&quot;i am working %s&quot;</span>, time.Now()), clientv3.WithLease(grantResp.ID))).</span><br><span class="line"><span class="comment">// 否则枪锁失败</span></span><br><span class="line">Else(clientv3.OpGet(key)).</span><br><span class="line">Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 提交事务</span></span><br><span class="line">log.Fatalf(<span class="string">&quot;tx commit to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断释放抢到锁</span></span><br><span class="line"><span class="keyword">if</span> !txnResp.Succeeded &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;someone locked of %+v&quot;</span>, <span class="type">string</span>(txnResp.Responses[<span class="number">0</span>].GetResponseRange().Kvs[<span class="number">0</span>].Value))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、处理业务</span></span><br><span class="line">log.Printf(<span class="string">&quot;no one locked, start working&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LockWithConcurrency 建议看下Lock的源码，底层也是基于事务来做的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LockWithConcurrency</span><span class="params">(key <span class="type">string</span>, name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="type">string</span>&#123;<span class="string">&quot;localhost:2379&quot;</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;connect to etcd failed, err:%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">session, err := concurrency.NewSession(cli)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line">mutex := concurrency.NewMutex(session, key)</span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="keyword">if</span> err := mutex.Lock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;lock success of of goroutine %s&quot;</span>, name)</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">if</span> err := mutex.Unlock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;unlock success of of goroutine %s&quot;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩缩容数据一致性"><a href="#扩缩容数据一致性" class="headerlink" title="扩缩容数据一致性"></a>扩缩容数据一致性</h1><p><a href="https://www.cnblogs.com/traditional/p/17439255.html">https://www.cnblogs.com/traditional/p/17439255.html</a></p><p>etcd使用的是raft算法进行选举，在心跳的时候回带上同步的消息，raft比较熟悉了，这里不做展开，可以直接参考上面的文章</p><h2 id="checkpoint-机制"><a href="#checkpoint-机制" class="headerlink" title="checkpoint 机制"></a>checkpoint 机制</h2><p><a href="https://www.lixueduan.com/posts/etcd/10-lease/">https://www.lixueduan.com/posts/etcd/10-lease/</a></p><p>问题：当你的集群发生 Leader 切换后，新的 Leader 基于 Lease map 信息，按 Lease 过期时间构建一个最小堆时，etcd 早期版本为了优化性能，并未持久化存储 Lease 剩余 TTL 信息，因此重建的时候就会自动给所有 Lease 自动续期了。然而若较频繁出现 Leader 切换，切换时间小于 Lease 的 TTL，这会导致 Lease 永远无法删除，大量 key 堆积，db 大小超过配额等异常。</p><p>为了解决这个问题，所以引入了 checkpoint 机制</p><ul><li>一方面，etcd 启动的时候，Leader 节点后台会运行此异步任务，定期批量地将 Lease 剩余的 TTL 基于 Raft Log 同步给 Follower 节点，Follower 节点收到 CheckPoint 请求后，更新内存数据结构 LeaseMap 的剩余 TTL 信息。</li><li>另一方面，当 Leader 节点收到 KeepAlive 请求的时候，它也会通过 checkpoint 机制把此 Lease 的剩余 TTL 重置，并同步给 Follower 节点，尽量确保续期后集群各个节点的 Lease 剩余 TTL 一致性。</li></ul><h1 id="mvcc"><a href="#mvcc" class="headerlink" title="mvcc"></a>mvcc</h1><p>etcd、mysql都是基于mvcc来管理和控制的</p><p>一定要看这几篇文章，基于mysql讲的，非常详细：<br><a href="https://www.cnblogs.com/qdhxhz/p/15750866.html">https://www.cnblogs.com/qdhxhz/p/15750866.html</a><br><a href="https://mp.weixin.qq.com/s/LcdorR-oldsm3FEYAAnisQ">https://mp.weixin.qq.com/s/LcdorR-oldsm3FEYAAnisQ</a><br><a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html">https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html</a><br><a href="https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html">https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html</a></p><p>MVCC （Multi-Version Concurrency Control）多版本并发控制</p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>图解啥是MVCC，在增删改查的时候，会记录之前的记录，然后用链表链接在一起，<code>undo log</code>就是历史版本，回滚日志。如下（当然有个后台线程，会去不断扫描这个<code>undo log</code>，发现没人读写了就删除，降低空间）<br><img src="https://img.ncfl.tech/202409231222622.jpg"></p><h2 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h2><p>读数据的时候，会创建<code>Read View</code>，然后读数据就从这个里面读。具体读取哪个<code>undo log</code>版本的数据，取决于创建<code>Read View</code>的方法<code>changes_visible</code></p><p><img src="https://img.ncfl.tech/202409231227633.png" alt="源码"></p><p>字段含义</p><ul><li>trx_ids: 当前系统中那些活跃(未提交)的读写事务ID, 它数据结构为一个List。(重点注意:这里的trx_ids中的活跃事务，不包括当前事务自己和已提交的事务，这点非常重要)</li><li>low_limit_id: 目前出现过的最大的事务ID+1，即下一个将被分配的事务ID。</li><li>up_limit_id: 活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id。</li><li>creator_trx_id: 表示生成该 ReadView 的事务的 事务id</li></ul><p>图解上文代码判断逻辑：<br><img src="https://img.ncfl.tech/202409231231822.png"></p><h2 id="解决不可重复读（read-repeated-RR）"><a href="#解决不可重复读（read-repeated-RR）" class="headerlink" title="解决不可重复读（read repeated RR）"></a>解决不可重复读（read repeated RR）</h2><p>RR底层用的就是MVCC来管理，进而解决不可重复读的问题。仔细慢慢看看这个case，就知道MVCC怎么解决。</p><ul><li>RR(read repeated)读的时候，在begin transation的时候，就创建了<code>Read View</code>，后续都用这个这个<code>Read View</code></li><li>RC(read commited) RU(read uncommited)读的时候，在每次执行select的时候，都是创建<code>Read View</code>，所以每次读取到的时候可能不一样</li><li><strong>RR下，无法直接解决幻读问题</strong>，可以通过增加行锁来解决： <code>select *  from user where id = 5 for update</code><br><img src="https://img.ncfl.tech/202409231243183.jpg"></li></ul><h1 id="etcd-VS-zookeeper"><a href="#etcd-VS-zookeeper" class="headerlink" title="etcd VS zookeeper"></a>etcd VS zookeeper</h1><ul><li>watch实现机制不同，etcd数据更新的时候，是推送给用户，zookeeper是通知用户来拉取。如果需要获取都所有的变更记录，zookeeper则不太合适</li><li>CAP中，这两个都是CP，即优先满足C（数据一致性），一旦数据不一致，则集群不可用（A available），毕竟是配置中心的组件</li><li>自动删除，zookeeper使用的是临时节点实现，etcd采用的是lease租约机制实现</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>etcd是基于磁盘IO的，故性能取决于磁盘的性能，比如普通磁盘，SSD等.<br>网上同学压测：<a href="https://juejin.cn/post/6992916118058827813">https://juejin.cn/post/6992916118058827813</a><br>官网压测：<a href="https://etcd.io/docs/v3.4/op-guide/performance/#benchmarks">https://etcd.io/docs/v3.4/op-guide/performance/#benchmarks</a></li><li>数据一更新就落盘持久化，数据持久化存储使用 WAL (write ahead log） ，预写式日志。格式 WAL 记录了数据变化的全过程，在 etcd 中所有数据在提交之前都要先写入 WAL 中； etcd Snapshot （快照）文件则存储了某一时刻 etcd 的所有数据，默认设置为每 10000 条记录做一次快照，经过快照后WAL 文件即可删除</li><li>etcd底层也是基于B+树来做存储的</li><li>etcd可以扮演两大角色：①持久化的键值存储系统 ②分布式系统数据一致性服务提供者</li><li>请求执行顺序：<ul><li>每次写入都是在一个事务（tx）中完成的。</li><li>一个事务（tx）可以包含若干个写操作。</li><li>etcd集群有一个leader，写请求都会提交给它。</li><li>leader先将数据保存成日志形式，并定时的将日志发往其他节点保存。</li><li>当超过1&#x2F;2节点成功保存了日志，则leader会将tx最终提交（也是一条日志）。</li><li>一旦leader提交tx，则会在下一次心跳时将提交记录发送给其他节点，其他节点也会提交。</li><li>leader宕机后，剩余节点协商找到拥有最大已提交tx ID（必须是被超过半数的节点已提交的）的节点作为新leader。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GRPC相关</title>
      <link href="/post/60485/"/>
      <url>/post/60485/</url>
      
        <content type="html"><![CDATA[<h1 id="1、rpcx-VS-grpc"><a href="#1、rpcx-VS-grpc" class="headerlink" title="1、rpcx VS grpc"></a>1、rpcx VS grpc</h1><ul><li><p>1、 设计和背景</p><ul><li>gRPC 是由 Google 开发的一个高性能、开源和通用的 RPC 框架。它支持多种编程语言，包括 C、Java、Go</li><li>rpcx 是 Go 语言生态圈的 RPC 框架。它利用 Go 语言的并发特性和简洁语法，实现高效的分布式 RPC 服务。</li></ul></li><li><p>2、 语言支持</p><ul><li>gRPC 支持跨语言调用，目前支持的语言类型包括 C++、Java、Go、Python、Ruby、Node.js、Android、C#、PHP 和 Objective-C。</li><li>rpcx 主要使用 Go 语言开发，但也支持通过 HTTP 调用，使得其他编程语言也可以调用 rpcx 服务。</li></ul></li><li><p>3、 性能</p><ul><li>gRPC 采用 ProtoBuf 序列化协议，性能优于其他协议，req\rsp包的大小相较于其他的小很多，而且包的encoding\decoding性能都相对较高</li><li>rpcx 在性能测试中表现优异，尤其是在高并发场景下，吞吐率和响应时间都优于许多其他框架。</li></ul></li><li><p>4、 服务治理</p><ul><li>gRPC 目前不直接支持分布式服务治理，需要额外的开发来实现，不直接支持多种注册中心和管理中心。</li><li>rpcx 一样，支持服务治理，包括服务发现、负载均衡和容错机制、支持多种注册中心和管理中心。</li></ul></li><li><p>5、 序列化协议</p><ul><li>gRPC 只支持 ProtoBuf 序列化协议。</li><li>rpcx 支持多种序列化框架，包括 Hessian2、Json 等，并且可以扩展。</li></ul></li></ul><h1 id="2、基于HTTP-x2F-2的通信方式"><a href="#2、基于HTTP-x2F-2的通信方式" class="headerlink" title="2、基于HTTP&#x2F;2的通信方式"></a>2、基于HTTP&#x2F;2的通信方式</h1><p>参考：<a href="https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07shps3livl">https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07shps3livl</a></p><p><strong>grpc是基于http&#x2F;2的协议，不是TCP、UDP层面的协议</strong></p><h2 id="http-x2F-2优势"><a href="#http-x2F-2优势" class="headerlink" title="http&#x2F;2优势"></a><a href="https://xiaolincoding.com/network/2_http/http_interview.html#http-2-%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%E4%BC%98%E5%8C%96">http&#x2F;2优势</a></h2><ul><li>头部压缩。http&#x2F;1 只对消息体压缩，消息头不压缩。http&#x2F;2会压缩请求头，同时在客户端和服务器同时维护一张头信息表，基于字段生成一个索引号，如果发现是同一个信息，只发送索引号，增加效率</li><li>HTTP&#x2F;2 不再像 HTTP&#x2F;1.1 里的纯文本形式的报文，而是全面采用了二进制格式，头信息和数据体都是二进制，并且统称为帧（frame）：头信息帧（Headers Frame）和数据帧（Data Frame）</li><li>HTTP&#x2F;1.1 的实现是基于请求-响应模型，一个请求对应一个响应。HTTP&#x2F;2引出了Stream概念，同一个TCP链接中，可以包含1个或多个Message。</li></ul><p>顺便看看吧：</p><p><a href="https://xiaolincoding.com/network/2_http/http_rpc.html">既然有 HTTP 协议，为什么还要有 RPC</a></p><p><a href="https://xiaolincoding.com/network/2_http/http_websocket.html">既然有 HTTP 协议，为什么还要有 WebSocket</a></p><h2 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h2><p>包含 3 部分：请求头信息、以长度作为前缀的消息以及流结束标记（end of stream flag，EOS标记），远程调用在客户端发送请求头信息之后就会初始化，然后其中会发送以长度作为前缀的消息，最后发送 EOS 标记，通知收件方请求消息已发送。</p><img src="https://img.ncfl.tech/202409041858667.jpg" width=600px/><p><strong>请求头：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HEADERS (flags = END_HEADERS)   ------- 请求头结束表示符 END_HEADERS</span><br><span class="line">:method = POST                  ------- 始终为 POST</span><br><span class="line">:scheme = http                  ------- https / http</span><br><span class="line">:path = /ProductInfo/getProduct ------- 路径，定义为/&#123;服务名&#125;/&#123;方法名&#125;</span><br><span class="line">:authority = abc.com            ------- IP</span><br><span class="line">te = trailers                   ------- 始终为 trailers</span><br><span class="line">grpc-timeout = 1S               ------- 调用时设置，默认无穷大</span><br><span class="line">content-type = application/grpc ------- 始终为 application/grpc</span><br><span class="line">grpc-encoding = gzip            ------- identity、gzip、deflate、snappy 、自定义</span><br></pre></td></tr></table></figure><p><strong>消息体：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATA (flags = END_STREAM)       ------- 请求体结束表示为 END_STREAM EOS</span><br><span class="line">&lt;Length-Prefixed Message&gt;       ------- 以长度开头的消息体</span><br></pre></td></tr></table></figure><h2 id="响应体："><a href="#响应体：" class="headerlink" title="响应体："></a>响应体：</h2><p>主要包括3个主要部分：响应头信息、以长度作为前缀的消息以及trailer，消息体可能为空</p><img src="https://img.ncfl.tech/202409041857361.jpg" width=600px/><p><strong>响应头：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HEADERS (flags = END_HEADERS)   ------- 请求头结束表示符 END_HEADERS</span><br><span class="line">:status = 200                   ------- http响应码</span><br><span class="line">grpc-encoding = gzip            ------- identity、gzip、deflate、snappy 、自定义</span><br><span class="line">content-type = application/grpc ------- 始终为 application/grpc</span><br></pre></td></tr></table></figure><p><strong>消息体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATA                            ------- 注意，这里不会有EOS</span><br><span class="line">&lt;Length-Prefixed Message&gt;       ------- 以长度开头的消息体</span><br></pre></td></tr></table></figure><p><strong>trailer：</strong> 所有的数据发送完成之后，发送trailer，表明消息全部发送完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HEADERS (flags = END_STREAM, END_HEADERS) ------- 请求头结束表示符 END_HEADERS + EOS</span><br><span class="line">grpc-status = 0                           ------- grpc状态码</span><br><span class="line">grpc-message = xxxxxx                     ------- grpc状态信息</span><br></pre></td></tr></table></figure><p><strong>grpc-status:</strong></p><table><thead><tr><th>错误码</th><th>数字</th><th>描述</th></tr></thead><tbody><tr><td>OK</td><td>0</td><td>成功状态</td></tr><tr><td>CANCELLED</td><td>1</td><td>操作已被（调用者）取消</td></tr><tr><td>UNKNOWN</td><td>2</td><td>未知错误</td></tr><tr><td>INVALID_ARGUMENT</td><td>3</td><td>客户端指定了非法参数</td></tr><tr><td>DEADLINE_EXCEEDED</td><td>4</td><td>在操作完成前，就已超过了截止时间</td></tr><tr><td>NOT_FOUND</td><td>5</td><td>某些请求实体没有找到</td></tr><tr><td>ALREADY_EXISTS</td><td>6</td><td>客户端试图创建的实体已存在</td></tr><tr><td>PERMISSION_DENIED</td><td>7</td><td>调用者没有权限执行特定的操作</td></tr><tr><td>RESOURCE_EXHAUSTED</td><td>8</td><td>某些资源已被耗尽</td></tr><tr><td>FAILED_PRECONDITION</td><td>9</td><td>操作被拒绝，系统没有处于执行操作所需的状态</td></tr><tr><td>ABORTED</td><td>10</td><td>操作被中止</td></tr><tr><td>OUT_OF_RANGE</td><td>11</td><td>尝试进行的操作超出了合法的范围</td></tr><tr><td>UNIMPLEMENTED</td><td>12</td><td>在该服务中，未实现或不支持（未启用）本操作</td></tr><tr><td>INTERNAL</td><td>13</td><td>内部错误</td></tr><tr><td>UNAVAILABLE</td><td>14</td><td>该服务当前不可用</td></tr><tr><td>DATA_LOSS</td><td>15</td><td>不可恢复的数据丢失或损坏</td></tr><tr><td>UNAUTHENTICATED</td><td>16</td><td>客户端没有进行操作的合法认证凭证</td></tr></tbody></table><h1 id="3、通信模式"><a href="#3、通信模式" class="headerlink" title="3、通信模式"></a>3、通信模式</h1><p>参考：<a href="https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07qe06gbf2p">https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07qe06gbf2p</a></p><h2 id="一元RPC模式"><a href="#一元RPC模式" class="headerlink" title="一元RPC模式"></a>一元RPC模式</h2><img src="https://img.ncfl.tech/202409041235224.jpg" width=600px/><img src="https://img.ncfl.tech/202409042057225.jpg" width=600px/><p>简单来说，就是一个请求对应一个响应</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 生成在两个文件</span></span><br><span class="line"><span class="comment"> go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span><br><span class="line"><span class="comment"> protoc --go_out=. --go-grpc_out=. hello.proto</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 生成在一个文件</span></span><br><span class="line"><span class="comment"> go install github.com/golang/protobuf/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> protoc  --go_out=plugins=grpc:. hello.proto</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *hello.HelloRequest) (*hello.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received: %v&quot;</span>, in.GetName())</span><br><span class="line"><span class="keyword">return</span> &amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1234&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端流RPC模式"><a href="#服务端流RPC模式" class="headerlink" title="服务端流RPC模式"></a>服务端流RPC模式</h2><img src="https://img.ncfl.tech/202409041244716.jpg" width=600px/><img src="https://img.ncfl.tech/202409042058987.jpg" width=600px/><p>简单来说，就是一个请求对应多个响应，client端可能需要聚合多个响应</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (stream HelloReply)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 生成在两个文件</span></span><br><span class="line"><span class="comment"> go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span><br><span class="line"><span class="comment"> protoc --go_out=. --go-grpc_out=. hello.proto</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 生成在一个文件</span></span><br><span class="line"><span class="comment"> go install github.com/golang/protobuf/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> protoc  --go_out=plugins=grpc:. hello.proto</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/one_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s server)</span></span> SayHello(request *hello.HelloRequest, helloServer hello.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received: %v&quot;</span>, request.GetName())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + request.GetName() + fmt.Sprint(i)&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1235&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/one_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1235&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rec, err := r.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, rec.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="客户端流RPC模式"><a href="#客户端流RPC模式" class="headerlink" title="客户端流RPC模式"></a>客户端流RPC模式</h2><img src="https://img.ncfl.tech/202409041245122.jpg" width=600px/><img src="https://img.ncfl.tech/202409042058843.jpg" width=600px/><p>简单来说，就是多个请求对应一个响应，server端可能需要聚合多个请求</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (stream HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 生成在两个文件</span></span><br><span class="line"><span class="comment"> go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span><br><span class="line"><span class="comment"> protoc --go_out=. --go-grpc_out=. hello.proto</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 生成在一个文件</span></span><br><span class="line"><span class="comment"> go install github.com/golang/protobuf/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> protoc  --go_out=plugins=grpc:. hello.proto</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/stream_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s server)</span></span> SayHello(helloServer hello.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">req, err := helloServer.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">name += req.GetName() + <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Received: %v&quot;</span>, name)</span><br><span class="line"><span class="keyword">return</span> helloServer.SendAndClose(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1236&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/stream_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1236&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.Send(&amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span> + fmt.Sprint(i)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream one send error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rsp, err := r.CloseAndRecv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;CloseAndRecv() got error %v, want %v&quot;</span>, err, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, rsp.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双向流RPC模式"><a href="#双向流RPC模式" class="headerlink" title="双向流RPC模式"></a>双向流RPC模式</h2><img src="https://img.ncfl.tech/202409041246626.jpg" width=600px/><img src="https://img.ncfl.tech/202409042059949.jpg" width=600px/><p>简单来说，就是多个请求对应多个响应，server，client端按照需要处理不同的请求体和响应体</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeter service definition.</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (stream HelloRequest) <span class="keyword">returns</span> (stream HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 生成在两个文件</span></span><br><span class="line"><span class="comment"> go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span><br><span class="line"><span class="comment"> protoc --go_out=. --go-grpc_out=. hello.proto</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 生成在一个文件</span></span><br><span class="line"><span class="comment"> go install github.com/golang/protobuf/protoc-gen-go@latest</span></span><br><span class="line"><span class="comment"> protoc  --go_out=plugins=grpc:. hello.proto</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s server)</span></span> SayHello(helloServer hello.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> count, step <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">req, err := helloServer.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">name += req.GetName() + <span class="string">&quot; &quot;</span></span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v &quot;</span>, step, name)</span><br><span class="line">helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">step++</span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v &quot;</span>, step, name)</span><br><span class="line"><span class="keyword">return</span> helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1237&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1237&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.Send(&amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span> + fmt.Sprint(i)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send close error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rsp, err := r.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;CloseAndRecv() got error %v, want %v&quot;</span>, err, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, rsp.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、interceptor拦截器"><a href="#4、interceptor拦截器" class="headerlink" title="4、interceptor拦截器"></a>4、interceptor拦截器</h1><p><a href="https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07tqsoqh6rg">https://www.iminho.me/wiki/docs/grpc-cloud-native-go-and-java/grpc-cloud-native-go-and-java-1f07tqsoqh6rg</a><br>直接看代码吧</p><h2 id="一元拦截器"><a href="#一元拦截器" class="headerlink" title="一元拦截器"></a>一元拦截器</h2><p>server</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/interceptor_one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *hello.HelloRequest) (*hello.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received: %v&quot;</span>, in.GetName())</span><br><span class="line"><span class="keyword">return</span> &amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1238&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer(grpc.UnaryInterceptor(serverInterceptor)) <span class="comment">// ChainUnaryInterceptor 支持多个interceptor</span></span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serverInterceptor 服务端拦截器，pb与上文中一模一样</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serverInterceptor</span><span class="params">(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span></span> (any, <span class="type">error</span>) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;before server interceptor req %+v info %+v&quot;</span>, req, info)</span><br><span class="line">rsp, err := handler(ctx, req)</span><br><span class="line">log.Printf(<span class="string">&quot;after server interceptor req %+v info %+v&quot;</span>, req, info)</span><br><span class="line"><span class="keyword">return</span> rsp, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/interceptor_one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1238&quot;</span>,</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">grpc.WithUnaryInterceptor(clientInterceptor), <span class="comment">// WithChainUnaryInterceptor 支持多个interceptor</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clientInterceptor 客户端拦截器，pb与上文中一模一样</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientInterceptor</span><span class="params">(ctx context.Context, method <span class="type">string</span>, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;before client interceptor method %+v, req %+v, rsp %+v opts %+v&quot;</span>, method, req, reply, opts)</span><br><span class="line">err := invoker(ctx, method, req, reply, cc, opts...)</span><br><span class="line">log.Printf(<span class="string">&quot;after client interceptor method %+v, req %+v, rsp %+v opts %+v&quot;</span>, method, req, reply, opts)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流拦截器"><a href="#流拦截器" class="headerlink" title="流拦截器"></a>流拦截器</h2><p>server</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/interceptor_stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s server)</span></span> SayHello(helloServer hello.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> count, step <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">req, err := helloServer.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">name += req.GetName() + <span class="string">&quot; &quot;</span></span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v &quot;</span>, step, name)</span><br><span class="line">helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">step++</span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v &quot;</span>, step, name)</span><br><span class="line"><span class="keyword">return</span> helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1239&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer(grpc.StreamInterceptor(serverStreamInterceptor)) <span class="comment">// ChainStreamInterceptor 支持多个interceptor</span></span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serverStreamHandler 服务端拦截器对象，pb与上文中一模一样</span></span><br><span class="line"><span class="keyword">type</span> serverStreamHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">grpc.ServerStream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RecvMsg 接收消息之前拦截处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *serverStreamHandler)</span></span> RecvMsg(m <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[Server Stream Interceptor Wrapper] Receive a message %+v&quot;</span>, m) <span class="comment">// 此处不能直接获取到值，对应的类型等数据需要在w.ServerStream.RecvMsg(m)解析后获取</span></span><br><span class="line"><span class="keyword">return</span> w.ServerStream.RecvMsg(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SendMsg 发送消息之前拦截处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *serverStreamHandler)</span></span> SendMsg(m <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[Server Stream Interceptor Wrapper] Send a message %+v&quot;</span>, m)</span><br><span class="line"><span class="keyword">return</span> w.ServerStream.SendMsg(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serverStreamInterceptor 服务端流拦截器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serverStreamInterceptor</span><span class="params">(srv <span class="keyword">interface</span>&#123;&#125;, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;before server interceptor info %+v&quot;</span>, info)</span><br><span class="line">err := handler(srv, &amp;serverStreamHandler&#123;ss&#125;)</span><br><span class="line">log.Printf(<span class="string">&quot;after server interceptor info %+v&quot;</span>, info)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/interceptor_stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1239&quot;</span>,</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">grpc.WithStreamInterceptor(clientStreamInterceptor), <span class="comment">// WithChainStreamInterceptor 支持多个interceptor</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.Send(&amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span> + fmt.Sprint(i)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send close error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rsp, err := r.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;CloseAndRecv() got error %v, want %v&quot;</span>, err, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, rsp.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clientStreamHandler 客户端拦截器对象，pb与上文中一模一样</span></span><br><span class="line"><span class="keyword">type</span> clientStreamHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">grpc.ClientStream</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RecvMsg 接收消息之前拦截处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *clientStreamHandler)</span></span> RecvMsg(m <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[Client Stream Interceptor Wrapper] Receive a message %+v&quot;</span>, m) <span class="comment">// 此处不能直接获取到值，对应的类型等数据需要在w.ClientStream.RecvMsg(m)解析后获取</span></span><br><span class="line"><span class="keyword">return</span> w.ClientStream.RecvMsg(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SendMsg 发送消息之前拦截处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *clientStreamHandler)</span></span> SendMsg(m <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;[Client Stream Interceptor Wrapper] Send a message %+v&quot;</span>, m)</span><br><span class="line"><span class="keyword">return</span> w.ClientStream.SendMsg(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clientStreamInterceptor 服务端流拦截器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientStreamInterceptor</span><span class="params">(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method <span class="type">string</span>, streamer grpc.Streamer, opts ...grpc.CallOption)</span></span> (grpc.ClientStream, <span class="type">error</span>) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;before client interceptor desc %+v, method %+v, opts %+v&quot;</span>, desc, method, opts)</span><br><span class="line">s, err := streamer(ctx, desc, cc, method, opts...)</span><br><span class="line">log.Printf(<span class="string">&quot;after client interceptor desc %+v, method %+v, opts %+v&quot;</span>, desc, method, opts)</span><br><span class="line"><span class="keyword">return</span> &amp;clientStreamHandler&#123;s&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5、请求头"><a href="#5、请求头" class="headerlink" title="5、请求头"></a>5、请求头</h1><h2 id="一元请求头"><a href="#一元请求头" class="headerlink" title="一元请求头"></a>一元请求头</h2><p>client</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/header_one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1240&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求中添加请求头</span></span><br><span class="line">md := metadata.Pairs(<span class="string">&quot;clientKn&quot;</span>, <span class="string">&quot;clientVn&quot;</span>)                                                                           <span class="comment">// 新建请求头 Pairs，Join，NEW都可以</span></span><br><span class="line">mdCtx := metadata.NewOutgoingContext(context.Background(), md)                                                         <span class="comment">// 追加到现有的context中方式1</span></span><br><span class="line">ctx := metadata.AppendToOutgoingContext(mdCtx, <span class="string">&quot;clientK1&quot;</span>, <span class="string">&quot;clientV1&quot;</span>, <span class="string">&quot;clientK1&quot;</span>, <span class="string">&quot;clientV2&quot;</span>, <span class="string">&quot;clientK3&quot;</span>, <span class="string">&quot;clientV3&quot;</span>) <span class="comment">// 追加到现有的context中方式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收客户端返回的请求头</span></span><br><span class="line"><span class="keyword">var</span> header, trailer metadata.MD</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(ctx, &amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span>&#125;, grpc.Header(&amp;header), grpc.Trailer(&amp;trailer))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;header from server %+v&quot;</span>, header)</span><br><span class="line">log.Printf(<span class="string">&quot;trailer from server %+v&quot;</span>, trailer)</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/header_one_one/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *hello.HelloRequest) (*hello.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">log.Printf(<span class="string">&quot;Received: %v, header %+v %+v&quot;</span>, in.GetName(), md, ok)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// 请求中添加请求头</span></span><br><span class="line">md = metadata.Join(md, metadata.Pairs(<span class="string">&quot;serverKn&quot;</span>, <span class="string">&quot;serverVn&quot;</span>, <span class="string">&quot;serverK1&quot;</span>, <span class="string">&quot;serverV1&quot;</span>, <span class="string">&quot;serverK1&quot;</span>, <span class="string">&quot;serverV2&quot;</span>, <span class="string">&quot;serverK3&quot;</span>, <span class="string">&quot;serverV3&quot;</span>)) <span class="comment">// 新建请求头 Pairs，Join，NEW都可以</span></span><br><span class="line">grpc.SendHeader(ctx, metadata.Join(md, metadata.Pairs(<span class="string">&quot;serverHeaderK&quot;</span>, <span class="string">&quot;serverHeaderV&quot;</span>)))                                              <span class="comment">// 设置rsp的header</span></span><br><span class="line">grpc.SetTrailer(ctx, metadata.Join(md, metadata.Pairs(<span class="string">&quot;serverTrailerK&quot;</span>, <span class="string">&quot;serverTrailerV&quot;</span>)))                                            <span class="comment">// 设置rsp的trailer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1240&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流请求头"><a href="#流请求头" class="headerlink" title="流请求头"></a>流请求头</h2><p>client</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/header_stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Client</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.NewClient(<span class="string">&quot;localhost:1241&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := hello.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求中添加请求头</span></span><br><span class="line">ctx := metadata.AppendToOutgoingContext(context.Background(), <span class="string">&quot;clientK1&quot;</span>, <span class="string">&quot;clientV1&quot;</span>)</span><br><span class="line"></span><br><span class="line">r, err := c.SayHello(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.Send(&amp;hello.HelloRequest&#123;Name: <span class="string">&quot;world&quot;</span> + fmt.Sprint(i)&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;stream stream send close error : %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rsp, err := r.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;CloseAndRecv() got error %v, want %v&quot;</span>, err, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, rsp.GetMessage())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收客户端返回的请求头</span></span><br><span class="line"><span class="keyword">if</span> header, err := r.Header(); err == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;header from server %+v&quot;</span>, header)</span><br><span class="line">log.Printf(<span class="string">&quot;trailer from server %+v&quot;</span>, r.Trailer())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;test/rpc/grpc/header_stream_stream/proto/hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s server)</span></span> SayHello(helloServer hello.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line">md, _ := metadata.FromIncomingContext(helloServer.Context())</span><br><span class="line">helloServer.SendHeader(metadata.Join(md, metadata.Pairs(<span class="string">&quot;serverHeaderK&quot;</span>, <span class="string">&quot;serverHeaderV&quot;</span>))) <span class="comment">// 设置rsp的header，只能调用一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> count, step <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">req, err := helloServer.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">name += req.GetName() + <span class="string">&quot; &quot;</span></span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">md = metadata.Join(md, metadata.Pairs(fmt.Sprintf(<span class="string">&quot;serverK%d&quot;</span>, step), fmt.Sprintf(<span class="string">&quot;serverV%d&quot;</span>, step)))</span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v&quot;</span>, step, name)</span><br><span class="line">helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">step++</span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helloServer.SetTrailer(metadata.Join(md, metadata.Pairs(fmt.Sprintf(<span class="string">&quot;serverTrailerK%d&quot;</span>, step), fmt.Sprintf(<span class="string">&quot;serverTrailerV%d&quot;</span>, step)))) <span class="comment">// 设置rsp的trailer</span></span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;step %d Received: %v header %+v&quot;</span>, step, name, md)</span><br><span class="line"><span class="keyword">return</span> helloServer.Send(&amp;hello.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1241&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">hello.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err = s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺丰-全链路压测</title>
      <link href="/post/60570/"/>
      <url>/post/60570/</url>
      
        <content type="html"><![CDATA[<h1 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h1><ul><li>顺丰双十一的流量会暴涨，需要预计系统是否能扛住，经过一年的迭代不知道系统是否是否还有瓶颈</li><li>前一年在测试环境搭建了一个系统重新部署压测，测试环境不够真实，且能力有限，很多场景没有压测到</li><li>拉上其他核心系统一起在正式环境压测，并且保证每个接口同时达到峰值（单接口压测并不能反应系统的压力）</li><li>当年的流量压力更大，预计为日常的3倍</li><li>顺丰的服务不算真正意义的微服务，分模块了，但是每个服务都比较大，一共就5个服务（设计非常巧妙）（pickup\delivery\sync\topic\match）</li></ul><h1 id="负责"><a href="#负责" class="headerlink" title="负责"></a>负责</h1><ul><li>压测前期：<ul><li>数据采集：采集每个接口的数据请求量</li></ul></li><li>数据隔离：<ul><li>基于AOP，保障压测数据不会流入正式环境的存储。</li><li>错峰压测，保证对线上影响最小。</li><li>对于非压测系统，需要mock，模拟sleep(),防止影响下游，包括数据和流量</li></ul></li><li>能力构建：<ul><li>自建压测平台进行全链路压测（别人写的，我是协助者，但是代码看得七七八八的）</li><li>Groovy嵌套脚本，压测服务启动时预热groovy脚本，后续随时使用</li><li>go、shell、jvm 分析脚本瓶颈</li></ul></li><li>压测结果：<ul><li>kafka 磁盘升级：压测工具写kafka写不进去，经常timeout，kafka所在机器告警，升级&amp;更换更好的物理机</li><li>kafka 分区数量扩容：消费kafka对应的服务，通过监控看有几台没有波动，通过分析是因为kafka分区数小于节点数。虽然kafka增加分区了不能减少分区，但是评估下来影响不大。迁移在半夜迁移，影响几乎为零（服务已经做好了幂等策略，保证同一个数据不会被重复消费）</li><li>服务日志级别变更：之前的日志级别是INFO，通过java的堆栈分析（heap dump和thread dump），发现很多现成卡在了日志级别上</li><li>服务CPU内存升级：之前的服务器和kakfa是在一个机房的，长时间没有维护，运维也怕背锅，把对应的服务升级了。好像是8核16G升级成了16核32G（还是12核？）为了双十一，这点成本值了，时间短</li></ul></li><li>压测后续：构建系统健康监控系统，保障系统可观测性可用，异常情况及时预警<ul><li>对整个系统的数据情况、来源比较了解。</li><li>和数据同学沟通，将每个接口对应的数据上报捞出来（一两百行的SQL）绘制成图</li><li>针对不同接口设置不同的预警值，分别有短信电话告警值。前期把领导们吵的不行，一点点优化</li><li>在腾讯这是个相关成熟的功能，但是在顺丰这些能力需要自己搭建</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NOW直播-安全改造</title>
      <link href="/post/62811/"/>
      <url>/post/62811/</url>
      
        <content type="html"><![CDATA[<h1 id="WHAT（安全指的是啥）"><a href="#WHAT（安全指的是啥）" class="headerlink" title="WHAT（安全指的是啥）"></a>WHAT（安全指的是啥）</h1><ul><li>底线类，不能涉及红线色情等明显违反国家的内容，对于存疑内容需要接入人审内容进一步审核<ul><li>用户个人资料(头像、昵称、签名、简介)</li><li>用户言论动态(直播间弹幕，私聊文案，动态图文，评论信息)</li><li>主播开播信息(主播间文案，主播间封面)</li><li>直播内容审核(直播间画面，直播间言论)</li></ul></li><li>生态类，用户在平台不能出现过分行为，更多是基于场景配置，对应的数值需要业务评估调整<ul><li>上文底线类之后，其余的有平台评估(比如对平台的评论，不涉及底线，需要业务评估是否需要打击)</li><li>用户刷榜数据(主要是针对商业化活动，比如用户通过某种行为冲榜的次数有最基础的频控)</li><li>羊毛党用户(主要针对渠道拉新，比如用户来平台薅羊毛，不能全部拦截，也不能肆无忌惮)</li><li>IP设备频控(同一个IP、设备在同一个时间内操作次数管控)</li><li>用户QQ微信端活跃度(针对用户在QQ、微信的行为进行评估是否允许操作)</li></ul></li><li>业务类，业务自己维护的能力：<ul><li>用户黑白名单(A拉黑B之后，则禁止某些行为)</li><li>用户实名信息维护(未成年人禁止、送礼开播等行为)</li><li>业务安全打击能力维护(封禁登录、开播、私信、房间管理员等行为)</li><li>运营能力搭建(运营同学可以在平台上针对用户进行处罚解封)</li><li>业务自身针对不同的场景维护的敏感词</li><li>用户举报能力维护</li></ul></li></ul><h1 id="WHY（为什么需要做这个事情）"><a href="#WHY（为什么需要做这个事情）" class="headerlink" title="WHY（为什么需要做这个事情）"></a>WHY（为什么需要做这个事情）</h1><ul><li>运营能力不足：甲方通报，平均一周能收到一个通报，主播为了利益，言论和画面上违规</li><li>策略能力不足：多年前搭建的能力，对应的接入方已经不再维护，导致审核能力欠缺</li><li>扩展能力不足：服务紊乱，之前每个服务对接不同的安全，接入的服务有几十个，统一维护难度大(核心技术难点)</li><li>降本增效：梳理不用的安全送审，合并安全送审</li></ul><h1 id="HOW（怎么做的）"><a href="#HOW（怎么做的）" class="headerlink" title="HOW（怎么做的）"></a>HOW（怎么做的）</h1><ul><li>策略升级：<ul><li>对于图片，语音，文字的审核能力，业务搭建成本大，接入第三方成熟的方案</li><li>公司内部有多个不同的团队，分别负责底线，人审等，需要去多方了解沟通，评估接入的技术成本，运营成本，优劣势等，具体细节就不讲了，耗时了将近一个月，疯狂评估方案</li><li>接入之后方案的切换，准确率，误伤率得保证</li></ul></li><li>扩展能力升级：<ul><li>百来个场景，优化后68种安全审核场景，整体链路缩减40%，服务节点减少60%，流量减少50%</li><li>搭建统一的接入层，所有的安全送审都通过接入层接入安全，仅用5个服务cover安全送审（接入服务，数据提供服务，处置平台服务，业务安全服务，旁路送审）</li><li>通过画布的拖拽决定使用哪些策略及其对应的配置阈值，新场景的接入目前几乎无开发量</li><li>将对应的需要送审的场景逐一改造成新的送审，并逐步切换（工作量巨大）</li><li>兼容同步送审和异步回调送审</li></ul></li><li>运营能力升级 &amp; 降本增效<ul><li>舍弃无人维护的老平台运营，接入第三方的人审平台和公司内部的人审团队(之前承接给第三方)</li></ul></li></ul><p>结果：目前QQ直播、群视频采用的都是我这边的方案来做安全送审，且甲方的通报几乎降为0，非常偶尔来一个</p><h1 id="降级-限流-熔断"><a href="#降级-限流-熔断" class="headerlink" title="降级 限流 熔断"></a>降级 限流 熔断</h1><h2 id="case："><a href="#case：" class="headerlink" title="case："></a>case：</h2><ol><li>之前很多甲方通过的case，都是因为安全侧下游超时放过导致的，评估后决定从严处理，有异常直接拦截或者返回错误，让用户重试来解决</li><li>去年腾讯广州光纤断了&amp;内部裁撤导致有个服务仅剩广州节点，导致用户进房发送弹幕都失败了</li><li>正常逻辑采用熔断去解决和降级，熔断一般作用在接口级别，意味着每个接口都需要加一下熔断逻辑，太复杂，且没必要</li><li>采用限流方式，限流反着用，错误数达到一直程度则放过，并将对应的请求写入kafka去重试，基于内部框架，直接配置化即可</li><li>设计了后续观察流量其实没有用上，这就是一个权衡的问题，需要具体业务具体分析。</li></ol><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>一句话，一切都是为了服务可能更好的进行下去，但是有些服务为了保证数据一致性是不能降级的，需要业务评估（比如结账，支付，个人觉得为了数据的一致性，在某些情况下直接返回异常）</p><ul><li>限流和熔断都算是降级的处理方式</li><li>基础且必须字段过滤（uid，登录态，字段传参是否满足正则等）</li><li>状态机过滤（顺丰）</li><li>假设新A服务挂了，采用老的B服务作为备选</li><li>传参某个字段异常，采用其他地方获取到的字段做备选</li><li>同一个页面，分多个URL拉取数据，保证页面数据不会都丢失，也是一种降级策略</li><li>在大型活动时，手动关闭部分不是核心数据的获取，也是降级策略</li></ul><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>参考：<a href="https://cloud.tencent.com/developer/article/2042810">https://cloud.tencent.com/developer/article/2042810</a> </p><p>作用：防止系统雪崩，避免给当前系统造成太大的压力；保证部分流量能够得到响应，超出系统承受能力的流量直接拒绝；一般作用在服务顶端</p><h3 id="限流相关算法"><a href="#限流相关算法" class="headerlink" title="限流相关算法"></a>限流相关算法</h3><ul><li>固定窗口<ul><li>使用计数器在周期内累加访问次数，当达到设定的限流值时，触发限流策略。下一个周期开始时，进行清零，重新计数。</li><li>临界问题，两个周期的交界处，QPS可能会double</li></ul></li><li>滑动窗口<ul><li>将时间周期分为N个小周期，分别记录每个小周期内访问次数，并且根据时间滑动删除过期的小周期</li><li>滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。</li></ul></li><li>漏桶<ul><li>访问请求到达时直接放入漏桶，如当前容量已达到上限（限流值），则进行丢弃（触发限流策略）。漏桶以固定的速率进行释放访问请求（即请求通过），直到漏桶为空。</li><li>请求量巨大时，也是稳定处理，QPS稳定</li></ul></li><li>令牌桶<ul><li>程序以r（r&#x3D;时间周期&#x2F;限流值）的速度向令牌桶中增加令牌，直到令牌桶满，请求到达时向令牌桶请求令牌，如获取到令牌则通过请求，否则触发限流策略</li><li>可以短暂应对突发的流量，可以短暂应对高峰</li></ul></li></ul><table><thead><tr><th><strong>算法</strong></th><th><strong>确定参数</strong></th><th><strong>空间复杂度</strong></th><th><strong>时间复杂度</strong></th><th><strong>限制突发流量</strong></th><th><strong>平滑限流</strong></th><th><strong>分布式环境下实现难度</strong></th></tr></thead><tbody><tr><td>固定窗口</td><td>计数周期T、周期内最大访问数N</td><td>低O(1）（记录周期内访问次数及周期开始时间）</td><td>低O(1)</td><td>否</td><td>否</td><td>低</td></tr><tr><td>滑动窗口</td><td>计数周期T、周期内最大访问数N</td><td>高O(N)（记录每个小周期中的访问数量）</td><td>中O(N)</td><td>是</td><td>相对实现。滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑</td><td>中</td></tr><tr><td>漏桶</td><td>漏桶流出速度r、漏桶容量N</td><td>低O(1)（记录当前漏桶中容量）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr><tr><td>令牌桶</td><td>令牌产生速度r、令牌桶容量N</td><td>低O(1)（记录当前令牌桶中令牌数）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr></tbody></table><h3 id="golang限流"><a href="#golang限流" class="headerlink" title="golang限流"></a>golang限流</h3><ul><li>库：golang.org&#x2F;x&#x2F;time&#x2F;rate</li><li>采用算法：令牌桶</li><li>相关使用教程：<a href="https://www.cyhone.com/articles/usage-of-golang-rate/">https://www.cyhone.com/articles/usage-of-golang-rate/</a></li></ul><h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p>作用：防止系统雪崩，避免给下游的系统造成太大的压力；避免下游系统的异常导致本系统不可用；一般作用在接口调用层面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相关参数</span></span><br><span class="line">hystrix.ConfigureCommand(<span class="string">&quot;my_command&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line"><span class="comment">// 超时时间，单位毫秒 ms。默认 1000ms</span></span><br><span class="line">Timeout: <span class="number">1000</span>,</span><br><span class="line"><span class="comment">// 最大并发数，超过这个设置就返回错误。默认 10</span></span><br><span class="line">MaxConcurrentRequests: <span class="number">10</span>,</span><br><span class="line"><span class="comment">// 一个窗口10秒内请求的数量阙值，达到这个阙值就开启熔断，默认是20</span></span><br><span class="line">RequestVolumeThreshold: <span class="number">20</span>,</span><br><span class="line"><span class="comment">// 熔断器被激活后，多久重试服务是否可用，单位毫秒。默认 5000ms</span></span><br><span class="line">SleepWindow: <span class="number">5000</span>,</span><br><span class="line"><span class="comment">// 设置错误数量统计百分比阙值，超过这个阙值，就开启熔断。默认 50</span></span><br><span class="line">ErrorPercentThreshold: <span class="number">50</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="https://img.ncfl.tech/202404182327630.png" width=600px/><p>ps：golang相关的库的测试：<a href="https://www.jianshu.com/p/be5c139c11e3">https://www.jianshu.com/p/be5c139c11e3</a></p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="策略模型"><a href="#策略模型" class="headerlink" title="策略模型"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html">策略模型</a></h2><ul><li>在合适的时候（服务启动），向map中注册方法及其对应的实现；在调用的时候，根据名字拉取到方法，然后执行调用</li><li>安全中，这个用的最多，比如是否被拉黑，是否成年人，是否被频控，需要送审哪些安全第三方等方法，需要依赖不同的第三方，基于策略模式，就可以在合适的时候调用不同的方法策略</li></ul><h2 id="组合模型"><a href="#组合模型" class="headerlink" title="组合模型"></a><a href="https://www.runoob.com/design-pattern/composite-pattern.html">组合模型</a></h2><ul><li>类似于树结构，一个完整的产品需要由不同的组件完成</li><li>在一次安全校验的过程中，经常需要经过不同的策略，整合评估后才OK，这会就需要通过组合模型来并发去校验</li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><a href="https://www.runoob.com/design-pattern/factory-pattern.html">工厂模式</a></h2><ul><li>基于不同的传参，实例化不同的对象</li><li>在框架中几乎用烂了，每个第三方组件都需要在服务配置中进行申明，调用的时候，需要根据名字实例化不同的对象，比如传入A_redis,则实例化ARedis，传入B_redis，则实例化BRedis</li></ul><h2 id="模板模型"><a href="#模板模型" class="headerlink" title="模板模型"></a><a href="https://www.runoob.com/design-pattern/template-pattern.html">模板模型</a></h2><ul><li>所有的处理都按照一定的模板进行执行，只有部分流程不同，不同的部分抽象成不同的方式来实现</li><li>在安全处置的模块，这个模型用的特别多。针对处罚，按照模板（前置校验&amp;参数补齐，PrePunish,Punish,PosPunish，数据入库推送等）新增一个类型的处置，仅需要实现接口，就可以完成接入，很多底层的逻辑都已经封装好了（比如前置过滤，上报，处置记录，推送等环节）</li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a><a href="https://bbs.huaweicloud.com/blogs/327504">建造者模式</a></h2><ul><li>在构建对象，需要不断地去填请求参数，这个时候就可以使用构造器模式</li><li>在<code>gorm</code>中又大量的使用，比如<code>db.Table(&quot;table&quot;).Select(&quot;field&quot;).Where(&quot;id = ?&quot;, 1).Where(&quot;index = ?&quot;, 2).Limit(1).Order(&quot;id ASC&quot;)</code></li><li>在框架中这中模式也用了很多，比如<code>proxy.DoRequest(ctx,req,opt...)</code>后面的这些opt全是为了在这请求中，不断补充的参数。在构建框架层面的限流器的时候，也用了这种方式，很好用。</li><li>但是除了框架层面用，业务代码中用，其实不见好用，因为可能很多opt都用不到</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><a href="https://www.liwenzhou.com/posts/Go/singleton/">单例模式</a></h2><p><a href="https://www.liwenzhou.com/posts/Go/singleton/">https://www.liwenzhou.com/posts/Go/singleton/</a></p><ul><li>懒汉式，线程不安全，可能会在某一瞬间重复调用实例化方法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line"><span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">instance = &amp;singleton&#123;&#125;   <span class="comment">// 不是并发安全的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>懒汉式，线程安全，每次获取实例对象的时候都需要排队</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> mu Sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    mu.Lock()                    <span class="comment">// 如果实例存在没有必要加锁</span></span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>饿汉式（现在几乎都是用这种，简单，可能会造成实例化的对象根本用不到，且绝大部分是需要的，即使不需要，也不会占用太大的空间）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">instance = &amp;singleton&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>双重加锁是：较安全的，上面的三个问题都可以避免<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> initialized <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUInt32(&amp;initialized) == <span class="number">1</span> &#123;  <span class="comment">// 原子操作 </span></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> initialized == <span class="number">0</span> &#123;</span><br><span class="line">         instance = &amp;singleton&#123;&#125;</span><br><span class="line">         atomic.StoreUint32(&amp;initialized, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>获取用golang封装的<code>sync.Once</code>来实现，与上面相差不大</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span></span> *singleton &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NOW直播-关注关系维护</title>
      <link href="/post/10891/"/>
      <url>/post/10891/</url>
      
        <content type="html"><![CDATA[<h1 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h1><p>A关注B,这个关系对写mysql还是写redis？核心问题就是持久化问题</p><ul><li><p>如果写redis：</p><ul><li>优点：<ol><li>响应速度快</li><li>代码设计简单，不用做冷热数据的维护，set维护即可</li></ol></li><li>缺点：<ol><li>持久化问题，redis是通过广播的方式来做主从的数据备份，一旦master挂了，必然导致数据丢失</li><li>成本问题，纯内存的成本必然高</li><li>冷热数据都存在redis中，但是冷数据其实存在磁盘中即可</li></ol></li></ul></li><li><p>如果写mysql：</p><ul><li>优点：<ol><li>数据持久化，即使节点挂了，数据也是安全的</li><li>成本相对偏低</li></ol></li><li>缺点：<ol><li>响应速度相对不足，磁盘相较于内存还是有很大差距的</li><li>必然需要需要redis做冷热数据的维护，代码复杂度上去</li></ol></li></ul></li><li><p>当今mysql &amp; redis的关系</p><ul><li>顺丰：数据安全最重要：– 假设用户有反馈，丢了一个单搞不好就真的没了<ol><li>mysql作为核心数据存储，redis作为缓存，所有数据以mysql数据为准</li><li>可以做到数据的自己的修复，直接把redis干掉就完事了，当然要注意缓存雪崩 缓存击穿 缓存穿透</li><li>需要维护redis和mysql的数据一致性，相对而言，系统会比较复杂（写数据的时候，双删的策略，先删除redis，再更新mysql，再删除redis）</li></ol></li><li>腾讯：用户体验最重要：– 假设用户有反馈，直接给用户手动补齐虚拟物品即可<ol><li>redis缓存核心数据，mysql作为数据的操作日志，redis异常的时候用以修复数据</li><li>用户数据异常的时候，需要手动根据mysql的日志进行修复</li><li>系统设计相对于简单，直接写两个存储即可，毕竟出问题的概率不大，mysql的存储日志使用场景不大，更适合微服务</li></ol></li></ul></li></ul><h1 id="不同场景的关注维护"><a href="#不同场景的关注维护" class="headerlink" title="不同场景的关注维护"></a>不同场景的关注维护</h1><p>ps: 以下业务上都是允许一两条数据的丢失，但是不允许大部分数据的丢失，因为少量数据的丢失，用户可以用重试的机制自动修复，或者人工保障之后运营维护</p><h2 id="新项目"><a href="#新项目" class="headerlink" title="新项目"></a>新项目</h2><ul><li>背景：关注关系比较简单，类似微信这种的，为好友关系，关系为双向的。A添加B为好友，B也是A的好友。</li><li>设计：目前设计是用redis的set存储，同一个用户仅有一个key。A同意添加B为好友之后，写分别在A和B的key添加上对方即可。</li><li>性能影响：好友关系，正常来说，一个用户对应的好友不会有太多，所以不用考虑大key的出现，O(logN)也不会降低性能（假设真的有用户添加很多的好友，业务加上限限制即可）</li><li>不足：数据安全性，保存在redis中，如果真的故障了，只能通过rdb或者主从恢复，可能导致数据丢失</li></ul><h2 id="QQ直播"><a href="#QQ直播" class="headerlink" title="QQ直播"></a>QQ直播</h2><ul><li>背景：关注关系较复杂，有两个关系：关注列表，粉丝列表。两个列表是单向的，且量级上可能存在巨大差异</li><li>设计：在redis分别维护同一个用户的关注列表、粉丝列表。A关注B之后，在A的关注列表加上B，在B的粉丝列表上加上A</li><li>性能影响：正常来说用户的关注列表一般比较小，但是粉丝列表可能巨大，大key和O(logN)性能问题不可避免</li><li>不足：①无法避免突发事件，如果某个用户的粉丝列表突然增大了，响应速率会快速降低，作为底层组件，直接影响该上游； ②如果可以预料会有大主播，可以提前申请，分配key的时候，可以根据账号ID来做分key操作；或者业务可以接受T+1的影响，会在每天凌晨对当天达到阈值的key进行自动分key操作； ③数据安全性，保存在redis中，如果真的故障了，只能通过rdb或者主从恢复，可能导致数据丢失</li></ul><h2 id="NOW直播"><a href="#NOW直播" class="headerlink" title="NOW直播"></a>NOW直播</h2><ul><li>背景：之前的关注底层存储不再维护，需要重新设计一套新存储</li><li>方案选项<ul><li>关注列表： 选择redis还是mysql<ul><li>关注的访问QPS是巨高的（2000&#x2F;s），查询是否关注，拉去关注列表等操作。</li><li>①如果选择mysql，性能肯定跟不上（舍弃） </li><li>②如果选择redis又担心数据丢失，这是敏感且关键的数据（舍弃）；</li><li>③经过多方的了解，腾讯内部有个组件KeewiDB，支持数据的冷热备份，即实现了类似mysql-redis的数据存储，降低了业务复杂度；同时支持redis的协议和备份，万一这个组件后续真的异常了，便于把数据直接迁移到redis；采用的组件是Inter提供的一个持久化组件，内存-持久化内存-SSD，但是具体的实现细节没有提供；经过官方文档提供的压测报告和业务自己的压测结论，可以作为选型；比纯redis便宜，数据更安全</li></ul></li><li>粉丝列表<ul><li>QPS访问量不大；核心解决大Key问题；主要来源为用户手动操作，但是几百万的大主播不会去一页一页翻粉丝列表；业务后台不会自动访问，比如给主播所有的粉丝推送消息等，但是这种情况允许delay</li><li>①如果选择redis，必须要解决大key的问题，主动分key等操作（舍弃）</li><li>②选用MongoDB，可以自己完成分key的操作，也是之前的团队推荐的方案，相较于mysql这种关系型数据库，MongoDB这种更适合做关注的存储，相关比较见<a href="https://blog.ncfl.tech/post/243/#mysql-VS-mongoDB">https://blog.ncfl.tech/post/243/#mysql-VS-mongoDB</a></li></ul></li><li>数据一致性保障：<ul><li>写数据通过加锁来保障不会冲突，key: A_B</li><li>写双份存储，优先写redis，redis失败，直接错误；redis成功之后，写MongoDB，如果MongoDB失败了，直接异步kafka，按照最新的时间戳做重试，进而保证数据写接口耗时不会太高</li><li>读数据，拉取关注列表，直接从内存拉取，未做优化。拉取粉丝列表，暂未新增一层缓存，暂时没必要</li></ul></li></ul></li></ul><h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><ul><li>微信架构：内存-&gt;SSD-&gt;STAT，采用三级缓存，但是数据一致性的维护成本较高。可以抗住6亿存储量。</li><li>采用地域hash算法对数据进行区域性缓存，即上海的用户的缓存只会存在上海的缓存中，避免无用的冷数据，且分摊不同区域的压力。</li><li>没有微信的量，也没有微信的成本预算，没有必要设计得那么复杂。</li></ul><h1 id="关注迁移"><a href="#关注迁移" class="headerlink" title="关注迁移"></a>关注迁移</h1><p>copy on write COW</p><ol><li>新服务作为老服务proxy，将服务请求转发至老服务，并将对应的写请求暂存</li><li>冷备数据为T-1的，将某天的冷备数据迁移至新存储介质中</li><li>将步骤1中的数据按照时间进行重写到新存储</li><li>写数据双写，读数据校验新老介质数据是否一样，如果不一样，则用老数据进行修复</li><li>存储迁移完毕，数据切换</li></ol><h1 id="持久化内存"><a href="#持久化内存" class="headerlink" title="持久化内存"></a>持久化内存</h1><p>核心参考：<a href="https://zhuanlan.zhihu.com/p/391089447">https://zhuanlan.zhihu.com/p/391089447</a></p><ul><li>大：目前持久内存单条内存容量最大可以达到 512 GB，而目前服务器单条内存一般最多到 32&#x2F;64 GB。也就是说，单台服务器使用持久内存可以轻松到达 TB 级别的内存容量。另一方面，单位价格来说，持久内存为普通内存的一半左右。</li><li>快：既然也号称为内存，那必然不能慢。可以看到，持久内存相比较于普通 SSD 有1-2个数量级的延迟性能优势，相比较于硬盘优势更加巨大。当然对比与DRAM，其会有一定的性能差距。但是实际使用中由于性能瓶颈不一定在内存上，所以一般不会有特别明显的差距（一般性能衰退在一倍以内）。</li><li>持久性：通俗来说，就是持久内存有跟硬盘一样的特性，断电以后重启，内存中的数据依然存在。此项特性可以说是秒杀内存，内存中的数据我们都知道断电或者程序以外退出以后就不复存在。此项特性使得持久内存即可以当做一个高速持久化设备使用，也可以满足内存应用某些场景下的快速恢复的需求。</li></ul><table><thead><tr><th></th><th>带宽</th><th>延迟</th><th>服务器典型内存容量</th><th>持久化？</th></tr></thead><tbody><tr><td>硬盘</td><td>100 MB&#x2F;sec</td><td>10 ms</td><td>&gt; 10 TB</td><td>是</td></tr><tr><td>硬盘（RAID-5）</td><td>400 MB&#x2F;sec</td><td>10 ms</td><td>&gt; 10 TB</td><td>是</td></tr><tr><td>SATA SSD</td><td>500 MB&#x2F;sec</td><td>200 us</td><td>10 TB</td><td>是</td></tr><tr><td>NVMe SSD</td><td>2.5 GB&#x2F;sec</td><td>100 us</td><td>10 TB</td><td>是</td></tr><tr><td>PMem</td><td>50 GB&#x2F;sec</td><td>1 us</td><td>3 TB</td><td>是</td></tr><tr><td>DDR4</td><td>100 GB&#x2F;sec</td><td>100 ns</td><td>512 GB</td><td>否</td></tr></tbody></table><h1 id="持久化内存原理"><a href="#持久化内存原理" class="headerlink" title="持久化内存原理"></a>持久化内存原理</h1><h3 id="为啥快"><a href="#为啥快" class="headerlink" title="为啥快"></a>为啥快</h3><ul><li>插在内存条卡槽上，所以具备了跟内存条几乎一样的优势<ol><li>直接与CPU进行加交互，其他的存储介质几乎都是通过内存再与CPU交互的，所以速度快</li><li>pmem和CPU一把比较近，很大程度上降低了电子信号传输的时间，所以速度快</li><li>插在内存条卡槽上，接触的点比较多，传输的宽带比较大，所以速度快</li><li>并发性，因为引脚多，固允许同时进行多个读写操作，提高了整体的数据处理速度，所以速度快</li><li>pmem与CPU交互的通信协议与内存条保证了一致，避免了兼容问题和过度问题，所以速度快。（比如 跳过CPU，直接内存访问的DMA）</li></ol></li><li>CPU cache line对齐，即是pmem与CPU上面的缓存可以做到一一对应，减少了二者的寻址的次数和时间，所以速度快</li><li>不像传统磁盘的旋转寻道，不像ssd的闪存等技术，直接做电子的存储所以快</li><li>3D XPoint这样的非易失性存储技术，比比传统NAND闪存更快，比DRAM稍慢点（如果要问这个是啥，直接怼回去）</li><li><em><strong>不要说这一点</strong></em>：持久话内存有两种模式，一种就是当成内存条来用，性能也跟内存条（DRAM）差不多，一种是当成持久化设备来用，需要搭配内存条使用，就是为啥内存条:pmem&#x3D;1:8 1:16</li></ul><h3 id="怎么做到持久化-（核心是3D-XPoint技术，内容如下）"><a href="#怎么做到持久化-（核心是3D-XPoint技术，内容如下）" class="headerlink" title="怎么做到持久化 （核心是3D XPoint技术，内容如下）"></a>怎么做到持久化 （核心是3D XPoint技术，内容如下）</h3><ul><li>存储单元变了：通过改变电阻的高低来保存数据，高电阻表是0，低电阻表示1，电阻的高低即是在断电了也是保存住的（从电容存储单元换成了电阻存储单元，跟材料学业相关）</li><li>无需供电：内存条需要不断供电刷新来保证数据的状态，基于电阻则不需要一致刷新，写入即可，断电也可恢复</li><li><em><strong>不要说PCM这种技术</strong></em>，也不要讲电容这种技术，PCM目前没有广泛使用，持久化用的是pmem，也就是3D XPoint，内存用的是DRAM，SSD固态用的是NAND；电容是内存条用的储存单元</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库面试准备</title>
      <link href="/post/243/"/>
      <url>/post/243/</url>
      
        <content type="html"><![CDATA[<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p>核心参考：<a href="https://www.cnblogs.com/libras/p/17268847.html">https://www.cnblogs.com/libras/p/17268847.html</a></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>mysql不仅仅有<code>MyISAM</code>和<code>InnoDB</code>这两种存储引擎，主要是由于5.5之前默认是<code>MyISAM</code>，5.5之后默认是<code>InnoDB</code>，所以经常被拿来比较</p><table><thead><tr><th align="center"><strong>区别</strong></th><th><strong>MyISAM</strong></th><th><strong>InnoDB</strong></th></tr></thead><tbody><tr><td align="center"><strong>存储格式</strong></td><td>两个文件 <br/> .frm文件存储表定义 <br/> .MYD(MYDdata)存储数据文件  <br/>.MYI(MYIndex)存储索引文件</td><td>两个文件 <br/>.frm文件表结构文件 <br/> .ibd文件存储数据和索引文件(B+树)</td></tr><tr><td align="center"><strong>事务</strong></td><td>不支持事务</td><td>支持事务，支持外键</td></tr><tr><td align="center"><strong>性能</strong></td><td>select\insert较快，update\delete性能较差</td><td>select\insert\update\delete性能较均衡</td></tr><tr><td align="center"><strong>锁</strong></td><td>写(update\insert\delete)数据时表锁</td><td>写(update\insert\delete)数据时行锁 <br/> 当然类似没有用到索引或者关联SQL等复杂SQL也是表锁</td></tr><tr><td align="center"><strong>行数</strong></td><td>额外保存了总行数，直接获取，O(1)</td><td>获取总行数需要遍历所有的数据，O(N)</td></tr><tr><td align="center"><strong>清空表(delete)</strong></td><td>直接清除数据</td><td>一行一行清除数据</td></tr></tbody></table><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ul><li>如果是select多的场景，选用<code>MyISAM</code></li><li>如果是数据操作安全性有较高要求，比如事务、数据恢复等选用<code>InnoDB</code></li><li>如果不知道怎么选，则选择<code>InnoDB</code>，不然也不会被选做默认的存储引擎</li></ul><h1 id="InnoDB为啥用B-树"><a href="#InnoDB为啥用B-树" class="headerlink" title="InnoDB为啥用B+树"></a>InnoDB为啥用B+树</h1><p>因为B+树的优点呀，可见：<a href="https://blog.ncfl.tech/post/1106/#B-%E6%A0%91">https://blog.ncfl.tech/post/1106/#B-%E6%A0%91</a></p><ul><li>B+树的磁盘读写的代价更低：B+树的节点只记录值，类似索引，不记录其他信息，一次可以IO更多的节点出来（磁盘的寻道操作更少，IO也更少）—— 不用hash的原因</li><li>B+树的查询更加的稳定：每次都是到根节点才操作数据，查询长度速度稳定 —— 不用B树的原因</li><li>B+树的查询更适合做范围查找：查询到根节点之后，直接从当前节点往后遍历即可，不用再去查找树 —— 不用B树的原因</li></ul><h1 id="事务隔离机制"><a href="#事务隔离机制" class="headerlink" title="事务隔离机制"></a>事务隔离机制</h1><p>主要参考：<a href="https://juejin.cn/post/6844903665367547918">https://juejin.cn/post/6844903665367547918</a></p><h2 id="事务特性：ACID"><a href="#事务特性：ACID" class="headerlink" title="事务特性：ACID"></a>事务特性：<em><strong>ACID</strong></em></h2><ul><li>A：Atomicity 原子性，即操作要么都成功，要么都失败</li><li>C：Consistent 一致性，即操作都符合数据库的要求</li><li>I：Isolation 隔离性，核心讨论这个，<code>Read uncommitted</code>、<code>read committed</code>、<code>repeatable read</code>、<code>Serializable</code>，默认是<code>repeatable read</code></li><li>D：Durable 持久性，即操作都是永久保存的，毕竟是写到了磁盘上</li></ul><p>不同的隔离机制导致的问题：<br><img src=https://img.ncfl.tech/202403272054036.png width=500px/></p><h2 id="脏读，幻读，不可重复读"><a href="#脏读，幻读，不可重复读" class="headerlink" title="脏读，幻读，不可重复读"></a>脏读，幻读，不可重复读</h2><ul><li><p>脏读：读到未commit的数据，该数据可能被回滚</p><img src=https://img.ncfl.tech/202403272056621.png width=500px/><img src=https://img.ncfl.tech/202409231250806.webp width=500px/></li><li><p>不可重复读：两次读到的结果不一致，两次读取到数据中间插入了一个update</p><img src=https://img.ncfl.tech/202403272059882.png width=500px/><img src=https://img.ncfl.tech/202409231251217.webp width=500px/></li><li><p>幻读：两次读到的条数不一致，两次读取到数据中间插入了一个insert</p><img src=https://img.ncfl.tech/202403272058750.png width=500px/><img src=https://img.ncfl.tech/202409231252231.webp width=500px/></li></ul><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>不同的隔离机制，核心是通过不同的锁机制来实现的，如<code>共享读锁</code>、<code>排他写锁</code>、<code>行锁</code>、<code>表锁</code>，当然也可以在业务里面自己对数据加锁来实现，但是对应的性能肯定比不上让mysql加锁快</p><p>性能上：<code>Read uncommitted</code>&gt;<code>read committed</code>&gt;<code>repeatable read</code>&gt;<code>Serializable</code></p><p>数据安全上：<code>Read uncommitted</code>&lt;<code>read committed</code>&lt;<code>repeatable read</code>&lt;<code>Serializable</code></p><h1 id="mvcc"><a href="#mvcc" class="headerlink" title="mvcc"></a>mvcc</h1><p>etcd、mysql都是基于mvcc来管理和控制的</p><p>一定要看这几篇文章，基于mysql讲的，非常详细：<br><a href="https://www.cnblogs.com/qdhxhz/p/15750866.html">https://www.cnblogs.com/qdhxhz/p/15750866.html</a><br><a href="https://mp.weixin.qq.com/s/LcdorR-oldsm3FEYAAnisQ">https://mp.weixin.qq.com/s/LcdorR-oldsm3FEYAAnisQ</a><br><a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html">https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html</a><br><a href="https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html">https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html</a></p><p>MVCC （Multi-Version Concurrency Control）多版本并发控制</p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>图解啥是MVCC，在增删改查的时候，会记录之前的记录，然后用链表链接在一起，<code>undo log</code>就是历史版本，回滚日志。如下（当然有个后台线程，会去不断扫描这个<code>undo log</code>，发现没人读写了就删除，降低空间）<br><img src="https://img.ncfl.tech/202409231222622.jpg"></p><h2 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h2><p>读数据的时候，会创建<code>Read View</code>，然后读数据就从这个里面读。具体读取哪个<code>undo log</code>版本的数据，取决于创建<code>Read View</code>的方法<code>changes_visible</code></p><p><img src="https://img.ncfl.tech/202409231227633.png" alt="源码"></p><p>字段含义</p><ul><li>trx_ids: 当前系统中那些活跃(未提交)的读写事务ID, 它数据结构为一个List。(重点注意:这里的trx_ids中的活跃事务，不包括当前事务自己和已提交的事务，这点非常重要)</li><li>low_limit_id: 目前出现过的最大的事务ID+1，即下一个将被分配的事务ID。</li><li>up_limit_id: 活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id。</li><li>creator_trx_id: 表示生成该 ReadView 的事务的 事务id</li></ul><p>图解上文代码判断逻辑：<br><img src="https://img.ncfl.tech/202409231231822.png"></p><h2 id="解决不可重复读（read-repeated-RR）"><a href="#解决不可重复读（read-repeated-RR）" class="headerlink" title="解决不可重复读（read repeated RR）"></a>解决不可重复读（read repeated RR）</h2><p>RR底层用的就是MVCC来管理，进而解决不可重复读的问题。仔细慢慢看看这个case，就知道MVCC怎么解决。</p><ul><li>RR(read repeated)读的时候，在begin transation的时候，就创建了<code>Read View</code>，后续都用这个这个<code>Read View</code></li><li>RC(read commited) RU(read uncommited)读的时候，在每次执行select的时候，都是创建<code>Read View</code>，所以每次读取到的时候可能不一样</li><li><strong>RR下，无法直接解决幻读问题</strong>，可以通过增加行锁来解决： <code>select *  from user where id = 5 for update</code><br><img src="https://img.ncfl.tech/202409231243183.jpg"></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>主要参考：<a href="https://blog.csdn.net/mysteryhaohao/article/details/51719871">https://blog.csdn.net/mysteryhaohao/article/details/51719871</a></p><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><ul><li>普通索引：最基本的索引，没有任何限制，是我们大多数情况下使用到的索引。</li><li>唯一索引：与普通索引类型，不同的是唯一索引的列值必须唯一，但允许为空值。</li><li>全文索引：全文索引（FULLTEXT）仅可以适用于MyISAM引擎的数据表；作用于CHAR、VARCHAR、TEXT数据类型的列。</li><li>组合索引：将几个列作为一条索引进行检索，使用最左匹配原则</li></ul><h2 id="索引怎么用"><a href="#索引怎么用" class="headerlink" title="索引怎么用"></a>索引怎么用</h2><ul><li><p>Innodb里面，只有主键索引的叶子节点保存着真正的数据，其他的索引树的叶子节点保存着主键索引的值。故主键索引的查找，则遍历一棵索引树即可；非主键索引的查找，则需要遍历两棵索引树；</p></li><li><p>最左前缀匹配原则。MySQL会一直向右匹配直到遇到范围查询（&gt;,&lt;,BETWEEN,LIKE）就停止匹配，比如： <code>a = 1 AND b = 2 AND c &gt; 3 AND d = 4</code>，如果建立 （a,b,c,d）顺序的索引，d是用不到索引的，如果建立（a,b,d,c）的索引，则都可以用到，核心原因是B+树建立索引树的时候与索引有关系</p></li><li><p>索引列最好不要计算，比如<code>FROM_UNIXTIME(create_time) = &#39;2016-06-06&#39;</code>就不能使用索引, 但是 <code>a-1 = 2</code>则可以使用索引，索引还是做了一点优化的；<code>LIKE &quot;%aaaaa%&quot;</code>不会使用索引，<code>LIKE &quot;aaa%&quot;</code>却可以使用索引，根本原因还是B+树</p></li><li><p>索引不能建立太多，否则增删改的时候，需要更新每一棵索引树，耗时很高，所以能在原来的索引上加字段，就在原来的上面加字段</p></li><li><p>每条SQL只会用一个索引</p></li><li><p>索引树不能包含<code>NULL</code>字段，所有的<code>NULL</code>都会被放在B+树的最左侧，如果遍历整棵树都没有找到需要的信息，则会去最左侧逐一遍历<code>NULL</code>对应的值</p></li><li><p>索引字段越短越好，同上述B+树原因一样，便于同一次IO查出更多的数据</p></li></ul><h2 id="count-1-和count"><a href="#count-1-和count" class="headerlink" title="count(1)和count(*)"></a>count(1)和count(*)</h2><p>可见：<a href="https://xiaolincoding.com/mysql/index/count.html#%E5%93%AA%E7%A7%8D-count-%E6%80%A7%E8%83%BD%E6%9C%80%E5%A5%BD">https://xiaolincoding.com/mysql/index/count.html#%E5%93%AA%E7%A7%8D-count-%E6%80%A7%E8%83%BD%E6%9C%80%E5%A5%BD</a></p><img src=https://img.ncfl.tech/202403272134799.webp width=600px/><p>因为<code>count(*)</code>等价于<code>count(0)</code>，自然和<code>count(1)</code>没差别了，采用<code>PRIMARY</code>的索引来计算，不会看值，直接计算行数，所以这两个会计算NULL的值</p><p><code>count(主键字段)</code>采用<code>PRIMARY</code>的索引来计算，但是会看值，非NULL的才统计，所以会比上面慢一点</p><p><em><strong>PS：个人强烈建议建表的时候，字段的默认值不要为NULL，在select的时候，可能会有意想不到的错误</strong></em></p><h1 id="mysql-redis数据一致性"><a href="#mysql-redis数据一致性" class="headerlink" title="mysql redis数据一致性"></a>mysql redis数据一致性</h1><p>这类文章太多了，主要推荐：</p><p><a href="http://kaito-kidd.com/2021/09/08/how-to-keep-cache-and-consistency-of-db/">http://kaito-kidd.com/2021/09/08/how-to-keep-cache-and-consistency-of-db/</a></p><p><a href="https://javabetter.cn/mysql/redis-shuju-yizhixing.html">https://javabetter.cn/mysql/redis-shuju-yizhixing.html</a></p><h2 id="核心："><a href="#核心：" class="headerlink" title="核心："></a>核心：</h2><p>引入缓存，提升系统的性能<br>保证高可用的情况下，让数据尽可能快速一致性。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li><p>不好的方案，而且都是显而易见的不好，而且数据过期之前可能一直是脏数据：</p><ul><li>先写mysql，再写redis</li><li>先写redis，再写mysql</li><li>先删除redis，再写mysql</li></ul></li><li><p>好的方案：先更新mysql，在删除缓存；</p><ul><li>这种情况下还是有可能导致数据异常的，当<em><strong>redis从DB捞出来数据之后，要往redis写</strong></em>的耗时，比<em><strong>mysql写进磁盘，然后删除redis存储</strong></em>的耗时还要高的时候，但是这种情况发生的概率就非常低了，因为写内存大概率比写磁盘快。</li><li>万一删除缓存失败了，可以采用如下两种方案：<ul><li>引用kafka将删除任务异步化，进而达到最终一致性</li><li>订阅mysql的binlog，进而达到数据最终一致性</li></ul></li><li>需要更加引用第三方的组件，增加的维护成本和系统的不确定性，但是①这样可以快速达到数据的一致性，且同时两个组件发生问题的概率不大，且都自带重试机制②引入缓存是为了加快系统的响应，且mysql底层由于隔离机制的问题，也可能导致数据的不一致性，如果要既要追求性能，也要保证实时一致，几乎是不可能的。③一致性可以通过数据库的<code>Serializable</code>，或者redis加锁，或者<code>raft</code> <code>Paxos</code>等实现，但是性能都不佳</li></ul></li></ul><h2 id="强一致性算法"><a href="#强一致性算法" class="headerlink" title="强一致性算法"></a>强一致性算法</h2><h3 id="拜占庭问题"><a href="#拜占庭问题" class="headerlink" title="拜占庭问题"></a>拜占庭问题</h3><p><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg&t=1066s">https://www.youtube.com/watch?v=e9KVmyI1eCg&amp;t=1066s</a></p><p>多个人去攻打一座城，超过半数的人去打才能打赢，几个人一起讨论下要不要攻打。<br><img src=https://img.ncfl.tech/202403282352574.jpg width=700px/></p><h3 id="ZAB-raft-Paxos视频"><a href="#ZAB-raft-Paxos视频" class="headerlink" title="ZAB raft Paxos视频"></a>ZAB raft Paxos视频</h3><p><a href="https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from=333.337.search-card.all.click&vd_source=5049cdb7864cfa3b2891e8ab98480c55">https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=5049cdb7864cfa3b2891e8ab98480c55</a></p><ul><li><p>Paxos，核心难点，实现起来太复杂了</p><ul><li>basic paxos，实现复杂，效率低(2次RPC)，存在提案竞争问题，即活锁问题<img src=https://img.ncfl.tech/202403282355173.jpg width=700px/></li><li>multi paxos，选出提案者（leader），避免活锁<img src=https://img.ncfl.tech/202403290002914.jpg width=700px/>    </li><li>multi paxos，leader也可以投票，其他与上差别不大<img src=https://img.ncfl.tech/202403290005997.jpg width=700px/></li></ul></li><li><p>Raft：</p><ul><li>图解1：<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li><li>图解2：<a href="https://raft.github.io/">https://raft.github.io/</a></li><li>应用：<code>k8s</code> <code>etcd</code> <code>RocketMQ</code> <code>Tidb</code> <code>redis哨兵</code></li></ul></li><li><p>ZAB：和raft差不多</p><ul><li>名字解释上不同，raft的周期叫做<code>term</code>,zab的周期叫做<code>epoth</code></li><li>心跳方向相反，raft是leader向follower，zab是follower向leader</li><li>应用：<code>zookeeper</code></li></ul></li></ul><h1 id="mysql主从切换-amp-主从数据同步"><a href="#mysql主从切换-amp-主从数据同步" class="headerlink" title="mysql主从切换 &amp; 主从数据同步"></a>mysql主从切换 &amp; 主从数据同步</h1><p>主要参考：<a href="https://blog.csdn.net/huangjhai/article/details/119192761">https://blog.csdn.net/huangjhai/article/details/119192761</a></p><h2 id="复制类型"><a href="#复制类型" class="headerlink" title="复制类型"></a>复制类型</h2><ul><li>异步复制<ul><li>master在执行完客户端提交的事务后会立即将结果返给给客户端，同时通知slave执行该事务，但是不关心slave是否成功</li><li>如果master节点挂了，同时slave未收取到数据或者未执行成功，则会导致数据丢失</li><li>性能最优，数据安全性最差</li></ul></li><li>半同步复制<ul><li>异步复制的基础上，至少一个slave节点返回成功，则将结果返回给客户端</li><li>性能与数据安全性居中</li></ul></li><li>同步复制<ul><li>master收到事务之后，等待所有的slave节点返回成功，再将结果返回给客户端</li><li>如果master节点挂了，slave与master节点的数据完全一致，随便选择一个slave即可恢复使用</li><li>性能最差，数据安全性最佳</li></ul></li></ul><h2 id="复制方式"><a href="#复制方式" class="headerlink" title="复制方式"></a>复制方式</h2><ul><li>语句复制(Statement格式)<ul><li>binlog中保存已执行的SQL语句</li><li>缺点：类似uuid，时间戳等这种字段，同一条SQL在不同的服务起上执行的结果不一致，无法保证master、slave数据完全一致</li><li>优点：binlog文件小，传输效率高，减少延迟。比如仅需记录<code>delete * FROM A</code>这一条语句就可以记录下所操作的几百万行的数据</li></ul></li><li>行数据复制(Row格式)<ul><li>binlog中保存操作的数据内容，比如插入数据，则保存插入的数据完整行，删除数据也保存要删除所有数据行</li><li>缺点：binlog文件大。</li><li>优点：数据恢复方便，同如<code>delete * FROM A</code>，若发现误删除了，可以从binlog中直接捞到删除的数据进行rollback</li></ul></li><li>混合类型复制（Mixed格式）<ul><li>默认采用基于语句的复制，对于基于语句复制的方式无法精确完成主从复制时，就会采用基于行的复制。</li><li>针对上文中的双方缺点，mysql在执行SQL的时候，对SQL进行判断，根据需要看看要采用哪种方式</li></ul></li></ul><h2 id="主从切换（高可用）"><a href="#主从切换（高可用）" class="headerlink" title="主从切换（高可用）"></a>主从切换（高可用）</h2><p>mysql本身并不没有进行主从切换的能力，只能在发现问题的时候通过手动执行命令行，将slave升级为master，或者自己写脚本等方式不断监听master是否存活</p><p>借助第三方工具实现自动化切换</p><ul><li><a href="https://cloud.tencent.com/developer/article/1706659">基于MHA</a> 主从切换<ol><li>从宕机崩溃的master保存二进制日志事件（binlog events）</li><li>识别含有最新更新的slave</li><li>应用差异的中继日志（relay log）到其他的slave</li><li>应用从master保存的二进制日志事件（binlog events）</li><li>提升一个slave为新的master；</li><li>使其他的slave连接新的master进行复制；</li></ol></li><li>基于<a href="https://juejin.cn/post/7113912792679186440">Keepalived</a> 主主切换<ol><li>Keepalived 提供了一个虚拟 IP （简称 VIP)，对外提供访问。</li><li>当客户端连接这个虚拟 IP 后，只会访问其中一个 MySQL。</li><li>MySQL 节点故障后，keepalived 执行脚本进行重启，如果重启失败，脚本自动停掉 keepalived，备用节点自动切换为主节点。  <img src="https://img.ncfl.tech/202404152100762.awebp" width=400px/></li></ol></li></ul><h1 id="mysql-VS-mongoDB"><a href="#mysql-VS-mongoDB" class="headerlink" title="mysql VS mongoDB"></a>mysql VS mongoDB</h1><p>核心参考：</p><p><a href="https://worktile.com/kb/p/53286">https://worktile.com/kb/p/53286</a></p><p><a href="https://aws.amazon.com/cn/compare/the-difference-between-mongodb-vs-mysql/">https://aws.amazon.com/cn/compare/the-difference-between-mongodb-vs-mysql/</a></p><ul><li>数据结构差异：<ul><li>MYSQL是关系型数据库，即一开始就要确定要存储哪些字段</li><li>mongoDB是BSON文档型数据库，存储的数据结构是json，一条数据对应的就是一个文档，可以在存储的时候随意扩展字段</li><li>MYSQL可以进行多表关联查询，mongoDB只能操作某一条文档。在关联查询下，mongoDB更快，关联查询下，MYSQL更适合。</li></ul></li><li>分布式集群差异：<ul><li>MYSQL若要做分布式部署，或者分库分表，需要业务手动操作和维护</li><li>mongoDB对集群部署支持更好；支持分片的功能，根据分片和主从复制，可以分摊数据库的压力<img src="https://img.ncfl.tech/202404141119064.webp" width=500px/></li></ul></li><li>SQL差异  <ul><li>MYSQL使用的是SQL <code>select * from A</code></li><li>mongoDB使用的是NOSQL查询语句 <code>db.collection.find()</code></li></ul></li><li>内存使用差异<ul><li>MYSQL对内存使用率较低，大多数从磁盘捞取数据，返回给客户端</li><li>MongoDB使用内存映射技术，写数据时，写入内存就返回成本，内存与磁盘的映射交给底层。读数据如果内存存在该数据，则直接返回，不用去操作磁盘，(但是这也存在一定的风险)</li><li>这也是mongoDB比MYSQL快的主要原因之一</li></ul></li></ul><p>ps: 个人理解，mongodb是MYSQL的FULL_TEXT的完整版优化版本</p><h1 id="redis为啥用跳表，innodb为啥用B-树"><a href="#redis为啥用跳表，innodb为啥用B-树" class="headerlink" title="redis为啥用跳表，innodb为啥用B+树"></a>redis为啥用跳表，innodb为啥用B+树</h1><ul><li>innodb用B+树<ul><li>B+ tree是多叉树结构</li><li>三层左右就可以存千万级别的数据量，跳表千万级别数据量不止3层</li><li>一次查询，进行少数的IO便可做获取到数据</li><li>查询性能较好</li></ul></li><li>redis用跳表    <ul><li>跳表是链表结构</li><li>B+树写入性能较差，需要旋转节点等操作</li><li>跳表实现起来更加简单</li><li>跳表写入性能较好</li><li>读数据时不用考虑磁盘IO问题，且没有人会在redis缓存千万级别数据</li></ul></li></ul><h1 id="mongodb相关"><a href="#mongodb相关" class="headerlink" title="mongodb相关"></a>mongodb相关</h1><h2 id="mongodb集群"><a href="#mongodb集群" class="headerlink" title="mongodb集群"></a>mongodb集群</h2><p><a href="https://www.xinbaoku.com/archive/4LIwHdIz.html">https://www.xinbaoku.com/archive/4LIwHdIz.html</a></p><ul><li><p>主从复制：1主N从的节点，保证数据不丢失，但是master挂了需要手动从slaver选出变成master<br><img src="https://www.xinbaoku.com/uploads/allimg/191119/6-191119161632293.gif"></p></li><li><p>副本集：1主N从的节点，保证数据不丢失，但是可以主动完成主从切换，副本集是自带故障转移功能的主从复制<br><img src="https://www.xinbaoku.com/uploads/allimg/191119/6-191119161Q6395.gif"></p></li><li><p>分片</p><ul><li>Shard Server: 单独的副本集，按照分片算法，将数据分配到不同分片上</li><li>Config Server: 保存集群和分片的基础信息，分片平衡器（Balancer）也在这</li><li>Route Server: <ul><li>路由系统，<code>client</code>通过该节点进入，该节点将请求分发到各个<code>Shard Server</code>，再回收每个<code>Shard Server</code>返回的数据，进行简单处理和聚合，再返回给<code>client</code>,等价于一个代理 </li><li>如果请求的数据能知道知道在哪个分片，则直接将数据分发到分片上 如: <code>db.user.find(&#123;id : 1&#125;)</code></li><li>否则则分发到所有的分片上，再由本身做聚合处理 如: <code>db.user.find(&#123;&#125;).limit(100)</code></li></ul></li></ul></li></ul><p><img src="https://www.xinbaoku.com/uploads/allimg/191119/6-1911191633025H.gif"></p><ul><li>主从选举算法—跟redis非常像，几乎一模一样，raft算法（也可以手动触发）<ul><li>时机: <ul><li>redis时机: ①单哨兵没有收到master节点心跳，主观master下线 ②像其他哨兵咨询是否认为redis下线，超过一般，则主观下线变成客观下线</li><li>mongodb时机: salver节点与master节点心跳，几次没有收到之后，就认为master下线，主动触发选举（但是不一定会通过，因为半数原则）</li></ul></li><li>优先级: 存活节点 &gt; 本地数据完整度 &gt; 优先级(配置项) &gt; 投票</li></ul></li></ul><h2 id="增删节点时数据迁移"><a href="#增删节点时数据迁移" class="headerlink" title="增删节点时数据迁移"></a>增删节点时数据迁移</h2><p>核心：（mongodb的分片范围由mongodb自己控制，一开始可能分为[min,10],[10,max]，随着数据的不断增删，可能动态变成[min,20],[20,max]，核心就是保证每个分片的数据大小差不多）</p><p>整体过程如下：</p><ol><li>新分片加入集群</li><li>balancer启动，准备最大的分片数据区迁移至新的分片</li><li>Chunk 是分片中的最小数据单位，包含了基于分片键划分的一部分数据，也是数据迁移的最小单位。</li><li>将Chunk标记为不可写，对Chunk数据进行冷备迁移</li><li>迁移完成后，删除源Chunk数据，route更新该部分Chunk数据路由</li><li>待所有数据迁移完成，观察是否需要做一次均衡，即修改分片范围的上下限，保证每个节点的分片数据量大小差不多</li></ol><p>过程中写操作怎么办：</p><ol><li>如果Chunk未迁移完成，会让写操作等待，啥时候停止，取决于客户端的timeout</li><li>如果Chunk已迁移完成，则直接转发到新的分片上</li></ol><p>过程中节点挂了怎么办：</p><ol><li>核心取决于副本集，不做副本的节点不是好节点</li><li>如果单节点挂了，可能会导致数据的丢失</li><li>balancer支持迁移的暂停和重试，通过不断拉长重试的时间gap。</li></ol><h2 id="数据索引保存在哪里"><a href="#数据索引保存在哪里" class="headerlink" title="数据索引保存在哪里"></a>数据索引保存在哪里</h2><p>每个分片上保存着自己的当前这个分片的索引，且仅自己可见</p><h2 id="扩缩容是否需要hash"><a href="#扩缩容是否需要hash" class="headerlink" title="扩缩容是否需要hash"></a>扩缩容是否需要hash</h2><p>golang map 扩容需要重新hash<br>mongodb 扩缩容不需要重新hash<br>主要取决于hash算法，golang的hash算法与分片数量有关（其实是库容的时候生成了一个随机数）<br>且golang的map的量级肯定跟mongodb的量级不能比，mongodb全部重新hash，得消耗多少性能</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka面试准备</title>
      <link href="/post/13255/"/>
      <url>/post/13255/</url>
      
        <content type="html"><![CDATA[<h1 id="快的原因"><a href="#快的原因" class="headerlink" title="快的原因"></a>快的原因</h1><p>主要参考：<a href="https://www.cnblogs.com/barrywxx/p/11544379.html">https://www.cnblogs.com/barrywxx/p/11544379.html</a></p><ul><li>顺序读写：不像是随机读写，每次消费完数据，只需在上一次读写的位置继续偏移即可，不用重新寻道，旋转磁盘等耗时操作</li><li>零拷贝加快速度：正常来说数据是（文件 -&gt; 内核空间 -&gt; 用户空间 -&gt; 内核空间 -&gt; 网卡推送出去）但是零拷贝可以做到（文件 -&gt; 内核空间 -&gt; 内核空间 -&gt; 网卡推送出去）的拷贝，减少拷贝次数，加快生产消费速度（零拷贝：磁盘IO IO多路复用技术：网络IO）</li><li>分区：一个kafka主题有多个分区，通过分区，可以同时消费同一个主题的数据。</li><li>批量消费：通过批量消费，较少磁盘IO和网络IO的次数，进而加快速度，不过批量消费也是批量commit，可能会导致数据commit丢失，故障了需要保证数据安全</li><li>数据压缩了，减小了磁盘拷贝网络传输过程中的问题</li></ul><img src="https://img.ncfl.tech/202404112116105.webp" width=600px/><img src="https://img.ncfl.tech/202404112117215.webp" width=600px/><h1 id="kafka的分区策略"><a href="#kafka的分区策略" class="headerlink" title="kafka的分区策略"></a>kafka的分区策略</h1><p>核心参考：<a href="https://www.cnblogs.com/hzmark/p/sticky_assignor.html">https://www.cnblogs.com/hzmark/p/sticky_assignor.html</a></p><p>同一个kafka的同一个Partition最多只能由一个consumer消费，保证有序和offset的维护</p><p>消费者分区策略也叫kafka的负载均衡</p><h2 id="RangeAssignor，默认策略"><a href="#RangeAssignor，默认策略" class="headerlink" title="RangeAssignor，默认策略"></a>RangeAssignor，默认策略</h2><p>同一个kafka，根据Partition排序后逐一分配给consumer</p><p>不足：下图第二种情况，C0需要消费P0、P1两个分片，如果多个kafka都是这样的话，C0的压力会很大</p><img src="https://img.ncfl.tech/202404141630906.png" width=700px/><h2 id="RoundRobinAssignor"><a href="#RoundRobinAssignor" class="headerlink" title="RoundRobinAssignor"></a>RoundRobinAssignor</h2><p>将所有kafka的Partition排序后逐一分配给consumer,相对而言均衡了很多</p><img src="https://img.ncfl.tech/202404141637231.png" width=700px/><h2 id="StickyAssignor，黏性分配策略"><a href="#StickyAssignor，黏性分配策略" class="headerlink" title="StickyAssignor，黏性分配策略"></a>StickyAssignor，黏性分配策略</h2><p>上面两种策略，假设某个consumer下线之后，需要对整个partition重新排序后重新分配consumer，无法很好地利用局部性原理。</p><p>StickyAssignor会记住上次partition分配的consumer，在重新分配的时候，尽可能将同一个partition分配给同一个consumer，减少资源消耗和对consumer的影响。</p><ol><li>分区的分配尽量的均衡（首要目标，优先满足）</li><li>每一次重分配的结果尽量与上一次分配结果保持一致</li></ol><img src="https://img.ncfl.tech/202404141641890.png" width=700px/><h1 id="kafka数据一致性-amp-主从切换"><a href="#kafka数据一致性-amp-主从切换" class="headerlink" title="kafka数据一致性 &amp; 主从切换"></a>kafka数据一致性 &amp; 主从切换</h1><p>主要参考：</p><p><a href="https://blog.csdn.net/weixin_38750084/article/details/82942564">https://blog.csdn.net/weixin_38750084/article/details/82942564</a></p><p><a href="https://blog.csdn.net/BASk2311/article/details/130942641">https://blog.csdn.net/BASk2311/article/details/130942641</a></p><p>topic partition broker分布关系图<br><img src="https://img.ncfl.tech/202404161613348.png" width=600px/></p><h2 id="同步复制"><a href="#同步复制" class="headerlink" title="同步复制"></a>同步复制</h2><ol><li>producer联系zk识别leader</li><li>向leader发送消息</li><li>leadr收到消息写入到本地log</li><li>follower从leader pull消息</li><li>follower向本地写入log</li><li>follower向leader发送ack消息</li><li>leader收到所有follower的ack消息</li><li>leader向producer回传ack</li></ol><h2 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h2><p>leader写入本地log之后，直接向client回传ack消息，不需要等待所有follower复制完成</p><h2 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h2><ul><li>ISR：表示和 Leader 保持同步的 Follower 集合。如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值由 <code>replica.lag.time.max.ms</code>参数设定，默认 30s。Leader 发生故障之后，就会从 ISR 中选举新的Leader。如果ISR小于配置的<code>min.insync.replocas</code>则会认为kafka不可用</li><li>OSR：表示 Follower 与 Leader 副本同步时，延迟过多的副本。</li><li>AR: 指的是分区中的所有副本，所以AR &#x3D; ISR + OSR。</li><li>这些信息都是维护在zk里面的，每次选举也是由zk发起和执行的</li></ul><h3 id="follower故障"><a href="#follower故障" class="headerlink" title="follower故障"></a>follower故障</h3><ul><li>LEO（Log End Offset）：每个副本的最后一个offset，LEO就是最新的offset + 1。</li><li>HW（High Watermark）：水位线，所有副本中最小的LEO ，消费者只能看到这个水位线左边的消息，从而保证数据的一致性。</li></ul><img src="https://img.ncfl.tech/202404161621458.png" width=600px/><ul><li>Follower发生故障后会被临时踢出ISR队列。</li><li>这个期间Leader和其他Follower继续接收数据。</li><li>待该Follower恢复后，Follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向Leader进行同步。</li><li>等该Follower的LEO大于等于该Partition的HW，即Follower追上Leader之后，就可以重新加入ISR了。</li></ul><h3 id="leader故障"><a href="#leader故障" class="headerlink" title="leader故障"></a>leader故障</h3><img src="https://img.ncfl.tech/202404161621458.png" width=600px/><ul><li>Leader发生故障之后，会从ISR中选出一个新的Leader</li><li>为保证多个副本之间的数据一致性，其余的Follower会先将各自的log文件高于HW的部分截掉，然后从新的Leader同步数据。</li></ul><h1 id="生产、消费commit方式"><a href="#生产、消费commit方式" class="headerlink" title="生产、消费commit方式"></a>生产、消费commit方式</h1><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>核心参考：<a href="https://blog.csdn.net/u013433591/article/details/128486967">https://blog.csdn.net/u013433591/article/details/128486967</a></p><ul><li>acks&#x3D;0<ul><li>生产者只管发送消息，不等待broker返回响应</li><li>安全级别最低，无法感知broker是否存活</li><li>吞吐量高，网络开销小</li></ul></li><li>acks&#x3D;1<ul><li>生产者发送数据后，等待Leader分区返回结果确认</li><li>如果leader和follower数据未完全同步，leader挂了，则会导致数据丢失</li></ul></li><li>acks&#x3D;all(或者acks&#x3D;-1)<ul><li>生产者发送数据后，等待ISR内所有的follower确认后，Leader分区返回结果确认</li><li>如果ISR小于配置的<code>min.insync.replicas</code>则会认为kafka不可用</li><li>数据安全性最高，性能影响最大</li><li>数据可能会重复，leader挂了，一个follower同步了数据，且被选为新的leader；上个请求失败，客户端重试，造成数据重复</li></ul></li></ul><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>核心参考：<a href="https://jepson-song.github.io/2022/04/06/kafka%E4%B9%8Bconsumer%E7%9A%84commit%E6%9C%BA%E5%88%B6/">https://jepson-song.github.io/2022/04/06/kafka%E4%B9%8Bconsumer%E7%9A%84commit%E6%9C%BA%E5%88%B6/</a></p><ul><li>自动提交<ul><li>每个一段时间，consumer 基于<code>auto_commit_interval_ms</code>配置提交一次commit</li><li>假设未提交成功，发生了rebalance，则会从新的leader上消费数据，但是offset未同步过去，故会造成数据的重复消费</li><li>consumer每次拉取数据都是批量拉取的，假设拉取过程中，部分数据处理处理失败了，但是自动提交只会commit最大的offset，导致失败的数据无法自己重试，造成数据丢失</li></ul></li><li>手动提交<ul><li>同步提交，每消费一个数据提交一次commit，且等待kafka返回提交是否成功，对性能影响较大</li><li>异步提交，每消费一个数据提交一次commit，默认kafka成功收到，如果是偶现的，影响不大，下次offset更大，偏移量还是会往前走，如果kafka挂了，则异步提交一直失败，后续rebalance之后会造成数据重复丢失</li></ul></li></ul><h1 id="kafka顺序读写"><a href="#kafka顺序读写" class="headerlink" title="kafka顺序读写"></a>kafka顺序读写</h1><p>主要参考：<a href="https://www.cnblogs.com/sunsky303/p/9511839.html">https://www.cnblogs.com/sunsky303/p/9511839.html</a></p><h2 id="全局顺序："><a href="#全局顺序：" class="headerlink" title="全局顺序："></a>全局顺序：</h2><p>难度极大：</p><ul><li>发送端：不能异步发送，异步发送可能异步达到，进而导致无序，通过<code>max.in.flight.requests.per.connection</code>指定，为1表示同时请求数最大只能为1</li><li>存储端：每个topic只能由一个partition，且不能有主从，主从无法保证顺序性等，牺牲kafka的高可用和高性能 </li><li>消费端：不能多线程消费，且必须同步提交offset</li></ul><h2 id="局部有序"><a href="#局部有序" class="headerlink" title="局部有序"></a>局部有序</h2><ul><li>假设只是针对某一个订单号或者uid需要有序，则可以将同一个uid、订单号指定发往同一个topic的partition，一个partition最多只能有一个consumer，这样就可以保证有序性</li><li>发送端同样不能异步发送，需要同步发送，消费端也不能多线程消费，且需要同步提交offset</li></ul><h1 id="kafka分区变更"><a href="#kafka分区变更" class="headerlink" title="kafka分区变更"></a>kafka分区变更</h1><p>kafka分区只能增加不能减少：</p><ul><li>减少：partition减少的维护成本太高了，需要将减少的分区数据进行迁移，数据量大，且无法保证输出有序性，迁移过来的数据无法保证追加在后面还是在前面</li><li>增加：增加partition，会导致consumer触发rebalance，进而可能导致分区数据重复消费，消费者需要自身保证数据一致性</li></ul><h1 id="kafka生产发布轮询"><a href="#kafka生产发布轮询" class="headerlink" title="kafka生产发布轮询"></a>kafka生产发布轮询</h1><p>也叫kafka的负载均衡</p><h2 id="producer："><a href="#producer：" class="headerlink" title="producer："></a>producer：</h2><ul><li>如果指定了key，则会根据key的hash值，将数据写入某个指定的partition <code>Utils.abs(key.hashCode) % numPartitions</code></li><li>如果未指定key，则会按照轮询的方式，将数据按照partition轮询写入</li><li>也可以在produce的时候，自己实现分区方式，如随机partition写入，指定几个partition写入等</li></ul><h2 id="consumer："><a href="#consumer：" class="headerlink" title="consumer："></a>consumer：</h2><p>基于consumer分区策略，一个partition只能由一个consumer消费，可见上文，也叫做consumer之间的负载均衡</p><h1 id="kafka删除策略"><a href="#kafka删除策略" class="headerlink" title="kafka删除策略"></a>kafka删除策略</h1><p>参考：<a href="https://blog.csdn.net/u011066470/article/details/125371654">https://blog.csdn.net/u011066470/article/details/125371654</a></p><table><thead><tr><th><strong>属性名</strong></th><th><strong>含义</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>log.cleanup.polict</td><td>日志清理保存的策略只有delete和compact两种</td><td>delete</td></tr><tr><td>log.retention.hours</td><td>日志保存的时间，可以选择hours,minutes和ms</td><td>168(7day)</td></tr><tr><td>log.retention.bytes</td><td>删除前日志文件允许保存的最大值</td><td>-1</td></tr><tr><td>log.segment.delete.delay.ms</td><td>日志文件被真正删除前的保留时间</td><td>60000</td></tr><tr><td>log.cleanup.interval.mins</td><td>每隔一段时间多久调用一次清理的步骤（满足删除）</td><td>10</td></tr><tr><td>log.retention.check.interval.ms</td><td>周期性检查是否有日志符合删除的条件（新版本使用）</td><td>300000</td></tr></tbody></table><h1 id="kafka事务"><a href="#kafka事务" class="headerlink" title="kafka事务"></a>kafka事务</h1><p>参考：<a href="https://it-blog-cn.com/blogs/qmq/transaction.html">https://it-blog-cn.com/blogs/qmq/transaction.html</a></p><h2 id="producer"><a href="#producer" class="headerlink" title="producer"></a>producer</h2><ul><li>At most once：消息发送至多一次；ack&#x3D;0 </li><li>At least once：消息发送至少一次；ack&#x3D;1或者ack&#x3D;all</li><li>Exactly once：消息恰好只发送一次（幂等）；enable.idempotence&#x3D;true &amp;&amp; ack&#x3D;all</li></ul><p>producer怎么做到幂等：</p><ol><li>pid: producer创建的时候，基于主题和分片生成唯一ID，即关联了这个producer会往这个topic的这个partition发数据</li><li>Sequence Numbler: 记录下当前producer在当前topic的当前的partition的序号，新的只有比老的大1（SN_new &#x3D; SN_old + 1）才允许写入，否则报错</li></ol><p>综上，可以做到同一个producer在同一个topic的同一个partition的幂等性，进而实现全局的幂等。简单来说就是用一个唯一ID，来保证这个ID是唯一递增的，进而保证幂等。</p><h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><ul><li>At most once：消息消费至多一次；<ul><li>enable.auto.commit&#x3D;true：后台定时提交offset；</li><li>auto.commit.interval.ms，后台提交offset的时间间隔</li></ul></li><li>At least once：消息消费至少一次；<ul><li>enable.auto.commit&#x3D;false：禁止后台自动提交offset</li><li>手动调用 consumer.commitSync()来提交offset</li></ul></li><li>Exactly once：消息恰好只消费一次（幂等）；<ul><li>isolation.level&#x3D;read_committed</li><li>isolation.level&#x3D;read_uncommitted</li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>producer基于事务操作提供的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 初始化事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initTransactions</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beginTransaction</span><span class="params">()</span> <span class="keyword">throws</span> ProducerFencedException ;</span><br><span class="line"><span class="comment">// 在事务内提交已经消费的偏移量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOffsetsToTransaction</span><span class="params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets,</span></span><br><span class="line"><span class="params">                                     String consumerGroupId)</span> <span class="keyword">throws</span> ProducerFencedException ;</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitTransaction</span><span class="params">()</span> <span class="keyword">throws</span> ProducerFencedException;</span><br><span class="line"><span class="comment">// 丢弃事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abortTransaction</span><span class="params">()</span> <span class="keyword">throws</span> ProducerFencedException ;</span><br></pre></td></tr></table></figure><p>producer基于事务操作提供的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KafkaProducer</span> <span class="variable">producer</span> <span class="operator">=</span> createKafkaProducer(  <span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>,  <span class="string">&quot;transactional.id”, “my-transactional-id&quot;</span>);</span><br><span class="line">producer.initTransactions();</span><br><span class="line">producer.beginTransaction();</span><br><span class="line">producer.send(<span class="string">&quot;outputTopic&quot;</span>, <span class="string">&quot;message1&quot;</span>);</span><br><span class="line">producer.send(<span class="string">&quot;outputTopic&quot;</span>, <span class="string">&quot;message2&quot;</span>);</span><br><span class="line">producer.commitTransaction();</span><br></pre></td></tr></table></figure><p>producer链路大致如下：上文中的幂等只能保证当前producer在当前topic的当前分片是幂等的，无法做到全局性的，所以要做到幂等，kafka引入了<code>Tranaction Coordination</code>来做全局的管理，<code>producer.beginTransaction();</code>就是像<code>Tranaction Coordination</code>请求的ID的</p><img src="https://img.ncfl.tech/202407052117526.png" width=600px/><p>producer在<code>commit</code>之前，数据都是<code>uncommited</code>状态的，<code>commit</code>之后，数据都是<code>commited</code>状态的；consumer基于<code>isolation.level=read_committed</code>配置决定消费的数据是<code>uncommited</code>还是<code>commited</code></p><h1 id="kafka延迟队列"><a href="#kafka延迟队列" class="headerlink" title="kafka延迟队列"></a>kafka延迟队列</h1><img src="https://img.ncfl.tech/202407061053484.webp" width=800px /><p>个人觉得的问题：</p><ul><li>时间粒度可控性差，取决于延迟队列的设计，设计越小则gap越小，但是对应的资源消耗越大</li><li>必须保证投入消息的有序性，否则可能导致后面的消息有一定的滞后。假设30s往10s里面投递消息，正常来说是看第一条消息是否在10s内，如果是，则依次处理，直到满足条件的消息都处理完毕。如果投入消息不是有序的，第一条消息剩余时间29s,第二条消息剩余时间是1s,则会造成第二条消息delay30s处理</li><li>可能存在消费不完的情况，假设某个时候，30s的队列内有1亿条数据，该1亿条数据无法在30s内消费完，则可能对业务产生影响，不过这个是所有延迟队列都可能的问题</li></ul><p>同样是个人觉得：延迟队列可以用zset来做，如果怕数据不持久化或者可回溯性，可以用mysql做backup，就是在写入zset的时候，往mysql里面也写入一份，或者在消耗zset的数据的时候，往mysql里面也写一份</p><h1 id="消息队列的比较"><a href="#消息队列的比较" class="headerlink" title="消息队列的比较"></a>消息队列的比较</h1><table><thead><tr><th>特性</th><th>ActiveMq</th><th>RabbitMq</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>成熟度</td><td>成熟</td><td>成熟</td><td>比较成熟</td><td>成熟的日志领域</td></tr><tr><td>时效性</td><td></td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td></tr><tr><td>社区活跃度</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ</td><td>10万级别，这是kafka最大的优点，就是吞吐量高。一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic数量对吞吐量的影响</td><td></td><td></td><td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td><td>topic从几十个到几百个的时候，吞吐量会大幅度下降所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用性</td><td>高，基于主从架构实现高可用性</td><td>非常高，分布式架构</td><td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td></td><td>经过参数优化配置，可以做到0丢失</td><td>经过参数优化配置，消息可以做到0丢失</td></tr><tr><td>功能支持</td><td>MQ领域的功能极其完备</td><td>基于erlang开发，所以并发能力很强，性能极其好，延时很低</td><td>MQ功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td></tr><tr><td>优劣势总结</td><td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用偶尔会有较低概率丢失消息而且现在社区以及国内应用都越来越少，官方社区现维护越来越少，几个月才发布一个版本而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</td><td>rlang语言开发，性能极其好，延时很低；吞吐量到万级，MQ功能比较完备而且开源提供的管理界面非常棒，用起来很好用社区相对比较活跃，几乎每个月都发布几个版本分在国内一些互联网公司近几年用rabbitmq也比较多一些但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</td><td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的</td><td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集</td></tr><tr><td></td><td></td><td></td><td>原生支持延迟队列等</td><td></td></tr></tbody></table><h1 id="kafka参数"><a href="#kafka参数" class="headerlink" title="kafka参数"></a>kafka参数</h1><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>acks</td><td>produce的确认机制 0：不用确认 1:ISR中一个确认 -1\all: ISR所有确认</td></tr><tr><td>min.insync.replicas</td><td>最小同步的副本数</td></tr><tr><td>replica.lag.time.max.ms</td><td>同步的timeout时间，超过该时间，踢出ISR</td></tr><tr><td>retries</td><td>produce重试次数，超过该值，抛出异常，默认int最大值</td></tr><tr><td>enable.idempotence</td><td>是否开启幂等</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>生产者在收到服务器晌应之前可以发送多少个消息，越大内存占用越大，超过该值，则让按照时间顺序淘汰最先进来的数据，让其重试</td></tr><tr><td>buffer.memory</td><td>缓存区大小，请求进来到写入磁盘的缓存大小，超时则直接报错重试</td></tr><tr><td>max.block.ms</td><td>在buffer.memory等待的timeout</td></tr><tr><td>compression.type</td><td>数据压缩类型，默认none，可选snappy 、gzip 、lz4</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树结构</title>
      <link href="/post/1106/"/>
      <url>/post/1106/</url>
      
        <content type="html"><![CDATA[<p>所有树的基础比较，见：<a href="https://blog.csdn.net/weixin_37645838/article/details/82778923">https://blog.csdn.net/weixin_37645838/article/details/82778923</a></p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树没啥好说的，就是树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type TreeNode struct &#123;</span><br><span class="line">Val   int</span><br><span class="line">Left  *TreeNode</span><br><span class="line">Right *TreeNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>N叉树同上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type TreeNode struct &#123;</span><br><span class="line">Val   int</span><br><span class="line">Node  []*TreeNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>在二插树的基础上，保障左节点的值都小于当前节点，有节点的值都大于当前节点</p><img src=https://img.ncfl.tech/202403252055731.webp width=300px/><p>理想情况下如上图，但是不理想的情况下可能会变成下图，此时复杂度为O(N)，与链表无异</p><img src=https://img.ncfl.tech/202403252100175.webp width=300px/><h1 id="AVL树，平衡二叉树"><a href="#AVL树，平衡二叉树" class="headerlink" title="AVL树，平衡二叉树"></a>AVL树，平衡二叉树</h1><p>在二叉搜索树的基础上，保证左子树和右子树的深度差不大于1。就是类似下面这个图</p><img src=https://img.ncfl.tech/202403252055731.webp width=300px/><ul><li>好处：查找的时候，复杂度O(logN)</li><li>坏处：插入删除的时候，为了保证深度差不大于1，需要不断旋转树，虽然复杂度也是O(logN)，但是次数太多了</li></ul><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>在二叉搜索树的基础上，保证左子树和右子树的深度差不多，和AVL最大的区别就是红黑树可能会出现左右差2,3的情况。就是类似下面这个图，最大最大的好处就是*** 增删改查的复杂度都为O(logN) ***</p><img src=https://img.ncfl.tech/202403252105927.jpg width=300px/><p>红黑树的增删有点费劲，主要是参考下面两篇文章：<br><a href="https://segmentfault.com/a/1190000020118044#articleHeader0">https://segmentfault.com/a/1190000020118044#articleHeader0</a><br><a href="https://my.oschina.net/u/3272058/blog/1914452">https://my.oschina.net/u/3272058/blog/1914452</a></p><p>插入动画可以在 <a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a> 自己去玩</p><h2 id="红黑树的特点"><a href="#红黑树的特点" class="headerlink" title="红黑树的特点"></a>红黑树的特点</h2><ul><li>每个节点非红即黑； </li><li>根节点是黑的； </li><li>每个叶节点(叶节点即树尾端NULL指针或NULL节点)都是黑的； </li><li>如果一个节点是红的,那么它的两儿子都是黑的； </li><li>对于任意节点而言，其到叶子点树NULL指针的每条路径都包含相同数目的黑节点； </li><li>每条路径都包含相同的黑节点；</li></ul><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>这里不用太学术的话术来讲，比较学术的话，参考上面两篇文章</p><ol><li>插入的节点都标记为红色</li><li>根据不同的情况做不同的处理，主要为一下5种，直接上图</li></ol><ul><li><p>uncle为红色情况：直接把uncle和parent变成黑色的</p><img src=https://img.ncfl.tech/202403252113687.webp width=500px/></li><li><p>左左情况：uncle为黑色的情况且插入左侧，则提起parent，然后变色即可</p><img src=https://img.ncfl.tech/202403252114841.webp width=500px/></li><li><p>左右情况：uncle为黑色的情况且插入右侧，则son parent交换一下关系，变成左左情况，然后再执行左左情况</p><img src=https://img.ncfl.tech/202403252114622.webp width=500px/></li><li><p>右右情况：uncle为黑色的情况且插入右侧，同左左，提起parent，然后变色即可</p><img src=https://img.ncfl.tech/202403252115653.webp width=500px/></li><li><p>右左情况：uncle为黑色的情况且插入左侧，则son parent交换一下关系，变成右右情况，然后再执行右右情况</p><img src=https://img.ncfl.tech/202403252115110.webp width=500px/></li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>见<a href="https://my.oschina.net/u/3272058/blog/1914452">https://my.oschina.net/u/3272058/blog/1914452</a></p><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p>B树就是N叉树中的一种，数据完整信息保存在节点中。</p><p>N叉树相对于二叉树，树的深度会小很多，便利的次数也会小很多，进而效率更高。</p><p><em><strong>mongodb用的不是B树，是B+树</strong></em>，看看<a href="https://zhuanlan.zhihu.com/p/519658576">https://zhuanlan.zhihu.com/p/519658576</a></p><p>动画演示见：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p><h2 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h2><img src=https://img.ncfl.tech/202403262131041.jpg width=700px/><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><img src=https://img.ncfl.tech/202403262133490.jpg width=700px/><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>单一查找更方便，更快速的返回，查到节点就直接返回，避免继续索引</li><li>范围查找不友好</li></ul><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>B+树就是N叉树中的一种，数据完整信息都保存在叶子节点中，非叶子节点仅保存数据的索引。</p><p>N叉树相对于二叉树，树的深度会小很多，便利的次数也会小很多，进而效率更高。</p><p>相对于B树，B+树还是吧所有的叶子节点通过指针关联起来</p><p>mysql用的是B+树，<em><strong>mongodb用的也是B+树</strong></em></p><p>动画演示见：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><h2 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h2><img src=https://img.ncfl.tech/202403252357088.jpg width=700px/><h2 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h2><img src=https://img.ncfl.tech/202403260001948.jpg width=700px/><h2 id="好处-1"><a href="#好处-1" class="headerlink" title="好处"></a>好处</h2><ul><li>B+树的磁盘读写的代价更低：B+树的节点只记录值，类似索引，不记录其他信息，一次可以IO更多的节点出来（磁盘的寻道操作更少，IO也更少）</li><li>B+树的查询更加的稳定：每次都是到根节点才操作数据，查询长度速度稳定</li><li>B+树的查询更适合做范围查找：查询到根节点之后，直接从当前节点往后遍历即可，不用再去查找树</li></ul><h1 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h1><p>是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法工具代码</title>
      <link href="/post/2905/"/>
      <url>/post/2905/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串数字比较大小"><a href="#字符串数字比较大小" class="headerlink" title="字符串数字比较大小"></a>字符串数字比较大小</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// curBiggerMax 当前值大于最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">curBiggerMax</span><span class="params">(cur <span class="type">string</span>, max <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> cur != <span class="string">&quot;&quot;</span> &amp;&amp; cur[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &#123;</span><br><span class="line">cur = cur[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> max != <span class="string">&quot;&quot;</span> &amp;&amp; max[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &#123;</span><br><span class="line">max = max[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(max) &gt; <span class="built_in">len</span>(cur) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(max) &lt; <span class="built_in">len</span>(cur) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(max); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> max[i] &gt; cur[i] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> max[i] &lt; cur[i] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> DQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DQueue)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> d.IsEmpty() &#123;</span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d.Peek() &lt; x &#123;</span><br><span class="line">d.data = <span class="literal">nil</span></span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(d.data) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line"><span class="keyword">if</span> d.data[i] &gt;= x &#123;</span><br><span class="line">d.data = d.data[:i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">i := d.data[<span class="number">0</span>]</span><br><span class="line">d.data = d.data[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> d.data[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DQueue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(d.data) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DQueue)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(d.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAAAAA</span><span class="params">(T *testing.T)</span></span> &#123;</span><br><span class="line">minQueue := SortQueue[<span class="type">int</span>]&#123;</span><br><span class="line">compare: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &gt;= b</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    maxQueue := SortQueue[<span class="type">int</span>]&#123;</span><br><span class="line">compare: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">minQueue.Push(<span class="number">1</span>)</span><br><span class="line">minQueue.Push(<span class="number">2</span>)</span><br><span class="line">minQueue.Push(<span class="number">3</span>)</span><br><span class="line">minQueue.Push(<span class="number">2</span>)</span><br><span class="line">minQueue.Push(<span class="number">1</span>)</span><br><span class="line">minQueue.Push(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Numeric <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="type">int</span> | <span class="type">float32</span> | <span class="type">float64</span> | <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SortQueue[T Numeric] <span class="keyword">struct</span> &#123;</span><br><span class="line">data []T</span><br><span class="line"></span><br><span class="line">compare <span class="function"><span class="keyword">func</span><span class="params">(a, b T)</span></span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *SortQueue[T])</span></span> Push(x T) &#123;</span><br><span class="line"><span class="keyword">if</span> d.IsEmpty() &#123;</span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d.compare(d.Peek(), x) &#123;</span><br><span class="line">d.data = <span class="literal">nil</span></span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(d.data); i++ &#123; <span class="comment">// 可以优化为二分查找，加快速率</span></span><br><span class="line"><span class="keyword">if</span> d.compare(d.data[i], x) &#123;</span><br><span class="line">d.data = d.data[:i]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d.data = <span class="built_in">append</span>(d.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *SortQueue[T])</span></span> Pop() T &#123;</span><br><span class="line">i := d.data[<span class="number">0</span>]</span><br><span class="line">d.data = d.data[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *SortQueue[T])</span></span> Peek() T &#123;</span><br><span class="line"><span class="keyword">return</span> d.data[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *SortQueue[T])</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(d.data) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *SortQueue[T])</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(d.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最小顶堆"><a href="#最小顶堆" class="headerlink" title="最小顶堆"></a>最小顶堆</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SmallHeap 最小顶堆</span></span><br><span class="line"><span class="keyword">type</span> SmallHeap <span class="keyword">struct</span> &#123;</span><br><span class="line">data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmallHeap)</span></span> Push(x any) &#123;</span><br><span class="line">s.data = <span class="built_in">append</span>(s.data, x.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmallHeap)</span></span> Pop() any &#123;</span><br><span class="line">i := s.data[<span class="built_in">len</span>(s.data)<span class="number">-1</span>]</span><br><span class="line">s.data = s.data[:<span class="built_in">len</span>(s.data)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmallHeap)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmallHeap)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.data[i] &lt; s.data[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmallHeap)</span></span> Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">s.data[i], s.data[j] = s.data[j], s.data[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSmallHeap</span><span class="params">()</span></span> &#123;</span><br><span class="line">smallHeap := &amp;SmallHeap&#123;&#125;</span><br><span class="line">heap.Init(smallHeap)</span><br><span class="line">heap.Push(smallHeap, <span class="number">5</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">3</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">7</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">9</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">1</span>)</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">heap.Push(smallHeap, <span class="number">2</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">6</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">4</span>)</span><br><span class="line">heap.Push(smallHeap, <span class="number">8</span>)</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">fmt.Println(heap.Pop(smallHeap))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小顶堆简单写法</span></span><br><span class="line"><span class="keyword">type</span> hp <span class="keyword">struct</span> &#123;</span><br><span class="line">sort.IntSlice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *hp)</span></span> Push(v <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">h.IntSlice = <span class="built_in">append</span>(h.IntSlice, v.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *hp)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">v := h.IntSlice[<span class="built_in">len</span>(h.IntSlice)<span class="number">-1</span>]</span><br><span class="line">h.IntSlice = h.IntSlice[:<span class="built_in">len</span>(h.IntSlice)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *hp)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.IntSlice[i] &gt; h.IntSlice[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用栈遍历二叉树的通用代码"><a href="#使用栈遍历二叉树的通用代码" class="headerlink" title="使用栈遍历二叉树的通用代码"></a>使用栈遍历二叉树的通用代码</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// browseTree 以nil作为判断当前节点是否要被输出</span></span><br><span class="line"><span class="comment">// 栈add顺序：</span></span><br><span class="line"><span class="comment">// 前序遍历：右节点 -&gt; 左节点 -&gt; 中节点</span></span><br><span class="line"><span class="comment">// 中序遍历：右节点 -&gt; 中节点 -&gt; 左节点</span></span><br><span class="line"><span class="comment">// 后序遍历：中节点 -&gt; 右节点 -&gt; 左节点 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">browseTree</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stack = []*TreeNode&#123;root&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(stack) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]; node != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"><span class="comment">// 右节点</span></span><br><span class="line"><span class="keyword">if</span> node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, node.Right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左节点</span></span><br><span class="line"><span class="keyword">if</span> node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, node.Left)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中节点</span></span><br><span class="line">stack = <span class="built_in">append</span>(stack, node)</span><br><span class="line">stack = <span class="built_in">append</span>(stack, <span class="literal">nil</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x := stack[<span class="built_in">len</span>(stack)<span class="number">-2</span>]</span><br><span class="line">fmt.Print(x.Val, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UpperBoundOrEqual 二分查找查找第一个大于等于x的索引，如果有相等的数据，就是二分查找了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpperBoundOrEqual</span><span class="params">(a []<span class="type">int</span>, x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sort.Search(<span class="built_in">len</span>(a), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[i] &gt; x</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UpperBound 二分查找查找第一个大于x的索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpperBound</span><span class="params">(a []<span class="type">int</span>, x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sort.Search(<span class="built_in">len</span>(a), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[i] &gt; x</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SearchLessOrEqual 二分查找查询第一个小于等于x的索引，如果有相等的数据，就是二分查找了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchLessOrEqual</span><span class="params">(a []<span class="type">int</span>, x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sort.Search(<span class="built_in">len</span>(a), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[i] &lt;= x</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SearchLess 二分查找查询第一个小于x的索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SearchLess</span><span class="params">(a []<span class="type">int</span>, x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sort.Search(<span class="built_in">len</span>(a), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[i] &lt; x</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">0-1背包问题：</span><br><span class="line">二维数组：</span><br><span class="line">    先遍历物品再遍历容量 或者 先遍历容量再遍历物品 都是OK的  ---  那就先遍历物品再遍历容量</span><br><span class="line">    一维数组：</span><br><span class="line">    只能 先遍历物品再遍历容量 且 容量只能降序，否则物品价值会被重复计算</span><br><span class="line"></span><br><span class="line">完全背包问题：</span><br><span class="line">只能用一维数组</span><br><span class="line">    先遍历物品再遍历容量 或者 先遍历容量再遍历物品 都是OK的</span><br><span class="line"></span><br><span class="line">综上：0-1背包问题尽可能用二维数组， 0-1背包和完全背包的问题都先遍历物品再遍历容量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可能用到的</span><br><span class="line">完全背包问题：先遍历容量再遍历物品 计算次数的时候，可能会出现重复的情况，如果计算值的话，就是正常的</span><br><span class="line">    </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h1><p><a href="https://leetcode.cn/problems/h-index-ii/solutions/2504326/tu-jie-yi-tu-zhang-wo-er-fen-da-an-si-ch-d15k/">https://leetcode.cn/problems/h-index-ii/solutions/2504326/tu-jie-yi-tu-zhang-wo-er-fen-da-an-si-ch-d15k/</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在区间 [left, right] 内询问 核心</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left, right := <span class="number">1</span>, <span class="built_in">len</span>(citations)</span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123; <span class="comment">// 区间不为空</span></span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> citations[<span class="built_in">len</span>(citations)-mid] &gt;= mid &#123;</span><br><span class="line">            left = mid + <span class="number">1</span> <span class="comment">// 询问范围缩小到 [mid+1, right]</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span> <span class="comment">// 询问范围缩小到 [left, mid-1]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环结束后 right 等于 left-1，回答一定为「是」</span></span><br><span class="line">    <span class="comment">// 根据循环不变量，right 现在是最大的回答为「是」的数</span></span><br><span class="line">    <span class="keyword">return</span> right <span class="comment">// 核心</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>golang自带的二分查找</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在区间 [left, right) 内询问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(n <span class="type">int</span>, f <span class="keyword">func</span>(<span class="type">int</span>)</span></span> <span class="type">bool</span>) <span class="type">int</span> &#123;</span><br><span class="line">i, j := <span class="number">0</span>, n</span><br><span class="line"><span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line">h := <span class="type">int</span>(<span class="type">uint</span>(i+j) &gt;&gt; <span class="number">1</span>) <span class="comment">// avoid overflow when computing h</span></span><br><span class="line"><span class="comment">// i ≤ h &lt; j 核心</span></span><br><span class="line"><span class="keyword">if</span> !f(h) &#123;</span><br><span class="line">i = h + <span class="number">1</span> <span class="comment">// preserves f(i-1) == false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">j = h <span class="comment">// preserves f(j) == true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =&gt;  answer is i.</span></span><br><span class="line"><span class="keyword">return</span> i <span class="comment">// 核心</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>场景应对</title>
      <link href="/post/37969/"/>
      <url>/post/37969/</url>
      
        <content type="html"><![CDATA[<h2 id="订单关闭有MQ还是用定时任务扫描"><a href="#订单关闭有MQ还是用定时任务扫描" class="headerlink" title="订单关闭有MQ还是用定时任务扫描"></a>订单关闭有MQ还是用定时任务扫描</h2><p>不能一概而论，要结合业务场景</p><pre><code>MQ可能在高峰的时候会有数据堆积，导致数据延时定时任务扫描对资源占比比较高，需要不断进行扫描。</code></pre><p>正解：一起处理，比如超过x秒的任务用定时任务扫描，快速处理，其他的放进消息队列里面慢慢消费</p><p>扩展：业务中也有类似的场景，比如错误处理，如果错误数小于多少，则直接反馈给用户，反则就扔进消息队列去重试</p><h2 id="1000杯水，其中一杯放糖了，怎么找到这杯水"><a href="#1000杯水，其中一杯放糖了，怎么找到这杯水" class="headerlink" title="1000杯水，其中一杯放糖了，怎么找到这杯水"></a>1000杯水，其中一杯放糖了，怎么找到这杯水</h2><p>正经算法：2^10&#x3D;1024</p><p>取ABCDEFGHIJ，10个新杯子，分别把1000杯水放到这10个杯子里面，然后品尝这10个新杯子的水是否有甜味，即可得知原来哪个杯子有糖，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- A号杯子，放入1,3,5,7...等杯子的水 (0001, 0011,0101,0111)</span><br><span class="line">- B号杯子，放入2,3,6,7...等杯子的水(0010, 0011,0110,0111) </span><br><span class="line">- C号杯子，放入4,5,6,7...等杯子的水(0100, 0101,0110,0111) </span><br></pre></td></tr></table></figure><p>社会算法：</p><ul><li>谁放的糖问谁，工作中沟通效率最重要</li><li>随机找一杯倒掉，然后对外已经找到了，如果有其他人找到就按照造谣处理</li><li>随机找一杯倒掉，然后对外已经找到了，如果有其他人质疑，就要求把剩下999杯喝完</li><li>全部打翻，然后搅合一下， 这样每一杯都有糖了</li></ul><h2 id="mysql有100万数据，redis只能存20万，怎么保证都是热点数据"><a href="#mysql有100万数据，redis只能存20万，怎么保证都是热点数据" class="headerlink" title="mysql有100万数据，redis只能存20万，怎么保证都是热点数据"></a>mysql有100万数据，redis只能存20万，怎么保证都是热点数据</h2><p>redis的淘汰机制</p><h2 id="redis怎么删除大key"><a href="#redis怎么删除大key" class="headerlink" title="redis怎么删除大key"></a>redis怎么删除大key</h2><ul><li>del命令，不推荐，如果key很大会影响导致redis阻塞</li><li>低峰期del，在业务请求量不是很大的时候，执行，降低对业务的影响</li><li>分批删除，可以取出一部分数据，执行删除命令，逐渐把这个key删除掉，把大key变成小key，比如<ul><li>map: HSCAN key cursor [MATCH pattern] [COUNT count]</li><li>list: LPOP key</li><li>set: SSCAN key cursor [MATCH pattern] [COUNT count]</li><li>zset: ZSCAN key cursor [MATCH pattern] [COUNT count]</li></ul></li><li>高版本redis，使用Unlink命令，异步删除key，不会阻塞主线程其他命令的执行（该命令会释放内存，del不会立刻释放内存）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GO面经</title>
      <link href="/post/60576/"/>
      <url>/post/60576/</url>
      
        <content type="html"><![CDATA[<p>相关学习资料：<a href="https://blog.ncfl.tech/post/63609/">https://blog.ncfl.tech/post/63609/</a></p><h1 id="1、垃圾回收机制"><a href="#1、垃圾回收机制" class="headerlink" title="1、垃圾回收机制"></a>1、垃圾回收机制</h1><p>参考大神：<a href="https://www.bilibili.com/video/BV1wz4y1y7Kd">https://www.bilibili.com/video/BV1wz4y1y7Kd</a></p><h2 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h2><ul><li>分配的空间占比达到一定，触发（太复杂的计算了）</li><li>长时间不触发GC，自动触发（默认两分钟）</li><li>手动触发，<code>runtime.GC()</code></li></ul><h2 id="标记法"><a href="#标记法" class="headerlink" title="标记法"></a>标记法</h2><p>从根节点开始，对堆内和栈内的对象进行标记。根对象包括：</p><ul><li>全局变量和静态变量</li><li>执行栈，每个goroutine自己的执行栈</li><li>寄存器</li></ul><h3 id="①-标记算法："><a href="#①-标记算法：" class="headerlink" title="① 标记算法："></a>① 标记算法：</h3><p>从根节点开始遍历所有的对象，但是需要STW。如下：<br><img src=https://img.ncfl.tech/202403192057014.jpg width=600px/></p><h3 id="②-三色标记法："><a href="#②-三色标记法：" class="headerlink" title="② 三色标记法："></a>② 三色标记法：</h3><ul><li><p>阶段一：把对象标记为黑白灰三色，从根节点开始遍历。<br>灰色对象为中间态，把灰色对象指向的对象全部变成黑色，当无灰色对象，表示已经扫描完毕，开始回收，黑色对象保留，白色对象删除。如下，但是这个阶段还是需要STW</p><img src=https://img.ncfl.tech/202403192103140.jpg width=600px/></li><li><p>阶段二：通过强弱三色不变式降低STW的时间</p><ul><li>强三色不变式：黑色对象不能指向白的对象，主要针对创建对象引用时</li><li>弱三色不变式：黑色对象指向白的对象时，需要有灰色对象一路指过来，主要针对删除对象引用时，且对象真正无用对象可能在下次回收才会被真正回收</li></ul></li></ul><p> 实现：通过<code>写屏障</code>和<code>删屏障</code>来做，即在创建对象引用和删除对象引用的时候，满足强弱三色不变式；且只对堆空间生效，对栈空间不生效，毕竟这种操作也会有性能损耗；栈空间在开始堆空间标记完成之后，进行STW走一遍三色标记法，然后进行垃圾回收。</p><ul><li><p>阶段三：混合写屏障来避免STW的时间</p><ul><li>涉及堆空间：强弱三色不变式</li><li>栈空间：引用到对象为全部黑色对象，而后创建的对象也为黑色对象</li></ul></li></ul><img src=https://img.ncfl.tech/202403192123370.jpg width=600px/>    <p><strong>注意:只有在垃圾回收开始之后，混合写屏障的性能损耗</strong></p><h2 id="栈相关"><a href="#栈相关" class="headerlink" title="栈相关"></a>栈相关</h2><p><strong>栈空间回收：由栈自己控制，不由垃圾回收，但是垃圾回收会扫描栈</strong></p><h3 id="栈空间的自动管理"><a href="#栈空间的自动管理" class="headerlink" title="栈空间的自动管理"></a>栈空间的自动管理</h3><p>Go 的栈是动态可扩展的，每个 Goroutine 会有自己的栈，初始栈大小非常小（一般为 2KB 左右），但可以根据需要自动增长。栈的增长是按需进行的，当函数调用深度增加或者需要更多的栈空间时，Go 运行时会自动分配更大的栈空间。</p><h3 id="栈的缩减"><a href="#栈的缩减" class="headerlink" title="栈的缩减"></a>栈的缩减</h3><p>栈的缩减通常发生在栈空间不再需要那么大时。Go 运行时会监控 Goroutine 的栈使用情况，如果发现某个 Goroutine 在一段时间内的栈使用量显著减少，且之前扩展的栈空间变得不再需要，Go 运行时可能会将这些空闲的栈空间缩减回来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈缩减并不是通过垃圾收集器（GC）来完成的，而是通过 Go 运行时自身的栈管理机制来完成。这种缩减通常在 Goroutine 的栈在高峰使用后回落到较小值时发生。</span><br></pre></td></tr></table></figure><h3 id="栈空间与-GC"><a href="#栈空间与-GC" class="headerlink" title="栈空间与 GC"></a>栈空间与 GC</h3><p>虽然栈空间本身不需要 GC 来管理，但栈上的变量可以引用堆上的对象。当栈上的变量生命周期结束时，这些引用可能会失效，GC 会识别到这些引用不再有效，并在下一次 GC 周期中回收这些堆上的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GC 过程会扫描所有 Goroutine 的栈，以找到对堆中对象的活跃引用。这是为了确保只有那些不再被引用的对象才会被回收。</span><br></pre></td></tr></table></figure><h1 id="2、内存分配"><a href="#2、内存分配" class="headerlink" title="2、内存分配"></a>2、内存分配</h1><p>学习文章：<br><a href="https://hardcore.feishu.cn/docs/doccnnKvHn4iFPXgk8ZpYmLArte">https://hardcore.feishu.cn/docs/doccnnKvHn4iFPXgk8ZpYmLArte</a><br><a href="https://segmentfault.com/a/1190000020338427">https://segmentfault.com/a/1190000020338427</a></p><p>内存分布相关的分布如下：<br><img src=https://img.ncfl.tech/202403212136461.webp width=600px/></p><p>主要涉及一下几个概念：<code>mspan</code>、<code>mspanclass</code>、<code>mcache</code>、<code>mcentral</code>、<code>mheap</code></p><h2 id="mspan："><a href="#mspan：" class="headerlink" title="mspan："></a>mspan：</h2><p><code>8kb</code>的golang页大小，为golang内存分配的最小单位</p><h2 id="mspanclass："><a href="#mspanclass：" class="headerlink" title="mspanclass："></a>mspanclass：</h2><p>一个以上的<code>mspan</code>组成数组，golang内存中有8kb~32kb的<code>mspanclass</code>，一共有67种，分别如下，为构成：</p><img src=https://img.ncfl.tech/202403212147693.jpg width=600px/><h2 id="mcache："><a href="#mcache：" class="headerlink" title="mcache："></a>mcache：</h2><p>GMP种每个P拥有一个mcache，根据需要向<code>mcentral</code>申请空间，申请的时候，需要加锁。之后的分配则无需加锁。包含两个<code>mspan</code>，分别用于存放指针对象和非指针对象，便于垃圾回收（GC不回收非指针对象）。</p><ul><li><p>比如当前有个17字节的对象需要，则需要去向<code>mcentral</code>申请空间&gt;17的<code>mspan</code>链表，即class&#x3D;3，申请之后，从<code>mcache</code>分配，如果是指针，则放到指针队列，如果非指针，则放到非指针队列</p></li><li><p>微对象分配器：如果小于16字节且非指针，则为了提升空间利用率，用到这个分配器，就是8kb的空间，不间隔往里面放数据，比如同一个8位，前4位放入一个数，后4位放入一个数。正常的空间，8位如果没有放满，余下的空间就扔了，因为OS的读取都是8位的，余下的空间便于内存的读取</p></li><li><p>mcentral：<code>mcache</code>和<code>mheap</code>的中间商，<code>mcache</code>用完的空间还给<code>mcentral</code>，放在队列<code>scav</code>,<code>mcentral</code>空间不够了找<code>mheap</code>申请，放在队列<code>free</code>中。<code>mcache</code>申请的时候，优先从<code>free</code>申请，再从<code>scav</code>申请（因为这里面的空间可能被垃圾回收导致有余），再没有就向<code>mheap</code>申请</p></li></ul><h2 id="mheap："><a href="#mheap：" class="headerlink" title="mheap："></a>mheap：</h2><p>提供给<code>mcentral</code>申请空间，上游对应的是操作系统的内存空间。如果程序运行过程中，有大于32kb的对象，也直接从这里申请，叫做<code>arenas</code>空间</p><p>综上：快的原因①预先申请了空间，避免频繁的申请空间，毕竟IO操作比较费时。②有比较好的内存管理制度，降级分配。</p><h1 id="3、内存对齐"><a href="#3、内存对齐" class="headerlink" title="3、内存对齐"></a>3、内存对齐</h1><p>主要参考：<a href="https://juejin.cn/post/6844904067244769294">https://juejin.cn/post/6844904067244769294</a></p><p>核心看这段代码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">type T1 struct &#123;</span><br><span class="line">    a [2]int8</span><br><span class="line">    b int64</span><br><span class="line">    c int16</span><br><span class="line">&#125;</span><br><span class="line">type T2 struct &#123;</span><br><span class="line">    a [2]int8</span><br><span class="line">    c int16</span><br><span class="line">    b int64</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;arrange fields to reduce size:\n&quot;+</span><br><span class="line">    &quot;T1 align: %d, size: %d\n&quot;+</span><br><span class="line">    &quot;T2 align: %d, size: %d\n&quot;,</span><br><span class="line">    unsafe.Alignof(T1&#123;&#125;), unsafe.Sizeof(T1&#123;&#125;),</span><br><span class="line">    unsafe.Alignof(T2&#123;&#125;), unsafe.Sizeof(T2&#123;&#125;))</span><br><span class="line">/*</span><br><span class="line">output:</span><br><span class="line">arrange fields to reduce size:</span><br><span class="line">T1 align: 8, size: 24</span><br><span class="line">T2 align: 8, size: 16</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>好处：合理重排字段可以减少填充，使struct字段排列更紧密<br>必要性：非必要情况下，其实可以不用，啥程序的内存这么吃紧，内存再贵也不至于需要这么优化<br>原因：操作系统是按照8字节读取的，缺少的空间也利用不起来了，不然可能要连续读取两个空间才能获取数据且有风险</p><h1 id="4、内存模型GMP-调度器"><a href="#4、内存模型GMP-调度器" class="headerlink" title="4、内存模型GMP(调度器)"></a>4、内存模型GMP(调度器)</h1><p>参考大神文章：<a href="https://topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html">https://topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html</a></p><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><img src=https://img.ncfl.tech/202403142043472.jpg  width=500px/>每个进程占用约4G内存，线程占用约4M，资源消耗都较大，故设计出了协程。对CPU而言，还是在对进程内的线程进行运行，然后由线程对协程进行调度管理。可以视为`进程 > 线程 > 协程`，上一级对下一级进行管理。<h2 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h2><ul><li>协程轻量级的，一个协程只有几kb</li><li>协程调度器运行起来方便，且可伸缩</li></ul><h2 id="老的调度器："><a href="#老的调度器：" class="headerlink" title="老的调度器："></a>老的调度器：</h2><img src=https://img.ncfl.tech/202403142052802.jpg  width=500px/><p>启用多个线程去全局协程队列里面抢占协程来执行</p><ul><li>创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了激烈的锁竞争。</li><li>M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。</li><li>系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</li></ul><h2 id="新的调度器"><a href="#新的调度器" class="headerlink" title="新的调度器"></a>新的调度器</h2><img src=https://img.ncfl.tech/202403142057751.jpg width=500px/><ul><li>P的数量程序启动时定死，参数指定，默认是CPU核数，最大程度保障每个CPU都能被利用起来</li><li>M的数据&gt;&#x3D;P的数量，每个P都需要由一个M执行</li><li>如果M被阻塞了，则将当前M和G挂起，待阻塞结束，G重回队列，然后获取一个M与当前P关联</li><li>M从本队列中取协程运行，不用加锁，减少竞争</li><li>M运行时创建的G默认放到本队列中，充分利用局部性原理。如果满了往全局队列放</li><li>没有P关联的M不会立刻销毁，会等待几ms，避免线程的创建和销毁上的耗时</li><li>P为空时，则M从其他P中获取一般的G来运行，再没有则从全局队列中获取G运行</li><li>所有的写成都被运行完之后，M和P则会进入自选状态，不会被销毁，保证下一个协程能快速运行</li></ul><h1 id="5、hashMap原理"><a href="#5、hashMap原理" class="headerlink" title="5、hashMap原理"></a>5、hashMap原理</h1><p>参考下面两位大神:</p><p><a href="https://zhuanlan.zhihu.com/p/495998623">https://zhuanlan.zhihu.com/p/495998623</a></p><p><a href="https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access">https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access</a></p><p>HashMap基础结构如下：<br><img src=https://img.ncfl.tech/202403152122367.png width=600px/></p><ul><li>B决定了<code>bmap</code>的个数，进而map所能存储的数据大小</li><li>Key hash之后的后B为，决定了数据在哪个<code>bmap</code>中，头8位决定了在哪个</li><li>tophash保存键hash之后的头8位，先比较tophash是否相同，如果不同，则不用比较了，如果相同再去比较真正的Key是否相同，O(1)复杂度的原因</li><li>bmap中的数据保存结构为<code>k/k/k/k/v/v/v/v</code>，不是<code>k/v/k/v/k/v/k/v</code>,因为<code>k</code>一般比较小，这样可以更省空间</li><li>用链表的方式解决hash冲突，指向下一个<code>bmap</code>(java采用的是数组解决，数组大了用红黑树)</li><li>map是协程不安全的，可以通过自己加锁或者<code>sync.map</code>来保证安全性</li></ul><br/><ul><li>下列每次操作都不加锁，所以非线程协程安全</li><li>GET:hash之后取根据后B位判断<code>bmap</code>，在根据前8位去<code>bmap</code>重查找，当前<code>bmap</code>无则去<code>overflow</code>中查找，若均无，则返回空</li><li>PUT:同GET，在GET过程中，记录下第一个空位，如果GET返回不为空，则更新，如果为空，则在第一个空位插入数据，如果无空位，则创建一个<code>bmap</code>作为溢出</li></ul><h2 id="怎么解决hash冲突"><a href="#怎么解决hash冲突" class="headerlink" title="怎么解决hash冲突"></a>怎么解决hash冲突</h2><p>用链表的方式解决hash冲突，指向下一个<code>bmap</code>(java采用的是数组解决，数组大了用红黑树)</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><h3 id="等量扩容"><a href="#等量扩容" class="headerlink" title="等量扩容"></a>等量扩容</h3><p>随着不断的增删元素，会导致<code>bmap</code>的<code>overflow</code>很多，但是元素却不多，这个时候会把<code>overflow</code>的元素迁移到前面,删除多余的<code>overflow</code>，等价于紧缩map，桶的个数不会增加</p><p>时机：等量扩容也是把渐进式扩容，只不过新申请的空间和之前的空间是一样大小的<code>noverflow &gt;= uint16(1)&lt;&lt;B</code> 同一个<code>b</code>里面溢出的链表长度是都大于<code>2^B</code>，扩容时使用<code>sameSizeGrow</code>做标记位</p><h3 id="增量扩容"><a href="#增量扩容" class="headerlink" title="增量扩容"></a>增量扩容</h3><ul><li><p><code>负载因子</code>为6.5（固定值），<code>负载因子</code> &#x3D; 元素总个数 &#x2F; 桶的个数 ，即平均每个桶中元素个数 &#x2F; 8</p></li><li><p>渐进式扩容：增加元素的时候，判断<code>负载因子</code> ，当需要扩容时，创建新的<code>buckets</code>，但是不会去初始化内存，只是预留，<code>oldbuckets</code>指向当前数据，然后只把当前值迁移到新的<code>buckets</code>，后续每操作一个数据迁移一个数据</p><ul><li>加快响应速度，避免因为全局桶的迁移，导致Map性能降低</li><li>扩容过程中遇到如果发现还要扩容，则强制执行完当前的扩容，再进行下次扩容</li><li>B &lt; 15，扩容为double，B &gt;&#x3D; 15，扩容为2^15</li></ul></li></ul><hr><p><a href="https://golang.design/go-questions/map/extend/">https://golang.design/go-questions/map/extend/</a> 一定要看</p><ul><li>等量扩容也是把渐进式扩容，只不过新申请的空间和之前的空间是一样大小的<code>noverflow &gt;= uint16(1)&lt;&lt;B</code> 同一个<code>b</code>里面溢出的链表长度是都大于<code>2^B</code></li><li>扩容的时候是否会重新hash：等量扩容不重新hash，增量扩容需要重新hash，hash算法在<code>src/runtime/alg.go</code>中，如果CPU支持aes，则使用 aes hash，否则使用 memhash</li><li>map 只会扩容不会缩容，没有缩容的算法实现</li><li>迁移过程是以<code>b</code>为单位进行迁移，不是以元素为单位进行迁移</li><li>每个<code>b</code>都有自己的迭代器标识，<code>iterator</code>和<code>oldIterator</code>，读数据只会用其中之一，一旦<code>b</code>迁移完成，则会把<code>oldIterator</code>丢弃，后续也只会使用<code>iterator</code></li><li>迁移过程中，用<code>nevacuate</code>表示迁移进度，每次有一个<code>b</code>完成，则该字段+1</li><li>float 型可以作为 key，但是由于精度的问题，会导致一些诡异的问题，慎用之。<img src="https://img.ncfl.tech/202409020023615.jpg" width=500px></li></ul><h2 id="遍历为什么是无序的"><a href="#遍历为什么是无序的" class="headerlink" title="遍历为什么是无序的"></a>遍历为什么是无序的</h2><ul><li>遍历的时候，假设发生了扩容，则元素的桶位置发生变化，则可能无序</li><li>go遍历的时候，生成了随机数，用于决定从哪里开始循环迭代。更具体的话就是根据随机数，选择一个桶位置作为起始点进行遍历迭代，因此每次重新<code>for range map</code>，见到的结果都是不一样的，比如2.4 和 2.4000000000000000000000001是相等的</li></ul><h2 id="扩缩容是否需要hash"><a href="#扩缩容是否需要hash" class="headerlink" title="扩缩容是否需要hash"></a>扩缩容是否需要hash</h2><p>golang map 扩容需要重新hash<br>mongodb 扩缩容不需要重新hash<br>主要取决于hash算法，golang的hash算法与分片数量有关（其实是库容的时候生成了一个随机数）<br>且golang的map的量级肯定跟mongodb的量级不能比，mongodb全部重新hash，得消耗多少性能</p><h1 id="6、chan"><a href="#6、chan" class="headerlink" title="6、chan"></a>6、chan</h1><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>参考：<a href="https://i6448038.github.io/2019/04/11/go-channel/">https://i6448038.github.io/2019/04/11/go-channel/</a></p><img src=https://img.ncfl.tech/202403231506680.png width=600px/><ul><li>buf是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表</li><li>sendx和recvx用于记录buf这个循环链表中的发送或者接收的index</li><li>lock是个互斥锁。</li><li>recvq和sendq分别是接收(&lt;-channel)或者发送(channel &lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表</li></ul><p>塞数据过程，是加锁的</p><img src=https://img.ncfl.tech/202403231508429.gif width=400px/><p>出数据过程，是加锁的</p><img src=https://img.ncfl.tech/202403231510520.gif width=400px/><p>send的过程中，如果队列满了，则把当前的G（参考GMP）塞进<code>sendq</code>队列中，等待有其他协程从队列中取出数据的同时，从<code>sendq</code>队列中G并放入P的队列中等待被执行。如下两图</p><img src=https://img.ncfl.tech/202403231515197.gif width=400px/><img src=https://img.ncfl.tech/202403231517966.gif width=400px/><p>recv的过程中，如果队列为空，则吧当前的G（参考GMP）塞进<code>recvq</code>队列中，等待有其他协程往队列中塞数据的同时，直接从<code>recvq</code>队列取出，然后把值塞进G中，并放入P的队列中等待被执行。如下图，这样可以减少一次加锁的时候，与上面有点不同</p><img src=https://img.ncfl.tech/202403231523227.gif width=400px/><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><ul><li><p>定时任务：time的实现也是通过chan，可以看看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func AAA() &#123;</span><br><span class="line">// 方式一：每隔一秒执行</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case t := &lt;-time.After(time.Second):</span><br><span class="line">fmt.Println(&quot;方式1：&quot;, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">// 方式二：每隔一秒执行</span><br><span class="line">go func() &#123;</span><br><span class="line">ticker := time.NewTicker(time.Second * 2)</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case t := &lt;-ticker.C:</span><br><span class="line">fmt.Println(&quot;方式2：&quot;, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * 10)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>超时控制：也是基于timer的，context是个超牛逼的case</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func AAA() &#123;</span><br><span class="line">ch := make(chan string)</span><br><span class="line">timeout, cancel := context.WithTimeout(context.Background(), 2*time.Second)</span><br><span class="line">defer cancel()</span><br><span class="line">go func() &#123;</span><br><span class="line">time.Sleep(time.Second * 3)</span><br><span class="line">ch &lt;- &quot;done&quot;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">select &#123;</span><br><span class="line">case res := &lt;-ch:</span><br><span class="line">fmt.Println(res)</span><br><span class="line">case &lt;-timeout.Done():</span><br><span class="line">fmt.Println(&quot;timout&quot;, timeout.Err())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本地队列：强烈建议关闭channel由生产者关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">func AAA() &#123;</span><br><span class="line">c := make(chan int, 3)</span><br><span class="line">// 生产者</span><br><span class="line">go func() &#123;</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">close(c)</span><br><span class="line">&#125;()</span><br><span class="line">// 消费者1</span><br><span class="line">go func() &#123;</span><br><span class="line">for i := range c &#123;</span><br><span class="line">fmt.Println(&quot;select range&quot;, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">// 消费者2</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case i, ok := &lt;-c:</span><br><span class="line">if !ok &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;select consume&quot;, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制并发数：golang协程虽然占用的空间不高，也比较高效，但是也扛不住一秒起一百万协程，所以需要控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func AAA() &#123;</span><br><span class="line">var num = 10</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">wg.Add(10)</span><br><span class="line">c := make(chan int, 2)</span><br><span class="line">for i := 0; i &lt; num; i++ &#123;</span><br><span class="line">c &lt;- 1</span><br><span class="line">var ii = i</span><br><span class="line">go func() &#123;</span><br><span class="line">fmt.Println(ii, time.Now())</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&lt;-c</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="7、GO的堆栈图"><a href="#7、GO的堆栈图" class="headerlink" title="7、GO的堆栈图"></a>7、GO的堆栈图</h1><h1 id="8、GO1-18新特性-泛型"><a href="#8、GO1-18新特性-泛型" class="headerlink" title="8、GO1.18新特性-泛型"></a>8、GO1.18新特性-泛型</h1><p>泛型（<a href="https://www.cnblogs.com/kevinwan/p/16223984.html%EF%BC%89">https://www.cnblogs.com/kevinwan/p/16223984.html）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 方法</span><br><span class="line">func A[T Numeric, T2 Node[int]]() (T, T2) &#123;</span><br><span class="line">n := T2&#123;value: 1&#125;</span><br><span class="line">return 1, n</span><br><span class="line">&#125;</span><br><span class="line">// 定义类型</span><br><span class="line">type Numeric interface &#123;</span><br><span class="line">int | float32 | float64 | int32</span><br><span class="line">&#125;</span><br><span class="line">// 定义类型</span><br><span class="line">type Node[T any] struct &#123;</span><br><span class="line">value T</span><br><span class="line">&#125;</span><br><span class="line">// 定义类型</span><br><span class="line">type NodeCompare[T Numeric] struct &#123;</span><br><span class="line">value T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li>避免switch\case这种恶心的代码，或者reflect反射逻辑</li><li>避免多个不同的方法因为参数不同重复写，比如比较大小</li><li>对于不同类似的数据结构实现对应的方法，比如slicce，map，channel、tree、list、stack等结构</li></ul><p>性能影响：</p><ul><li>虚拟方法表：运行时，根据T的类型，将类型赋予函数，再去执行。编译快运行慢</li><li>单态化：根据T的类型，编译时增加每个方法的副本，运行时直接调用即可。编译慢运行快</li><li>GO：两种方法结合，如果可以推断出T的类型，比如上文中的Numeric，则采用单态化，否则使用虚拟方法表。虚拟方法表之前在GO中就被使用了。</li><li>总结：性能影响不大，且不会成为瓶颈。考虑先优化函数实现，再考虑调用开销。</li></ul><p>JAVA &amp; GO泛型原理比较：<a href="https://jeffdingzone.com/2022/06/">https://jeffdingzone.com/2022/06/</a></p><h1 id="9、Go版本新特性"><a href="#9、Go版本新特性" class="headerlink" title="9、Go版本新特性"></a>9、Go版本新特性</h1><ul><li>V1.18 引入泛型 []T</li><li>v1.20 <code>rand.Seed()</code>不用调用了，直接调用<code>rand.Int(100)</code>即可</li><li>v1.21 基于泛型，引入类似<code>min</code> \ <code>max</code> 等方法，类似<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Ordered <span class="keyword">interface</span> &#123;</span><br><span class="line">~<span class="type">int</span> | ~<span class="type">int8</span> | ~<span class="type">int16</span> | ~<span class="type">int32</span> | ~<span class="type">int64</span> |</span><br><span class="line">~<span class="type">uint</span> | ~<span class="type">uint8</span> | ~<span class="type">uint16</span> | ~<span class="type">uint32</span> | ~<span class="type">uint64</span> | ~<span class="type">uintptr</span> |</span><br><span class="line">~<span class="type">float32</span> | ~<span class="type">float64</span> |</span><br><span class="line">~<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>v1.22 for循环，每次的值为拷贝的值，无需再拷贝给临时变量或者通过传参的方式来做<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 输出 0,1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="10、优雅关闭chan"><a href="#10、优雅关闭chan" class="headerlink" title="10、优雅关闭chan"></a>10、优雅关闭chan</h1><p>参考：<a href="https://go101.org/article/channel-closing.html">https://go101.org/article/channel-closing.html</a></p><ul><li>可能造成问题<ul><li>重复关闭，导致panic</li><li>错误关闭，导致producer还在往chan里面写数据，导致panic</li></ul></li><li>consumer关闭是优雅的关闭，同时为了保证producer，最好在发送的时候,defer recover做一下兜底</li><li>可以采用<code>sync.Once</code>或<code>sync.Mutex</code>避免关闭的时候重复或者冲突，（个人认为atomic也行）</li><li>分为一下四个场景<ul><li>单producer，单consumer：producer生产完成之后直接关闭即可</li><li>单producer，多consumer：producer生产完成之后直接关闭即可</li><li>多producer，单consumer：consumer消费完数据之后，close(stopchan)，producer监听stopchan，如果stopchan被关闭了，则退出当前producer</li><li>多producer，多consumer：consumer消费完数据之后，close(stopchan)，producer监听stopchan，如果stopchan被关闭了，则退出当前producer</li></ul></li><li>判断chan是否被关闭<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsClosed</span><span class="params">(ch &lt;-<span class="keyword">chan</span> T)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 核心区别在这，如果没有default，会一直在上面等待，有了default就不会等待了</span></span><br><span class="line">    <span class="comment">// 一旦close或者chan里面有只，就会直接走上面的逻辑</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="11、rpcx-VS-grpc"><a href="#11、rpcx-VS-grpc" class="headerlink" title="11、rpcx VS grpc"></a>11、rpcx VS grpc</h1><ul><li><p>1、 设计和背景</p><ul><li>gRPC 是由 Google 开发的一个高性能、开源和通用的 RPC 框架。它支持多种编程语言，包括 C、Java、Go</li><li>rpcx 是 Go 语言生态圈的 RPC 框架。它利用 Go 语言的并发特性和简洁语法，实现高效的分布式 RPC 服务。</li></ul></li><li><p>2、 语言支持</p><ul><li>gRPC 支持跨语言调用，目前支持的语言类型包括 C++、Java、Go、Python、Ruby、Node.js、Android、C#、PHP 和 Objective-C。</li><li>rpcx 主要使用 Go 语言开发，但也支持通过 HTTP 调用，使得其他编程语言也可以调用 rpcx 服务。</li></ul></li><li><p>3、 性能</p><ul><li>gRPC 采用 ProtoBuf 序列化协议，性能优于其他协议，req\rsp包的大小相较于其他的小很多，而且包的encoding\decoding性能都相对较高</li><li>rpcx 在性能测试中表现优异，尤其是在高并发场景下，吞吐率和响应时间都优于许多其他框架。</li></ul></li><li><p>4、 服务治理</p><ul><li>gRPC 目前不直接支持分布式服务治理，需要额外的开发来实现，不直接支持多种注册中心和管理中心。</li><li>rpcx 一样，支持服务治理，包括服务发现、负载均衡和容错机制、支持多种注册中心和管理中心。</li></ul></li><li><p>5、 序列化协议</p><ul><li>gRPC 只支持 ProtoBuf 序列化协议。</li><li>rpcx 支持多种序列化框架，包括 Hessian2、Json 等，并且可以扩展。</li></ul></li></ul><h1 id="12、尾递归"><a href="#12、尾递归" class="headerlink" title="12、尾递归"></a>12、尾递归</h1><p>普通递归，会导致栈空间增加，进而导致栈空间溢出，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>尾递归，直接不再依赖上游，直接return即可，类似下面，不再相互依赖栈空间，<code>factorial(n, total)</code>就是<code>factorial(n - 1, n * total)</code>，直接替换即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function factorial(n, total) &#123;</span><br><span class="line">  if (n === 1) return total;</span><br><span class="line">  return factorial(n - 1, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(5, 1) // 120</span><br></pre></td></tr></table></figure><p>尾递归好处：</p><ul><li>性能上会有提升，取消了栈空间依赖进而提升性能</li><li>不会出现占空间溢出</li></ul><p>Golang为啥不用尾递归优化：</p><ul><li>Golang追求设计简洁，尾递归相对比较复杂，在一定程度上可能导致增加编译成本，降低编译器的可维护性</li><li>性能考虑，在很多场景中，非尾递归的性能差异影响不大，尤其是递归量不大时，几乎无差别</li><li>垃圾回收，尾递归会增加垃圾回收机制的成本和性能，对于panic defer等函数的调用等也有影响</li><li>可以采用等价的函数来进行实现尾递归，比如for循环或者显式栈来避免使用调用栈</li></ul><h1 id="13、Golang逃逸分析"><a href="#13、Golang逃逸分析" class="headerlink" title="13、Golang逃逸分析"></a>13、Golang逃逸分析</h1><h2 id="逃逸分析是啥"><a href="#逃逸分析是啥" class="headerlink" title="逃逸分析是啥"></a>逃逸分析是啥</h2><ul><li>栈上分配：当变量的生命周期短且只在当前函数内使用时，编译器会将其分配在栈上。栈上的内存分配和释放非常快，因为它遵循后进先出的原则。</li><li>堆上分配：当变量需要在函数返回后仍然存在（即超出函数作用域后仍然被引用），编译器会将其分配在堆上。堆上的内存由垃圾收集器（GC）负责回收，分配和回收的成本比栈高。</li></ul><h2 id="逃逸分析的过程"><a href="#逃逸分析的过程" class="headerlink" title="逃逸分析的过程"></a>逃逸分析的过程</h2><ul><li>引用传递：如果一个变量的引用被传递给其他函数，且这些函数在当前函数返回后仍然可能使用这个变量，那么这个变量会逃逸到堆。例如，返回指向局部变量的指针或在 Goroutine 中使用局部变量。</li><li>闭包捕获：如果一个局部变量被闭包捕获，而这个闭包可能在当前函数返回后执行，那么这个变量会逃逸到堆。</li><li>结构体的字段引用：如果局部变量是一个结构体，并且结构体的字段被传递到其他函数或存储在堆中，那么这个变量会逃逸到堆。</li></ul><h2 id="逃逸分析的好处"><a href="#逃逸分析的好处" class="headerlink" title="逃逸分析的好处"></a>逃逸分析的好处</h2><ul><li>内存管理优化：通过逃逸分析，编译器可以尽可能多地将变量分配在栈上，减少堆分配的次数，从而减轻垃圾收集器的负担，提高程序的性能。</li><li>减少内存占用：栈上的内存分配是临时的，函数返回后会立即释放，这使得程序的内存占用更少。</li></ul><h1 id="14、协程为啥比线程快"><a href="#14、协程为啥比线程快" class="headerlink" title="14、协程为啥比线程快"></a>14、协程为啥比线程快</h1><p><a href="https://python.itheima.com/news/20240517/103604.html">https://python.itheima.com/news/20240517/103604.html</a></p><ul><li>低资源消耗: 协程空间一般只有几k，线程空间一般是几M</li><li>轻量级调度: 协程在用户空间调度，线程在用户空间和内核空间的上下文切换（IO多路复用？）（有点像是零拷贝和IO多路复用，可以减少2次IO）</li><li>无锁并发:  协程是运行在线程上的，共享同一个线程的地址空间，按照GMP模型，协程切换不用加锁的，但是线程切换，如果涉及到公共数据的访问，则需要加锁</li><li>缓存的局部性: 协程是运行在线程上的，相关的数据缓存在线程中即可找到，但是线程是运行在进程上的，相关的缓存数据需要去进程中可能才能找到</li></ul><p>线程切换相关：</p><p>线程切换是操作系统在多线程环境中进行任务调度的一种机制。以下是一些与线程切换相关的知识点：</p><ol><li><p>上下文切换: 线程切换可能由多种因素触发，如当前线程执行完毕、发生中断、超时、高优先级线程变为可运行状态等，当操作系统从执行一个线程切换到另一个线程时，需要保存当前线程的状态（如寄存器、程序计数器等），并通过调度器加载新线程，通过一些内存映射或者加载的方式，获取新县线程上次运行停止的栈空间位置和数据，进而恢复新线程的运行。必须由操作系统内核空间操作，相对协程耗时</p></li><li><p>线程状态: 线程通常有几种状态，如就绪（Ready）、运行（Running）、阻塞（Blocked）和终止（Terminated）。</p><img src="https://img.ncfl.tech/202408281258550.jpeg" width=800px /></li><li><p>调度器 &amp; 调度策略: 操作系统中的调度器负责决定哪个线程获得CPU时间，以及线程切换的时机,调度策略可以是先来先服务（FCFS）、轮转（Round-Robin）、优先级调度等</p></li><li><p>锁和同步: 在多线程程序中，使用锁（互斥锁、读写锁等）和其他同步机制(原子操作)来避免数据竞争和确保线程安全，需要避免死锁问题</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis面试准备</title>
      <link href="/post/30374/"/>
      <url>/post/30374/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构有哪些"><a href="#数据结构有哪些" class="headerlink" title="数据结构有哪些"></a>数据结构有哪些</h1><p>大神笔记：<a href="https://www.cnblogs.com/xiaolincoding/p/15628854.html">https://www.cnblogs.com/xiaolincoding/p/15628854.html</a></p><p>映射关系如下：</p><pre><code>string -  SDSlist   -  双向链表、压缩链表、listpack(未发布)hash   -  压缩链表、哈希表、listpack(未发布)set    -  哈希表zset   -  压缩链表、跳表</code></pre><img src=https://img.ncfl.tech/202403132018163.jpg width=400 /><h2 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h2><ul><li>数据结构：字符串char[]、预申请空间长度、当前字符长度</li><li>可以保存更复杂的数据结构，比如流，图片等编码文件</li><li>避免内存重复申请，小于1M扩容时候double，大于1M扩容时1M</li><li>O(1)获取字符串长度，C语言获取长度复杂度O(n)</li></ul><h2 id="双向链表（linkedlist）"><a href="#双向链表（linkedlist）" class="headerlink" title="双向链表（linkedlist）"></a>双向链表（linkedlist）</h2><ul><li>redis中的链表为双向链表，访问前后节点复杂度O(1)</li><li>双向链表两个指针，占用空间大</li><li>双向链表，元素分配散，对内存局部性和CPU缓存不友好</li></ul><h2 id="压缩链表（ziplist）"><a href="#压缩链表（ziplist）" class="headerlink" title="压缩链表（ziplist）"></a>压缩链表（ziplist）</h2><ul><li>类似数组结构，每个元素需要多大空间就分配多少空间，紧密排列在一起</li><li>数据查询复杂度O(n)</li><li>元素空间压缩，对内存局部性和CPU缓存及其友好</li><li>不能保存过多元素，对查询速率有影响</li><li>不能频繁增删元素，否则可能触发连续的内存变更操作，尤其是元素空间较大时</li><li>大元素 &amp; 长元素不适合用该结构</li></ul><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul><li>链式解决hash冲突</li><li>渐进式refresh，query&amp;update&amp;delete在新旧hash表操作，add在新hash表操作</li><li>refresh时机：<ul><li>负载因子 &gt; 1 &amp;&amp; 没有RDB、AOF 触发</li><li>负载因子 &gt; 5 直接触发</li></ul></li></ul><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><img src=https://img.ncfl.tech/202403132105594.png width=600/><ul><li>空间换时间的存储方式</li><li>内部元素值需要有序</li><li>用随机数的办法控制层数，保证每层数量差不多</li></ul><h2 id="quickList（暂时不考）"><a href="#quickList（暂时不考）" class="headerlink" title="quickList（暂时不考）"></a>quickList（暂时不考）</h2><ul><li>也是双向链表，只不过之前的双向链表节点就是节点，这里面的节点是压缩链表</li><li>治标不治本吧</li></ul><h2 id="命令对应的复杂度"><a href="#命令对应的复杂度" class="headerlink" title="命令对应的复杂度"></a>命令对应的复杂度</h2><p><a href="https://blog.caoxl.com/2018/11/28/Redis-Time-Complexity/">https://blog.caoxl.com/2018/11/28/Redis-Time-Complexity/</a></p><h1 id="mysql-redis数据一致性"><a href="#mysql-redis数据一致性" class="headerlink" title="mysql redis数据一致性"></a>mysql redis数据一致性</h1><p>这类文章太多了，主要推荐：</p><p><a href="http://kaito-kidd.com/2021/09/08/how-to-keep-cache-and-consistency-of-db/">http://kaito-kidd.com/2021/09/08/how-to-keep-cache-and-consistency-of-db/</a></p><p><a href="https://javabetter.cn/mysql/redis-shuju-yizhixing.html">https://javabetter.cn/mysql/redis-shuju-yizhixing.html</a></p><h2 id="核心："><a href="#核心：" class="headerlink" title="核心："></a>核心：</h2><p>引入缓存，提升系统的性能<br>保证高可用的情况下，让数据尽可能快速一致性。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li><p>不好的方案，而且都是显而易见的不好，而且数据过期之前可能一直是脏数据：</p><ul><li>先写mysql，再写redis</li><li>先写redis，再写mysql</li><li>先删除redis，再写mysql</li></ul></li><li><p>好的方案：先更新mysql，在删除缓存；</p><ul><li>这种情况下还是有可能导致数据异常的，当<em><strong>redis从DB捞出来数据之后，要往redis写</strong></em>的耗时，比<em><strong>mysql写进磁盘，然后删除redis存储</strong></em>的耗时还要高的时候，但是这种情况发生的概率就非常低了，因为写内存大概率比写磁盘快。</li><li>万一删除缓存失败了，可以采用如下两种方案：<ul><li>引用kafka将删除任务异步化，进而达到最终一致性</li><li>订阅mysql的binlog，进而达到数据最终一致性</li></ul></li><li>需要更加引用第三方的组件，增加的维护成本和系统的不确定性，但是①这样可以快速达到数据的一致性，且同时两个组件发生问题的概率不大，且都自带重试机制②引入缓存是为了加快系统的响应，且mysql底层由于隔离机制的问题，也可能导致数据的不一致性，如果要既要追求性能，也要保证实时一致，几乎是不可能的。③一致性可以通过数据库的<code>Serializable</code>，或者redis加锁，或者<code>raft</code> <code>Paxos</code>等实现，但是性能都不佳</li></ul></li></ul><h2 id="强一致性算法"><a href="#强一致性算法" class="headerlink" title="强一致性算法"></a>强一致性算法</h2><h3 id="拜占庭问题"><a href="#拜占庭问题" class="headerlink" title="拜占庭问题"></a>拜占庭问题</h3><p><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg&t=1066s">https://www.youtube.com/watch?v=e9KVmyI1eCg&amp;t=1066s</a></p><p>多个人去攻打一座城，超过半数的人去打才能打赢，几个人一起讨论下要不要攻打。<br><img src=https://img.ncfl.tech/202403282352574.jpg width=700px/></p><h3 id="ZAB-raft-Paxos视频"><a href="#ZAB-raft-Paxos视频" class="headerlink" title="ZAB raft Paxos视频"></a>ZAB raft Paxos视频</h3><p><a href="https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from=333.337.search-card.all.click&vd_source=5049cdb7864cfa3b2891e8ab98480c55">https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=5049cdb7864cfa3b2891e8ab98480c55</a></p><ul><li><p>Paxos，核心难点，实现起来太复杂了</p><ul><li>basic paxos，实现复杂，效率低(2次RPC)，存在提案竞争问题，即活锁问题<img src=https://img.ncfl.tech/202403282355173.jpg width=700px/></li><li>multi paxos，选出提案者（leader），避免活锁<img src=https://img.ncfl.tech/202403290002914.jpg width=700px/>    </li><li>multi paxos，leader也可以投票，其他与上差别不大<img src=https://img.ncfl.tech/202403290005997.jpg width=700px/></li></ul></li><li><p>Raft：</p><ul><li>图解1：<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li><li>图解2：<a href="https://raft.github.io/">https://raft.github.io/</a></li><li>应用：<code>k8s</code> <code>etcd</code> <code>RocketMQ</code> <code>Tidb</code></li></ul></li><li><p>ZAB：和raft差不多</p><ul><li>名字解释上不同，raft的周期叫做<code>term</code>,zab的周期叫做<code>epoth</code></li><li>心跳方向相反，raft是leader向follower，zab是follower向leader</li><li>应用：zookeeper</li></ul></li></ul><h1 id="RDB-amp-AOF区别"><a href="#RDB-amp-AOF区别" class="headerlink" title="RDB &amp; AOF区别"></a>RDB &amp; AOF区别</h1><p>主要参考：<a href="https://zhuanlan.zhihu.com/p/340082703">https://zhuanlan.zhihu.com/p/340082703</a></p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>定义：基于配置，每间隔一段时间或者一些操作之后，把当前redis的快照压缩后写入磁盘</p><p>相关配置类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。</span><br><span class="line">save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。</span><br><span class="line">save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。</span><br></pre></td></tr></table></figure><p>如果rdb过程中发生了写操作怎么办（COW(copy on write–和关注重构联系一下)）：</p><ul><li>数据在执行rdb的时候，是生成快照的，如果是读请求，则正常读即可，如果是写请求，则写请求会将当前数据拷贝到一块新的内存来做操作。故执行rdb的时候，保存的就是那一瞬间的快照数据</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>备份文件简单，只有一个文件，且文件较精简</li><li>数据迁移和数据恢复比较快，直接拷贝这个文件。因为是数据快照，直接放到内存即可</li><li>对性能影响较小，只有在特定时间才执行一次，其他时间无影响</li></ul><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>可能存在数据丢失，毕竟rdb的频次不是很高，数据丢失的时间期间可能比较长</li><li>数据量较大时，rdb做数据备份会占用较长的时间，那一瞬间，对请求的读写也会有影响</li></ul><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>定义：记录redis的所有写操作，保存在持久化文件中</p><p>相关配置如下：（因为不是直接写入文件，是写入到linux的缓存区，下列配置为从缓存区刷新到文件的时间间隔）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always #每次有数据修改发生时都会写入AOF文件。数据最安全，性能影响最大，性能取决于磁盘</span><br><span class="line">appendfsync everysec #每秒钟同步一次，该策略为AOF的缺省策略。可能是缺少1s的数据</span><br><span class="line">appendfsync no #从不同步，由操作系统决定何时刷新到文件。性能影响最小，数据安全性最差，会丢好几秒数据</span><br></pre></td></tr></table></figure><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul><li>基于上面不同的策略，可以选择实时性很高的持久化方式，基本上可以保证数据的完整性</li><li>可以基于aof文件分析数据的操作过程等，可用于逻辑复现等</li></ul><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ul><li>备份文件较大，大于rdb</li><li>备份文件恢复较慢，慢于rdb</li><li>在redis写操作的时候，需要插入aof的执行，故对性能有一定影响</li></ul><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p>即是AOF + RDB一起做持久化，高版本默认开启</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>基于类似下面的配置情况，会有一个叫做<code>AOF重写</code>的过程，在执行改操作的时候，就是混合持久化，当前的数据会做一次RDB快照，然后再把最新的数据用AOF记录起来。最后生成文件格式大致为<code>[RDB file][AOF tail]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 当前AOF文件比上次重写后的AOF文件大小的增长比例超过100 </span><br><span class="line">auto-aof-rewrite-percentage 100  </span><br><span class="line">// 当前AOF文件的文件大小大于64MB </span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><h3 id="优劣势，就是双方的整合"><a href="#优劣势，就是双方的整合" class="headerlink" title="优劣势，就是双方的整合"></a>优劣势，就是双方的整合</h3><ul><li>文件比RDB大，比aof小</li><li>rdb部分确定和rdb一样，可读性差。AOF部分文件可读性好，利用率不好，但是其实这部分数据量应该不大</li><li>数据恢复的时候，因为前半部分采用了RDB，恢复得快。</li></ul><h1 id="缓存雪崩、击穿、穿透"><a href="#缓存雪崩、击穿、穿透" class="headerlink" title="缓存雪崩、击穿、穿透"></a>缓存雪崩、击穿、穿透</h1><p>主要是基于<a href="https://www.xiaolincoding.com/redis/cluster/cache_problem.html">https://www.xiaolincoding.com/redis/cluster/cache_problem.html</a></p><img src=https://img.ncfl.tech/202404022113933.webp width=600px/><img src=https://img.ncfl.tech/202404022117083.webp width=600px/><p>tips: 布隆过滤器存在误判的情况，所以和限流器等一样，也只是起到一个削峰的作用，无法完全避免无用请求直接打到下游</p><h1 id="redis单线程多线程"><a href="#redis单线程多线程" class="headerlink" title="redis单线程多线程"></a>redis单线程多线程</h1><p>老版本都是单线程，新版本默认是多线程。（这里指的是命令的执行，RDB，aof等操作自然是由额外的线程处理的）</p><h2 id="引入多线程的原因"><a href="#引入多线程的原因" class="headerlink" title="引入多线程的原因"></a>引入多线程的原因</h2><ul><li>内存和CPU都是本地操作，耗时一般很低。但是客户端和服务端的网络的IO可能成为系统的瓶颈（IO多路复用）</li><li>如果执行的命令是耗时操作，则可能导致redis相应变慢</li></ul><h2 id="多线程应用"><a href="#多线程应用" class="headerlink" title="多线程应用"></a>多线程应用</h2><ul><li>建立客户端与服务端链接的时候，每个线程处理一个链接，然后把建立成功的链接放在一个队列中，主线程（真正去执行命令的线程）从队列中取出数据执行。</li><li>在执行耗时命令的时候，有对应的多线程命令用以处理。（执行过程中会加锁，避免其他的值过来修改）（del – unlink）(flushdb – flushdb async)(flushall – flushall async)</li></ul><h2 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h2><p>核心参考：<br><a href="https://www.jianshu.com/p/1b4b3c738d8c">https://www.jianshu.com/p/1b4b3c738d8c</a><br><a href="https://juejin.cn/post/6882984260672847879#heading-10">https://juejin.cn/post/6882984260672847879#heading-10</a></p><p>数据从内核态拷贝到用户态，需要经历两个流程</p><ul><li>询问内核态数据是否准备好了</li><li>将数据从内核态拷贝到用户态</li></ul><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><img src=https://img.ncfl.tech/202404031936740.webp width=600px/>仅处理单个IO，数据从内核态拷贝到用户态持续阻塞，直到内核空间准备好了为止<h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><img src=https://img.ncfl.tech/202404031940499.webp width=600px/>仅处理单个IO，不断询问内核空间是否准备好，未准备好则返回错误，继续询问，直到内核空间准备好，才将数据从内核态拷贝到用户态<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><img src=https://img.ncfl.tech/202404031942683.webp width=600px/>处理多个IO，向内核空间发起询问的时候，此时是阻塞住，内核空间会把当前select负责的所有都查看一遍，返回已经ready的IO。也是不断轮询。与NIO有点像，不过NIO仅负责一个，select负责一批<h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>与select基本相同，除了部分实现和结构不同，其他基本一致。见下表</p><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>没有找到图。。。</p><p>基于事件回调的处理方式，也是分成两个部分，应用程序调用内核的后，便不用管了，待内核空间准备好了，将事件扔进队列里面，应用程序仅需从队列中取数据即可。避免了不断询问的过程</p><h3 id="形象图解"><a href="#形象图解" class="headerlink" title="形象图解"></a>形象图解</h3><p><a href="https://php-note.com/1636.html">https://php-note.com/1636.html</a></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table><thead><tr><th></th><th><strong>select</strong></th><th><strong>poll</strong></th><th><strong>epoll</strong></th></tr></thead><tbody><tr><td><strong>操作方式</strong></td><td>遍历</td><td>遍历</td><td>回调</td></tr><tr><td><strong>数据结构</strong></td><td>bitmap</td><td>数组</td><td>红黑树</td></tr><tr><td><strong>最大连接数</strong></td><td>1024（x86）或 2048（x64）</td><td>无上限</td><td>无上限</td></tr><tr><td><strong>最大支持文件描述符数</strong></td><td>一般有最大值限制</td><td>65535</td><td>65535</td></tr><tr><td><strong>fd拷贝</strong></td><td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td><td>每次调用poll，都需要把fd集合从用户态拷贝到内核态</td><td>fd首次调用epoll_ctl拷贝，每次调用epoll_wait不拷贝</td></tr><tr><td><strong>工作效率</strong></td><td>每次调用都进行线性遍历，时间复杂度为O(n)</td><td>每次调用都进行线性遍历，时间复杂度为O(n)</td><td>事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到readyList里面，时间复杂度O(1)</td></tr></tbody></table><h1 id="redis快的原因"><a href="#redis快的原因" class="headerlink" title="redis快的原因"></a>redis快的原因</h1><ul><li>存内存操作，速度快</li><li>优质且定制化的数据结构优化</li><li>主线程单线程执行，避免上下文切换，多线程竞争</li><li>多路复用技术（BIO，NIO，select，poll，epoll），采用多线程较少客户端和服务端建立链接的时间gap，针对耗时操作，多线程处理</li></ul><h1 id="看门狗机制"><a href="#看门狗机制" class="headerlink" title="看门狗机制"></a>看门狗机制</h1><p>执行一个任务的时候，可能会基于redis做一个加锁的操作，但是可能该任务还没有执行完，锁便到期了，这时候如果有其他线程处理可能就会有问题。</p><p>看门狗即是在这个锁还在的时候续期这个锁，等待主线程主动释放该锁</p><h1 id="redis内存淘汰策略"><a href="#redis内存淘汰策略" class="headerlink" title="redis内存淘汰策略"></a>redis内存淘汰策略</h1><p>内存满了的时候，根据配置执行不同的策略</p><p>（所有的key，有过期的key并不是维护全量的key，那样成本太高了，而是基于配置的数量N，仅维护N长度的可能会被淘汰的key）</p><ul><li>Noeviction：默认策略，永不淘汰。除del等删除指令的写请求，直接return err</li><li>Allkeys_LRU：所有key，做最近最少使用（Least Recently Used）淘汰，基于使用顺序淘汰</li><li>Volatile_LRU：有过期时间的key，做最近最少使用（Least Recently Used）淘汰，基于使用顺序淘汰</li><li>Allkeys_LFU：所有key，做最近最不经常使用（Least Frequency Used）淘汰，基于使用次数淘汰</li><li>Volatile_LFU：有过期时间的key，做最近最不经常使用（Least Frequency Used）淘汰，基于使用次数淘汰</li><li>Allkeys_Random：所有key，随机淘汰</li><li>Volatile_Random：有过期时间的key，随机淘汰</li><li>Volatile_TTL：有过期时间的key，选择剩余时间最少得淘汰</li></ul><h1 id="过期的key怎么删除"><a href="#过期的key怎么删除" class="headerlink" title="过期的key怎么删除"></a>过期的key怎么删除</h1><p><em><strong>目前redis默认采用的是惰性删除和定期删除的两种策略结合</strong></em></p><ul><li>定时删除<ul><li>在写入有过期时间key的时候，创建一个定时任务用来删除key</li><li>优点：内存友好，过期即可立刻删除</li><li>缺点：CPU不友好，需要时刻监听删除任务事件</li></ul></li><li>惰性删除<ul><li>访问到数据的时候，如果发现该key已经过期了，则删除</li><li>优点：CPU友好，只有在访问的时候才进行操作</li><li>缺点：内存不友好，可能该key长时间不访问，则无法删除该key</li></ul></li><li>定期删除<ul><li>通过配置，每个1秒钟执行N次，随机捞取M个key，判断key是否过期，过期则删除</li><li>优点：相对于定时删除，CPU友好，几乎不会额外占用高CPU资源，取决于配置。相对于惰性删除，可以删除长时间不访问的key</li><li>缺点：需要手动调优，频率太高，则类似定时删除，频率太低，则类似惰性删除</li></ul></li></ul><h1 id="一致性hash算法-amp-amp-hash槽"><a href="#一致性hash算法-amp-amp-hash槽" class="headerlink" title="一致性hash算法 &amp;&amp; hash槽"></a>一致性hash算法 &amp;&amp; hash槽</h1><h2 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h2><p>参考：<a href="https://blog.csdn.net/weixin_43001336/article/details/122834046">https://blog.csdn.net/weixin_43001336/article/details/122834046</a></p><p>分布式缓存中，如果使用普通的hash算法，（hashcode%节点数）来确定缓存数据在落在哪个节点，当节点数变化之后，整个缓存命中率就会快速下降，进而可能导致雪崩的问题</p><p>一致性hash指的是在hash之后，根据对应的值，找到下一个缓存节点<br><img src="https://img.ncfl.tech//202404101846933.jpeg" width=500px/></p><p>如果在集群中，增加删除节点，只会影响一部分数据，不会导致整个缓存雪崩<br><img src="https://img.ncfl.tech//202404101848500.jpeg" width=500px/></p><img src="https://img.ncfl.tech//202404101849783.jpeg" width=500px/><p>节点所在的位置，也是由节点的hashcode决定的，故无法保障节点是均匀部署在环上的，可能会导致部分节点缓存数据多，部分节点缓存数据少，故采用了虚拟节点的方式，同一个节点虚拟的存在在环上的不同位置<br><img src="https://img.ncfl.tech//202404101851184.jpeg" width=500px/></p><h2 id="redis-hash槽"><a href="#redis-hash槽" class="headerlink" title="redis hash槽"></a>redis hash槽</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/470368641">https://zhuanlan.zhihu.com/p/470368641</a></p><img src="https://img.ncfl.tech//202404101859416.png" width=600px/><h3 id="节点路由："><a href="#节点路由：" class="headerlink" title="节点路由："></a>节点路由：</h3><p>当客户端连接向某个master节点发送请求时，接收到命令的节点首先会通过 CRC-16(key)%16384 计算出当前key所属的slot，如果该slot由自己负责，直接处理响应客户端的请求，如果不是，则向客户端返回MOVED重定向请求，并将该slot对应的服务器节点的ip和port一并返回，客户端拿着这些数据重新访问。</p><h3 id="节点增删："><a href="#节点增删：" class="headerlink" title="节点增删："></a>节点增删：</h3><p>节点增删的时候，只需要迁移部分数据即可，避免了内存雪崩的问题。但是迁移过程中，需要用户手动触发，迁移过程中可能导致数据不一致，故在迁移过程中尽可能避免写操作</p><img src="https://img.ncfl.tech//202404101906733.png" width=600px/><p>手动迁移可见：<a href="https://blog.51cto.com/u_16213447/7028602">https://blog.51cto.com/u_16213447/7028602</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建新的目标节点</span></span><br><span class="line">redis-cli -h &lt;目标节点IP&gt; -p &lt;目标节点端口&gt; CLUSTER MEET &lt;任意一个集群中的节点IP&gt; &lt;任意一个集群中的节点端口&gt;</span><br><span class="line"><span class="comment"># 2、在目标节点上设置slots，&lt;起始slot&gt;和&lt;结束slot&gt;是slots的范围，自己设定</span></span><br><span class="line">redis-cli -h &lt;目标节点IP&gt; -p &lt;目标节点端口&gt; CLUSTER ADDSLOTS &lt;起始slot&gt; &lt;结束slot&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在源节点上将slots迁移到目标节点</span></span><br><span class="line">redis-cli -h &lt;源节点IP&gt; -p &lt;源节点端口&gt; CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;目标节点ID&gt;</span><br><span class="line">redis-cli -h &lt;目标节点IP&gt; -p &lt;目标节点端口&gt; CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;源节点ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、在源节点上删除迁移的slots</span></span><br><span class="line">redis-cli -h &lt;源节点IP&gt; -p &lt;源节点端口&gt; CLUSTER DELSLOTS &lt;起始slot&gt; &lt;结束slot&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、检查迁移是否成功</span></span><br><span class="line">redis-cli -h &lt;源节点IP&gt; -p &lt;源节点端口&gt; CLUSTER DELSLOTS &lt;起始slot&gt; &lt;结束slot&gt;</span><br></pre></td></tr></table></figure><h3 id="迁移过程中发生读写"><a href="#迁移过程中发生读写" class="headerlink" title="迁移过程中发生读写"></a>迁移过程中发生读写</h3><p>参考：<a href="https://worktile.com/kb/ask/741982.html">https://worktile.com/kb/ask/741982.html</a></p><ul><li>旧节点会继续处理来自客户端的读写操作，直到槽迁移完成。</li><li>对于已经迁移的槽的读操作，旧节点会向新节点转发请求，并将新节点返回的结果直接返回给客户端。这样，客户端可以从旧节点获取已经迁移的数据。</li><li>对于已经迁移的槽的写操作，旧节点会将写请求转发给新节点，并等待新节点返回写操作的结果。一旦新节点返回成功，旧节点也会返回成功给客户端。这样，客户端可以从旧节点获取写操作的结果。</li></ul><h3 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h3><p>好处：</p><ul><li>比一致性hash实现起来比较方便。</li><li>可以更方便得避免数据倾斜问题，不用采用虚拟节点就解决，可以根据服务器性能决定当前节点分配多少槽点</li><li>同样可以避免缓存雪崩的问题</li></ul><p>坏处：无法自动恢复，需要人工干预进行迁移。当前槽点是否可用主要依赖于主从节点的自主恢复</p><h1 id="redis主从扩容"><a href="#redis主从扩容" class="headerlink" title="redis主从扩容"></a>redis主从扩容</h1><h2 id="SYNC全量同步"><a href="#SYNC全量同步" class="headerlink" title="SYNC全量同步"></a>SYNC全量同步</h2><img src="https://img.ncfl.tech//202404092049390.png" width=400px/><ol><li>新的从节点加入集群</li><li>从节点向主节点发送sync命令</li><li>主节点收到sync，开始执行rdb快照，并发送给从节点,并通过AOF的方式记录新增的写操作</li><li>从节点接收到快照，执行快照，生成数据</li><li>主节点向从节点发送aof文件，从节点执行aof文件。至此主从节点数据完全一致（因为这时候的aof文件只是新增的几个数据，文件比较小，且执行快，会阻塞主节点的线程）</li><li>后续主从按照正常的策略同步</li></ol><h2 id="PSYNC增量同步"><a href="#PSYNC增量同步" class="headerlink" title="PSYNC增量同步"></a>PSYNC增量同步</h2><ol><li>如果是之前的从节点突然断开链接，然后突然连接上主节点，则会使用psync的同步策略。</li><li>sync同步的是全量的数据，比较号性能，psync可能同步增量的数据，加快同步速度</li><li>在之前的同步过程中，主从节点分别记录喆数据的偏移量，且主节点会有缓存区：<ul><li>如果主从的偏移数据在缓存区内，则直接把缓存区的数据同步过去即可</li><li>如果主从的偏移数据不在缓存区内，则执行上述sync策略，全量数据同步</li></ul></li></ol><h2 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h2><p>redis为了追求性能，主从之间的同步策略是异步的，不是强一致性，是最终一致性。<br>即redis主节点收到写命令的时候，在主节点执行完之后，会立刻返回给客户端，同时广播给从节点</p><p>解决：</p><ul><li>基于业务考虑，redis是做缓存的，不是存储的，如果是一致性要求不是很高可考虑忽略</li><li>读写都只能通过主节点，从节点仅用于数据备份</li><li>再引入一个cache，该cache强一致性，如果某个key发生过写操作，则记录在这个cache里面，下次读数据只能从主节点读取</li></ul><p>PS: </p><ol><li>一般主节点负责读写，从节点只负责读，如果客户端的写请求请求到从节点，从节点会将主节点的信息返回给客户端，让客户端再次发起请求</li><li>redis的同步策略 &amp;&amp; redis的故障恢复策略，大概率会导致数据丢失</li></ol><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>核心参考文章：<a href="https://blog.csdn.net/wzngzaixiaomantou/article/details/126089156">https://blog.csdn.net/wzngzaixiaomantou/article/details/126089156</a></p><h2 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h2><ul><li>监控（Monitoring）：哨兵会不断地检查主节点和从节点是否运作正常。 </li><li>自动故障转移（Automatic failover）：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。 </li><li>配置提供者（Configuration provider）：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。 </li><li>通知（Notification）：哨兵可以将故障转移的结果发送给客户端。</li></ul><p>一主多从的redis集群和多主多从的redis集群，可以用同一套哨兵来监听</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>哨兵本身是个集群，redis主从也是个集群，哨兵集群监听redis集群。</p><ol><li><p>通过订阅的方式，发现哨兵之间建立联系，并获取到集群中的matser节点</p><img src="https://img.ncfl.tech//202404101301638.png" width=600px/></li><li><p>哨兵通过INFO命令向主节点获取从节点列表，然后跟从节点建立链接，并保持PING来保证每个节点和哨兵集群之间的联系</p><img src="https://img.ncfl.tech//202404101259425.png" width=600px/> </li><li><p>当一个哨兵与master节点的联系断了，则会将当前master节点标记为<code>主观下线</code>，然后去咨询其他的哨兵，如果超过半数的哨兵认为master节点<code>主观下线</code>，则该master节点则为<code>客观下线</code></p><img src="https://img.ncfl.tech//202404101259425.png" width=600px/></li><li><p>此时认为集群异常，需要将从节点升级为主节点。哨兵之间通过<code>raft</code>算法进行master选举，用以redis主从数据库切换</p></li><li><p>选出新的master节点，规则如下：</p><ul><li>过滤列表中所有处于下线或断线状态的从服务器</li><li>选择优先级最高的节点，每个节点的一个配置项</li><li>如果优先级相同，选择offset最大的，offset表示主节点向从节点同步数据的偏移量，越大表示同步的数据越多；</li><li>如果offset也相同，选择run id较小的；</li></ul></li><li><p>其他节点根据新的master来做一次数据同步，之前的断开的master如果后续恢复了，作为从节点加入集群</p></li></ol><h1 id="redis为啥用跳表，innodb为啥用B-树"><a href="#redis为啥用跳表，innodb为啥用B-树" class="headerlink" title="redis为啥用跳表，innodb为啥用B+树"></a>redis为啥用跳表，innodb为啥用B+树</h1><ul><li>innodb用B+树<ul><li>B+ tree是多叉树结构</li><li>三层左右就可以存千万级别的数据量，跳表千万级别数据量不止3层</li><li>一次查询，进行少数的IO便可做获取到数据</li><li>查询性能较好</li></ul></li><li>redis用跳表    <ul><li>跳表是链表结构</li><li>B+树写入性能较差，需要旋转节点等操作</li><li>跳表实现起来更加简单</li><li>跳表写入性能较好</li><li>读数据时不用考虑磁盘IO问题，且没有人会在redis缓存千万级别数据</li></ul></li></ul><h1 id="几个常用库区别"><a href="#几个常用库区别" class="headerlink" title="几个常用库区别"></a>几个常用库区别</h1>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/post/54150/"/>
      <url>/post/54150/</url>
      
        <content type="html"><![CDATA[<h1 id="约瑟夫环，剑指offer62"><a href="#约瑟夫环，剑指offer62" class="headerlink" title="约瑟夫环，剑指offer62"></a>约瑟夫环，剑指offer62</h1><p>题目：社团共有 num 位成员参与破冰游戏，编号为 0 ~ num-1。成员们按照编号顺序围绕圆桌而坐。社长抽取一个数字 target，从 0 号成员起开始计数，排在 第 target 位的成员离开圆桌，且成员离开后从下一个成员开始计数。请返回游戏结束时最后一位成员的编号。</p><h2 id="基础-斐波那契数列："><a href="#基础-斐波那契数列：" class="headerlink" title="基础:斐波那契数列："></a><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/description/">基础:斐波那契数列：</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(n) = n                (n&lt;=1)   </span><br><span class="line">f(n) = f(n-1) + f(n-2)   (n &gt; 1)    </span><br></pre></td></tr></table></figure><h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a><a href="https://leetcode.cn/problems/hanota-lcci/description/">汉诺塔问题</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 汉诺塔</span></span><br><span class="line"><span class="comment">* 有柱子 x z y，最终将x上的n个圆盘借助z移动到y上</span></span><br><span class="line"><span class="comment">* 递归思想：</span></span><br><span class="line"><span class="comment">* 1.将x上的n-1个放入到z上，借助y</span></span><br><span class="line"><span class="comment">* 2.将x上的n圆盘放到y上</span></span><br><span class="line"><span class="comment">* 3.将z上的n-1个圆盘放入y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanoi</span><span class="params">(n <span class="type">int</span>, from <span class="type">string</span>, tmp <span class="type">string</span>, to <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">hanoi(n<span class="number">-1</span>, from, to, tmp)</span><br><span class="line">fmt.Println(<span class="string">&quot;take &quot;</span> + fmt.Sprint(n) + <span class="string">&quot; from &quot;</span> + from + <span class="string">&quot; to &quot;</span> + to)</span><br><span class="line">hanoi(n<span class="number">-1</span>, tmp, from, to)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约瑟夫环："><a href="#约瑟夫环：" class="headerlink" title="约瑟夫环："></a><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/description/">约瑟夫环：</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(n,m) = 0                     (n=1) </span><br><span class="line">f(n,m) = (f(n-1,m) + m) % n    (n&gt;1) </span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">iceBreakingGame</span><span class="params">(n <span class="type">int</span>, m <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">return</span> (iceBreakingGame(n<span class="number">-1</span>, m)+m)%n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="单调栈问题"><a href="#单调栈问题" class="headerlink" title="单调栈问题"></a>单调栈问题</h1><p>单调栈：栈内元素只能按照从大到小或者从小到大排列，当即将入栈元素不满足要求，则弹出栈顶元素，用以放入下一元素，核心考虑：</p><ul><li>当前元素 &lt; 栈顶元素</li><li>当前元素 &#x3D; 栈顶元素</li><li>当前元素 &gt; 栈顶元素</li></ul><h2 id="下一个更大元素"><a href="#下一个更大元素" class="headerlink" title="下一个更大元素"></a><a href="https://leetcode.cn/problems/next-greater-element-i/">下一个更大元素</a></h2><p>直接用单调栈解解，熟悉啥是单调栈</p><h2 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">接雨水</a></h2><img src=https://img.ncfl.tech/202403132002039.png width=400 /><ul><li>（直接记录最大值即可）</li><li>竖着计算水柱大小，则需要用两个数组分别求出左（右）侧最大值 — 推荐，好理解</li><li>横着计算水柱大小，则需要用单调栈递降，遇到更大的，弹出栈顶元素，横着计算当前水位</li></ul><h2 id="柱状图中最大的矩形"><a href="#柱状图中最大的矩形" class="headerlink" title="柱状图中最大的矩形"></a><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h2><ul><li>（记录最大值的index）</li><li>竖着计算矩形面积，则需要用两个数组分别求出左（右）侧小于本身的位置最近的值 — 推荐，好理解<ul><li>不用两个完整for循环，记录index，根据下表for循环，最坏情况是有其中出现一两次次O(n²) — 推荐</li></ul></li><li>横着计算矩形面积，则需要用单调栈递增，遇到更小的，则出栈顶元素（index），计算下表距离*当前值<ul><li>需要在原队列的前后补上一个最小值：前补最小元素，保证面积计算合理；后补最小元素，将栈中元素全部弹出。</li></ul></li></ul><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h2><p>说是单调队列，其实感觉和单调栈差不多<br>单调队列代码详情：<a href="https://blog.ncfl.tech/post/2905/#%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97">https://blog.ncfl.tech/post/2905/#单调队列</a></p><hr><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="链接相交"><a href="#链接相交" class="headerlink" title="链接相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">链接相交</a></h2><img src=https://img.ncfl.tech/202403132003214.png width=400 /><p>计算出两个链表的长度差异，位移长的链表，而后两个链表同时移动，看看移动过程中是否有相同节点</p><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a><a href="https://leetcode.cn/problems/3sum/">三数之和</a></h2><img src=https://img.ncfl.tech/202403132005850.gif width=400 /><p>排序之后，for整个数列，根据排列后的值，计算两个指针从头到尾计算获取的值0-nums[i]</p><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a><a href="https://leetcode.cn/problems/4sum/">四数之和</a></h2><p>同上，增加一个for循环，计算两个指针从头到尾计算获取的值target-nums[i]-nums[j]</p><hr><h2 id="前-K-个高频元素"><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">前 K 个高频元素</a></h2><p>采用<code>最小堆</code>解决，对所有元素计数之后，采用<code>最小堆</code>将最小的元素弹出，和快排相比，时间复杂度都是O(nlogn)，但是元素较少，所以速度更快</p><p>代码详见：<a href="https://blog.ncfl.tech/post/2905/#%E6%9C%80%E5%B0%8F%E9%A1%B6%E5%A0%86">https://blog.ncfl.tech/post/2905/#最小顶堆</a></p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a><a href="https://leetcode.cn/problems/balanced-binary-tree/">平衡二叉树</a></h2><p>判断是否平衡二叉树：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">h := getHeight(root)</span><br><span class="line"><span class="keyword">if</span> h == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回以该节点为根节点的二叉树的高度，如果不是平衡二叉树了则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHeight</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">l, r := getHeight(root.Left), getHeight(root.Right)</span><br><span class="line"><span class="keyword">if</span> l == <span class="number">-1</span> || r == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l-r &gt; <span class="number">1</span> || r-l &gt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(l, r) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a><a href="https://leetcode.cn/problems/lru-cache/description/">LRU</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">Key  <span class="type">int</span></span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Pre  *Node</span><br><span class="line">Next *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LRUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">NodeList []*Node</span><br><span class="line">Head     *Node</span><br><span class="line">Tail     *Node</span><br><span class="line">Map      <span class="keyword">map</span>[<span class="type">int</span>]*Node</span><br><span class="line">Cap      <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="type">int</span>)</span></span> LRUCache &#123;</span><br><span class="line">l := LRUCache&#123;&#125;</span><br><span class="line">l.Cap = capacity</span><br><span class="line">l.Map = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*Node)</span><br><span class="line">l.Head = &amp;Node&#123;&#125;</span><br><span class="line">l.Tail = &amp;Node&#123;&#125;</span><br><span class="line">l.Head.Next = l.Tail</span><br><span class="line">l.Tail.Pre = l.Head</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> Get(key <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">node, ok := this.Map[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.Pre.Next = node.Next</span><br><span class="line">node.Next.Pre = node.Pre</span><br><span class="line">node.Pre = this.Head</span><br><span class="line">node.Next = this.Head.Next</span><br><span class="line">this.Head.Next.Pre = node</span><br><span class="line">this.Head.Next = node</span><br><span class="line"><span class="keyword">return</span> node.Val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> Put(key <span class="type">int</span>, value <span class="type">int</span>) &#123;</span><br><span class="line">node, ok := this.Map[key]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">node.Val = value</span><br><span class="line">node.Pre.Next = node.Next</span><br><span class="line">node.Next.Pre = node.Pre</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node = &amp;Node&#123;</span><br><span class="line">Key: key,</span><br><span class="line">Val: value,</span><br><span class="line">&#125;</span><br><span class="line">this.Map[key] = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.Pre = this.Head</span><br><span class="line">node.Next = this.Head.Next</span><br><span class="line">this.Head.Next.Pre = node</span><br><span class="line">this.Head.Next = node</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(this.Map) &gt; this.Cap &#123;</span><br><span class="line"><span class="built_in">delete</span>(this.Map, this.Tail.Pre.Key)</span><br><span class="line">delNode := this.Tail.Pre</span><br><span class="line">this.Tail.Pre.Pre.Next = this.Tail</span><br><span class="line">this.Tail.Pre = this.Tail.Pre.Pre</span><br><span class="line"></span><br><span class="line">delNode.Pre = <span class="literal">nil</span></span><br><span class="line">delNode.Next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><ul><li><p>O(n)：类似LRU，维护一个map同时维护一个链表，链接节点同样为<code>node</code>，每次读取的时候，从头到尾遍历节点，变更节点对应的位置</p></li><li><p>O(logN)：类似LRU，维护一个map同时维护一个二叉树或者数组，可以做到二叉查找的结构，链接节点同样为<code>node</code>，每次读取的时候，遍历节点，找到合适插入的位置即可。Golang比较费劲，毕竟没有现成的数据结构</p></li><li><p>O(1)：如下代码，维护两个hashmap，一个用来维护节点（<code>data</code>），另一个维护当前frequency对应的结点链表<code>freqMap</code>，每次Get和Put的时候，从<code>data</code>判断节点是否存在，然后当前节点使用次数加一，更新<code>freqMap</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">data    <span class="keyword">map</span>[<span class="type">int</span>]*Node</span><br><span class="line">freqMap <span class="keyword">map</span>[<span class="type">int</span>]*DoubleLinkList</span><br><span class="line"><span class="built_in">cap</span>     <span class="type">int</span></span><br><span class="line">minFreq <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">key, value, freq <span class="type">int</span></span><br><span class="line">pre, next        *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="type">int</span>)</span></span> LFUCache &#123;</span><br><span class="line"><span class="keyword">return</span> LFUCache&#123;</span><br><span class="line">data:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*Node),</span><br><span class="line">freqMap: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*DoubleLinkList),</span><br><span class="line"><span class="built_in">cap</span>:     capacity,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span></span> Get(key <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node, ok := this.data[key]; ok &#123;</span><br><span class="line">preList := this.freqMap[node.freq]</span><br><span class="line">preList.Remove(node)</span><br><span class="line"><span class="keyword">if</span> this.minFreq == node.freq &amp;&amp; preList.head.next == preList.tail &#123;</span><br><span class="line">this.minFreq++</span><br><span class="line">&#125;</span><br><span class="line">node.freq++</span><br><span class="line">afterList, ok := this.freqMap[node.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">afterList = NewDoubleLinkList()</span><br><span class="line">this.freqMap[node.freq] = afterList</span><br><span class="line">&#125;</span><br><span class="line">afterList.AddTail(node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node.value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LFUCache)</span></span> Put(key <span class="type">int</span>, value <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> node, ok := this.data[key]; ok &#123;</span><br><span class="line">preList := this.freqMap[node.freq]</span><br><span class="line">preList.Remove(node)</span><br><span class="line"><span class="keyword">if</span> this.minFreq == node.freq &amp;&amp; preList.head.next == preList.tail &#123;</span><br><span class="line">this.minFreq++</span><br><span class="line">&#125;</span><br><span class="line">node.freq++</span><br><span class="line">node.value = value</span><br><span class="line">afterList, ok := this.freqMap[node.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">afterList = NewDoubleLinkList()</span><br><span class="line">this.freqMap[node.freq] = afterList</span><br><span class="line">&#125;</span><br><span class="line">afterList.AddTail(node)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(this.data) &lt; this.<span class="built_in">cap</span> &#123;</span><br><span class="line">n := &amp;Node&#123;</span><br><span class="line">key:   key,</span><br><span class="line">value: value,</span><br><span class="line">freq:  <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">this.minFreq = n.freq</span><br><span class="line">this.data[key] = n</span><br><span class="line"></span><br><span class="line">list, ok := this.freqMap[n.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">list = NewDoubleLinkList()</span><br><span class="line">this.freqMap[n.freq] = list</span><br><span class="line">&#125;</span><br><span class="line">list.AddTail(n)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := &amp;Node&#123;</span><br><span class="line">key:   key,</span><br><span class="line">value: value,</span><br><span class="line">freq:  <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">linkList := this.freqMap[this.minFreq]</span><br><span class="line">removeHead := linkList.RemoveHead()</span><br><span class="line"><span class="built_in">delete</span>(this.data, removeHead.key)</span><br><span class="line"></span><br><span class="line">this.data[key] = n</span><br><span class="line">this.minFreq = n.freq</span><br><span class="line">list, ok := this.freqMap[n.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">list = NewDoubleLinkList()</span><br><span class="line">this.freqMap[n.freq] = list</span><br><span class="line">&#125;</span><br><span class="line">list.AddTail(n)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDoubleLinkList</span><span class="params">()</span></span> *DoubleLinkList &#123;</span><br><span class="line">d := &amp;DoubleLinkList&#123;</span><br><span class="line">head: &amp;Node&#123;&#125;,</span><br><span class="line">tail: &amp;Node&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">d.head.next = d.tail</span><br><span class="line">d.tail.pre = d.head</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DoubleLinkList <span class="keyword">struct</span> &#123;</span><br><span class="line">head, tail *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DoubleLinkList)</span></span> AddTail(node *Node) &#123;</span><br><span class="line">node.next = d.tail</span><br><span class="line">node.pre = d.tail.pre</span><br><span class="line"></span><br><span class="line">d.tail.pre.next = node</span><br><span class="line">d.tail.pre = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DoubleLinkList)</span></span> Remove(node *Node) &#123;</span><br><span class="line">node.pre.next = node.next</span><br><span class="line">node.next.pre = node.pre</span><br><span class="line"></span><br><span class="line">node.pre = <span class="literal">nil</span></span><br><span class="line">node.next = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DoubleLinkList)</span></span> RemoveHead() *Node &#123;</span><br><span class="line">node := d.head.next</span><br><span class="line">d.head.next = node.next</span><br><span class="line">node.next.pre = d.head</span><br><span class="line"></span><br><span class="line">node.next = <span class="literal">nil</span></span><br><span class="line">node.pre = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a><a href="https://leetcode.cn/problems/maximum-binary-tree/">654.最大二叉树</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到最大值</span></span><br><span class="line">    index := findMax(nums)</span><br><span class="line">    <span class="comment">// 构造二叉树</span></span><br><span class="line">    root := &amp;TreeNode &#123;</span><br><span class="line">        Val: nums[index],</span><br><span class="line">        Left: constructMaximumBinaryTree(nums[:index]),   <span class="comment">//左半边</span></span><br><span class="line">        Right: constructMaximumBinaryTree(nums[index+<span class="number">1</span>:]),<span class="comment">//右半边</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMax</span><span class="params">(nums []<span class="type">int</span>)</span></span> (index <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[index] &lt; v &#123;</span><br><span class="line">            index = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617.合并二叉树</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(root1 *TreeNode, root2 *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root1</span><br><span class="line">    &#125;</span><br><span class="line">    root1.Val += root2.Val</span><br><span class="line">    root1.Left = mergeTrees(root1.Left, root2.Left)</span><br><span class="line">    root1.Right = mergeTrees(root1.Right, root2.Right)</span><br><span class="line">    <span class="keyword">return</span> root1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> root == p || root == q &#123;</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line">left := lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">right := lowestCommonAncestor(root.Right, p, q)</span><br><span class="line"><span class="keyword">if</span> left != <span class="literal">nil</span> &amp;&amp; right != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> left != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> right != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点"></a><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">450.删除二叉搜索树中的节点</a></h2><p>很难，但是思路很不难，代码很费劲，<a href="https://www.bilibili.com/video/BV1tP41177us/">https://www.bilibili.com/video/BV1tP41177us/</a></p><h2 id="470-用-Rand7-实现-Rand10"><a href="#470-用-Rand7-实现-Rand10" class="headerlink" title="470. 用 Rand7() 实现 Rand10()"></a><a href="https://leetcode.cn/problems/implement-rand10-using-rand7/">470. 用 Rand7() 实现 Rand10()</a></h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rand10</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">row := rand7()</span><br><span class="line">col := rand7()</span><br><span class="line">idx := (row<span class="number">-1</span>)*<span class="number">7</span> + col</span><br><span class="line"><span class="keyword">if</span> idx &lt;= <span class="number">40</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> idx &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">7</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">9</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139.单词拆分"></a><a href="https://programmercarl.com/0139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86.html#%E6%80%9D%E8%B7%AF">139.单词拆分</a></h2>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装</title>
      <link href="/post/21600/"/>
      <url>/post/21600/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a><strong>1、安装node.js</strong></h2><p>参考：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># centos8</span><br><span class="line">yum install -y nodejs</span><br><span class="line"># mac </span><br><span class="line">brew install node</span><br><span class="line"># 查看版本</span><br><span class="line">node -v </span><br><span class="line">npm -v </span><br></pre></td></tr></table></figure><p>目前体验上来看，版本好像影响不大</p><h2 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a><strong>2、安装hexo</strong></h2><p>参考<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开<code>http://localhost:4000</code>，看到如下画面：<br><img src="http://img.ncfl.tech/202304262259359.jpg" alt="img.ncfl.tech/202304262259359.jpg"></p><h2 id="3、安装管理后台"><a href="#3、安装管理后台" class="headerlink" title="3、安装管理后台"></a><strong>3、安装管理后台</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><p>打开<code>http://localhost:4000/admin</code>，看到如下画面：<br><img src="http://img.ncfl.tech/202304262258902.jpg" alt="img.ncfl.tech/202304262258902.jpg"><br>在<code>Settings</code>中添加密码<br><img src="http://img.ncfl.tech/202304262300118.jpg" alt="img.ncfl.tech/202304262300118.jpg"><br>然后把生成的串添加至<code>/blog/_config.yaml</code>中，内容大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: abcd</span><br><span class="line">  password_hash: $2a$10$U1KKI4gbFgovE50uSk0FluwocsBemwHV7YpxvwVew4W8UOqDeTUuC</span><br><span class="line">  secret: xyz</span><br></pre></td></tr></table></figure><p>添加之后，重启hexo，后续登录管理后台便需要账号密码，账号密码为刚刚添加的配置</p><h2 id="4、更换皮肤"><a href="#4、更换皮肤" class="headerlink" title="4、更换皮肤"></a><strong>4、更换皮肤</strong></h2><p>皮肤可以在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>这里取选取，也可以去<code>github</code>上去搜索主题，上面有大量的皮肤，一般也会有安装教程，这里以<code>https://github.com/zchengsite/hexo-theme-oranges</code>为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载皮肤到/blog/themes/oranges这个目录</span><br><span class="line">git clone https://github.com/zchengsite/hexo-theme-oranges.git /blog/themes/oranges</span><br><span class="line"># 将/blog/_config.yaml中的themes: 替换为当前皮肤，名字为皮肤对应的文件夹名字</span><br><span class="line">sed -i &#x27;s/theme: landscape/theme: oranges/g&#x27; /blog/_config.yml</span><br></pre></td></tr></table></figure><p>重启hexo，看的页面大致如下：<br><img src="http://img.ncfl.tech/202304262312117.jpg" alt="img.ncfl.tech/202304262312117.jpg"></p><h2 id="5、部署"><a href="#5、部署" class="headerlink" title="5、部署"></a><strong>5、部署</strong></h2><p>部署主要参考下面两篇文章，我这里赘述一下：<br><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a><br><a href="https://www.cnblogs.com/xingyunblog/p/8676695.html">https://www.cnblogs.com/xingyunblog/p/8676695.html</a></p><p>部署在<code>github</code>上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;abcdef&quot;</span><br><span class="line">git config --global user.email &quot;123456@qq.com&quot;</span><br><span class="line"></span><br><span class="line"># 生成key，直接回车回车回车</span><br><span class="line">ssh-keygen -t rsa -C &quot;123456@qq.com&quot;</span><br><span class="line"></span><br><span class="line"># 将生成~/.ssh/id_rsa.pub内容复制到GitHub项目。`Settings`-&gt;`Deploy keys`-&gt;`Add deploy key`</span><br><span class="line"></span><br><span class="line"># 配置`/blog/_config.yaml`</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:abcdefg/blog_svr.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line"># 安装插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># 此时重启hexo，而后执行如下命令，便可以把hexo传至github上</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">  </span><br><span class="line"># admin上配置deploy脚本，而后便可以在admin上直接部署到github上</span><br><span class="line">admin:</span><br><span class="line">  username: abcd</span><br><span class="line">  password_hash: $2a$10$U1KKI4gbFgovE50uSk0FluwocsBemwHV7YpxvwVew4W8UOqDeTUuC</span><br><span class="line">  secret: xyz</span><br><span class="line">  deployCommand: /blog/deploy.sh</span><br><span class="line">  </span><br><span class="line"># 内容如下：</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="6、Dockerfile"><a href="#6、Dockerfile" class="headerlink" title="6、Dockerfile"></a><strong>6、Dockerfile</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">FROM node:18</span><br><span class="line"></span><br><span class="line">MAINTAINER faker</span><br><span class="line"></span><br><span class="line">RUN npm config set registry https://registry.npm.taobao.org \</span><br><span class="line"> &amp;&amp; npm install hexo-cli -g \</span><br><span class="line"> </span><br><span class="line"> # 初始化</span><br><span class="line"> &amp;&amp; hexo init blog \</span><br><span class="line"> &amp;&amp; cd blog \</span><br><span class="line"> &amp;&amp; npm install \</span><br><span class="line"> &amp;&amp; npm install hexo-server --save \</span><br><span class="line"></span><br><span class="line"> # 皮肤</span><br><span class="line"> &amp;&amp; git clone https://gitee.com/Noxuss/hexo-theme-oranges.git /blog/themes/oranges \</span><br><span class="line"> &amp;&amp; sed -i &#x27;s/theme: landscape/theme: oranges/g&#x27; /blog/_config.yml \</span><br><span class="line"></span><br><span class="line"> # 部署</span><br><span class="line"># &amp;&amp; mkdir -p /root/.ssh \</span><br><span class="line"># &amp;&amp; echo &quot;ssh-rsa dsafdsafdsfsa 123456@qq.com&quot; &gt; /root/.ssh/id_rsa.pub \ </span><br><span class="line"> &amp;&amp; git config --global user.name &quot;abcd&quot; \</span><br><span class="line"> &amp;&amp; git config --global user.email &quot;123456@qq.com&quot; \</span><br><span class="line"> &amp;&amp; npm install hexo-deployer-git --save \</span><br><span class="line"> &amp;&amp; echo &quot;cd /blog&quot; &gt; /blog/deploy.sh \</span><br><span class="line"> &amp;&amp; echo &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot; &gt;&gt; /blog/deploy.sh \</span><br><span class="line"> &amp;&amp; chmod 777 /blog/deploy.sh \</span><br><span class="line"> &amp;&amp; sed -i &quot;s/  type: &#x27;&#x27;/  type: git/g&quot; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  repository: git@github.com:12331231/blog.git&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  branch: main&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> </span><br><span class="line"> # 管理端</span><br><span class="line"> &amp;&amp; npm install --save hexo-admin \</span><br><span class="line"> &amp;&amp; echo &#x27;admin:&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  username: ncfl&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  password_hash: 1231232132131312&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  secret: ncfl&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;  deployCommand: /blog/deploy.sh&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"> &amp;&amp; echo &#x27;&#x27; &gt;&gt; /blog/_config.yml \</span><br><span class="line"></span><br><span class="line"> &amp;&amp; echo &quot;cd /blog&quot; &gt; /blog/run.sh \</span><br><span class="line"> &amp;&amp; echo &quot;hexo s &quot; &gt;&gt; /blog/run.sh \</span><br><span class="line"> &amp;&amp; chmod 777 /blog/run.sh \</span><br><span class="line"></span><br><span class="line"> &amp;&amp; npm cache clean --force</span><br><span class="line"></span><br><span class="line"># 磁盘挂载一下，避免docker重建数据都miss了</span><br><span class="line"></span><br><span class="line">COPY id_rsa* /root/.ssh/</span><br><span class="line"></span><br><span class="line">EXPOSE 4000</span><br><span class="line"></span><br><span class="line">CMD sh /blog/run.sh</span><br></pre></td></tr></table></figure><p>构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hexo .</span><br><span class="line">docker run -itd -p 4000:4000 hexo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章收藏-GO</title>
      <link href="/post/63609/"/>
      <url>/post/63609/</url>
      
        <content type="html"><![CDATA[<h3 id="0、教程篇"><a href="#0、教程篇" class="headerlink" title="0、教程篇"></a>0、教程篇</h3><p><a href="https://www.topgoer.com/">GOLANG中文文档</a></br><br><a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/">GO程序语言设计与实现</a></br><br><a href="http://mian.topgoer.com/">面试题1</a></br><br><a href="https://golang.design/go-questions/channel/csp/">面试题2</a></br></p><h3 id="workerPool原理模拟"><a href="#workerPool原理模拟" class="headerlink" title="workerPool原理模拟"></a>workerPool原理模拟</h3><p><a href="https://leileiluoluo.com/posts/golang-worker-pool.html">https://leileiluoluo.com/posts/golang-worker-pool.html</a></p><h3 id="go并发编程–源码解析"><a href="#go并发编程–源码解析" class="headerlink" title="go并发编程–源码解析"></a>go并发编程–源码解析</h3><p><a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/">https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/</a></p><h3 id="GO中的内存对齐"><a href="#GO中的内存对齐" class="headerlink" title="GO中的内存对齐"></a>GO中的内存对齐</h3><p><a href="https://juejin.cn/post/6844904067244769294">https://juejin.cn/post/6844904067244769294</a></p><h3 id="benchmark使用"><a href="#benchmark使用" class="headerlink" title="benchmark使用"></a>benchmark使用</h3><p><a href="https://geektutu.com/post/hpg-benchmark.html">https://geektutu.com/post/hpg-benchmark.html</a></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><a href="https://zhuanlan.zhihu.com/p/92634505">https://zhuanlan.zhihu.com/p/92634505</a></p><h3 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h3><p><a href="https://topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/GMP%E5%8E%9F%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6.html">文章：GMP原理与调度</a><br><a href="https://www.bilibili.com/video/BV19r4y1w7Nx/?spm_id_from=333.337.search-card.all.click">视频：Golang深入理解GPM模型</a><br><a href="https://blog.tianfeiyu.com/2021/12/12/golang_gpm/">结合源码分析</a></p><h3 id="map底层"><a href="#map底层" class="headerlink" title="map底层"></a>map底层</h3><p><a href="https://zhuanlan.zhihu.com/p/495998623">https://zhuanlan.zhihu.com/p/495998623</a><br><a href="https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access">https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access</a></p><h3 id="GOLANG内存分配"><a href="#GOLANG内存分配" class="headerlink" title="GOLANG内存分配"></a>GOLANG内存分配</h3><p>视频：<a href="https://www.bilibili.com/video/BV16B4y1m7PC/">https://www.bilibili.com/video/BV16B4y1m7PC/</a></br><br>牛逼的文章：<a href="https://segmentfault.com/a/1190000020338427">https://segmentfault.com/a/1190000020338427</a></br><br>文章：<a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/">https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/</a></p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p><a href="https://www.bilibili.com/video/BV1wz4y1y7Kd?p=1">https://www.bilibili.com/video/BV1wz4y1y7Kd?p=1</a></br><br><a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/">https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/</a></p><h3 id="chan底层实现"><a href="#chan底层实现" class="headerlink" title="chan底层实现"></a>chan底层实现</h3><p><a href="https://i6448038.github.io/2019/04/11/go-channel/">https://i6448038.github.io/2019/04/11/go-channel/</a><br>应用场景：<a href="https://golang.design/go-questions/channel/application/">https://golang.design/go-questions/channel/application/</a></p><h3 id="context相关"><a href="#context相关" class="headerlink" title="context相关"></a>context相关</h3><p>源码分析：<a href="https://segmentfault.com/a/1190000040917752">https://segmentfault.com/a/1190000040917752</a></p><p>使用场景：</p><ul><li>上下文传递值、比如登录态，或者请求体返回体</br></li><li>超时控制</br></li><li>取消后续的动作，请求过程 A-&gt;B-&gt;C，如果B调用了context.cancel()，C在监听context. &lt;- Done()，就会发现已经终止了，直接返回</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s安装-相关教程资料</title>
      <link href="/post/24912/"/>
      <url>/post/24912/</url>
      
        <content type="html"><![CDATA[<h2 id="强烈建议安装minikube"><a href="#强烈建议安装minikube" class="headerlink" title="强烈建议安装minikube"></a>强烈建议安装minikube</h2><p>只是学习的话，强烈建议安装<a href="http://minikube/">https://minikube.sigs.k8s.io/docs/start/</a>，太好用了</p><h2 id="国产更好的控制台"><a href="#国产更好的控制台" class="headerlink" title="国产更好的控制台"></a>国产更好的控制台</h2><p>参考<a href="https://kuboard.cn/install/v3/install-in-k8s.html">https://kuboard.cn/install/v3/install-in-k8s.html</a><br>Minikube安装kuboard:<a href="https://juejin.cn/post/6909470850148204551">https://juejin.cn/post/6909470850148204551</a></p><h2 id="k8s所有功能入门"><a href="#k8s所有功能入门" class="headerlink" title="k8s所有功能入门"></a>k8s所有功能入门</h2><p>视频教程 <a href="https://www.bilibili.com/video/BV1Tg411P7EB/">https://www.bilibili.com/video/BV1Tg411P7EB/</a><br>文档：<a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/9EX8Cp45">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/9EX8Cp45</a></p><h2 id="安装-metrics-server"><a href="#安装-metrics-server" class="headerlink" title="安装 metrics-server"></a>安装 metrics-server</h2><p>参考<a href="https://huangzhongde.cn/istio/Chapter3/Chapter3-2.html">https://huangzhongde.cn/istio/Chapter3/Chapter3-2.html</a></p><h2 id="安装dashboard"><a href="#安装dashboard" class="headerlink" title="安装dashboard"></a>安装dashboard</h2><p>参考<a href="https://huangzhongde.cn/istio/Chapter3/Chapter3-3.html">https://huangzhongde.cn/istio/Chapter3/Chapter3-3.html</a></p><p>注意：最后访问的端口是<code>30443</code></p><p>删除dashboard<br>参考<a href="https://www.cnblogs.com/yy690486439/p/13596947.html">https://www.cnblogs.com/yy690486439/p/13596947.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s安装</title>
      <link href="/post/37239/"/>
      <url>/post/37239/</url>
      
        <content type="html"><![CDATA[<p>主要参考<a href="https://huangzhongde.cn/istio/">https://huangzhongde.cn/istio/</a>这篇文章</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>linux系统为centos8<br>单节点master、单节点node<br>温馨提示：centos需要升级内核</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="固定IP"><a href="#固定IP" class="headerlink" title="固定IP"></a>固定IP</h3><p>虚拟机在每次重启对应的ip可能会有变化，可能需要固定IP<br>编辑<code>/etc/sysconfig/network-scripts/ifcfg-ens160</code>文件，修改内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=172.16.244.133</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.244.2</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure><h3 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"># 安装wget</span><br><span class="line">yum install -y wget</span><br><span class="line"># 替换为阿里云</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum update -y </span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable --now firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="设置本机名字"><a href="#设置本机名字" class="headerlink" title="设置本机名字"></a>设置本机名字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># master节点</span><br><span class="line">hostnamectl set-hostname k8s-m1</span><br><span class="line"># node节点</span><br><span class="line">hostnamectl set-hostname k8s-n1</span><br></pre></td></tr></table></figure><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="配置时间同步"><a href="#配置时间同步" class="headerlink" title="配置时间同步"></a>配置时间同步</h3><p>保证每个节点之前的时间是一致的，之前可能会使用<code>ntpdate</code>来做这个事情，但是已经被弃用了， 可参考<a href="https://cloud.tencent.com/developer/article/1546322">https://cloud.tencent.com/developer/article/1546322</a>，这里采用<code>chrony</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">yum -y install chrony</span><br><span class="line">systemctl enable --now chronyd</span><br></pre></td></tr></table></figure><h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/hosts下加入</span><br><span class="line">172.16.244.130 k8s-m1</span><br><span class="line">172.16.244.131 k8s-n1</span><br></pre></td></tr></table></figure><h3 id="安装常用的软件"><a href="#安装常用的软件" class="headerlink" title="安装常用的软件"></a>安装常用的软件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install net-tools nmap-ncat sysstat git ipset ipvsadm bash-completion wget unzip lrzsz lsof vim</span><br></pre></td></tr></table></figure><h3 id="节点之间相互免密登录"><a href="#节点之间相互免密登录" class="headerlink" title="节点之间相互免密登录"></a>节点之间相互免密登录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">ssh-copy-id k8s-m1</span><br><span class="line">ssh-copy-id k8s-n1</span><br></pre></td></tr></table></figure><hr><h3 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -i &#x27;/swap/s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><h3 id="加载-ipvs-模块"><a href="#加载-ipvs-模块" class="headerlink" title="加载 ipvs 模块"></a>加载 ipvs 模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/modules-load.d/k8s-ipvs.conf &lt;&lt;EOF</span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="系统参数优化-x3D"><a href="#系统参数优化-x3D" class="headerlink" title="系统参数优化&#x3D;"></a>系统参数优化&#x3D;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"># 要求iptables不对bridge的数据进行处理</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="line">net.netfilter.nf_conntrack_max = 2310720</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">fs.may_detach_mounts = 1</span><br><span class="line">fs.file-max = 52706963</span><br><span class="line">fs.nr_open = 52706963</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line"># 开启OOM</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line"># 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line">vm.swappiness=0</span><br><span class="line"># ipvs优化</span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###文件最大打开数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/security/limits.d/k8s.conf &lt;&lt;EOF</span><br><span class="line">*       soft    nproc   1048576</span><br><span class="line">*       hard    nproc   1048576</span><br><span class="line">*       soft    nofile  1048576</span><br><span class="line">*       hard    nofile  1048576</span><br><span class="line">root    soft    nproc   1048576</span><br><span class="line">root    hard    nproc   1048576</span><br><span class="line">root    soft    nofile  1048576</span><br><span class="line">root    hard    nofile  1048576</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="优化日志处理，减少磁盘io"><a href="#优化日志处理，减少磁盘io" class="headerlink" title="优化日志处理，减少磁盘io"></a>优化日志处理，减少磁盘io</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &#x27;s/^\$ModLoad imjournal/#&amp;/&#x27; /etc/rsyslog.conf</span><br><span class="line">sed -ri &#x27;s/^\$IMJournalStateFile/#&amp;/&#x27; /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">sed -ri &#x27;s/^#(DefaultLimitCORE)=/\1=100000/&#x27; /etc/systemd/system.conf</span><br><span class="line">sed -ri &#x27;s/^#(DefaultLimitNOFILE)=/\1=100000/&#x27; /etc/systemd/system.conf</span><br></pre></td></tr></table></figure><h3 id="ssh-连接优化"><a href="#ssh-连接优化" class="headerlink" title="ssh 连接优化"></a>ssh 连接优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &#x27;s/^#(UseDNS )yes/\1no/&#x27; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h3 id="禁用-swap"><a href="#禁用-swap" class="headerlink" title="禁用 swap"></a>禁用 swap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -i &#x27;/swap/s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="下载docker源"><a href="#下载docker源" class="headerlink" title="下载docker源"></a>下载docker源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="列出docker所有版本"><a href="#列出docker所有版本" class="headerlink" title="列出docker所有版本"></a>列出docker所有版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates</span><br></pre></td></tr></table></figure><h3 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce-20.10.12 docker-ce-cli-20.10.12</span><br></pre></td></tr></table></figure><h3 id="使用国内镜像源"><a href="#使用国内镜像源" class="headerlink" title="使用国内镜像源"></a>使用国内镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-file&quot;: &quot;10&quot;,</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><h2 id="安装haproxy"><a href="#安装haproxy" class="headerlink" title="安装haproxy"></a>安装haproxy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install haproxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/haproxy/haproxy.cfg &lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">log         127.0.0.1 local2</span><br><span class="line">chroot      /var/lib/haproxy</span><br><span class="line">pidfile     /var/run/haproxy.pid</span><br><span class="line">maxconn     4000</span><br><span class="line">user        haproxy</span><br><span class="line">group       haproxy</span><br><span class="line">daemon</span><br><span class="line">stats socket /var/lib/haproxy/stats</span><br><span class="line">defaults</span><br><span class="line">mode                    http</span><br><span class="line">log                     global</span><br><span class="line">option                  httplog</span><br><span class="line">option                  dontlognull</span><br><span class="line">option                  http-server-close</span><br><span class="line">option                  redispatch</span><br><span class="line">retries                 3</span><br><span class="line">timeout http-request    10s</span><br><span class="line">timeout queue           1m</span><br><span class="line">timeout connect         10s</span><br><span class="line">timeout client          1m</span><br><span class="line">timeout server          1m</span><br><span class="line">timeout http-keep-alive 10s</span><br><span class="line">timeout check           10s</span><br><span class="line">maxconn                 3000</span><br><span class="line">listen  k8s-apiserver</span><br><span class="line">  bind *:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  timeout client 1h</span><br><span class="line">  timeout connect 1h</span><br><span class="line">  log global</span><br><span class="line">  option tcplog</span><br><span class="line">  balance     roundrobin</span><br><span class="line">  server  k8s-m1 172.16.244.130:6443 check</span><br><span class="line">  server  k8s-n1 172.16.244.131:6443 check</span><br><span class="line">  acl is_websocket hdr(Upgrade) -i WebSocket</span><br><span class="line">  acl is_websocket hdr_beg(Host) -i ws</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="自启"><a href="#自启" class="headerlink" title="自启"></a>自启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now haproxy</span><br></pre></td></tr></table></figure><h2 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install keepalived</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">tee &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id 100</span><br><span class="line">    vrrp_version 2</span><br><span class="line">    vrrp_garp_master_delay 1</span><br><span class="line">    vrrp_mcast_group4 224.0.0.18</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script       &quot;/usr/bin/nc -nvz -w 2 127.0.0.1 8443&quot;</span><br><span class="line">    timeout 1</span><br><span class="line">    interval 1</span><br><span class="line">    fall 2</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance lb-vips &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 100</span><br><span class="line">    priority 150</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass blahblah</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.122.100/24 dev ens160</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="自启-1"><a href="#自启-1" class="headerlink" title="自启"></a>自启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now keepalived</span><br></pre></td></tr></table></figure><h2 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h2><h3 id="配置kubernetes源"><a href="#配置kubernetes源" class="headerlink" title="配置kubernetes源"></a>配置kubernetes源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">mv kubernetes.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="列出kubeadm所有版本"><a href="#列出kubeadm所有版本" class="headerlink" title="列出kubeadm所有版本"></a>列出kubeadm所有版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list kubeadm.x86_64 --showduplicate | sort -r</span><br></pre></td></tr></table></figure><h3 id="安装kubeadm-1"><a href="#安装kubeadm-1" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubeadm-1.22.6 kubectl-1.22.6 kubelet-1.22.6</span><br></pre></td></tr></table></figure><h3 id="初始化master"><a href="#初始化master" class="headerlink" title="初始化master"></a>初始化master</h3><p>1、在其中一个master初始化即可，其他的master、node节点通过加入的方式 </br><br>2、如果安装失败了，执行<code>kubeadm=&quot;&quot; reset</code>进行重置，然后重新安装 </br><br>3、基于配置文件的安装，可以参考<a href="https://huangzhongde.cn/istio/Chapter2/Chapter2-4.html">博客</a> </br></p><h4 id="预先拉取镜像"><a href="#预先拉取镜像" class="headerlink" title="预先拉取镜像"></a>预先拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.22.6</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.22.6 --service-cidr=10.96.0.0/12 --image-repository registry.aliyuncs.com/google_containers --apiserver-advertise-address 172.16.244.130 --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors all --upload-certs</span><br></pre></td></tr></table></figure><h4 id="配置文件移动"><a href="#配置文件移动" class="headerlink" title="配置文件移动"></a>配置文件移动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h4 id="master节点加入集群"><a href="#master节点加入集群" class="headerlink" title="master节点加入集群"></a>master节点加入集群</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.16.244.130:6443 --token s9tpc3.qm1mv0kqvoqqlg10 --discovery-token-ca-cert-hash sha256:927a191bb60fa6641f85c728752a1b07270d476ffa9d1ed2db360251cc9d0365 --control-plane --certificate-key=&quot;&quot; 790f31b796d334c39d615e43cbf8a53919a1df32fe1010b752b59842ebef90c8</span><br></pre></td></tr></table></figure><h4 id="node节点加入集群"><a href="#node节点加入集群" class="headerlink" title="node节点加入集群"></a>node节点加入集群</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.16.244.130:6443 --token s9tpc3.qm1mv0kqvoqqlg10 --discovery-token-ca-cert-hash sha256:927a191bb60fa6641f85c728752a1b07270d476ffa9d1ed2db360251cc9d0365</span><br></pre></td></tr></table></figure><h4 id="查看节点情况"><a href="#查看节点情况" class="headerlink" title="查看节点情况"></a>查看节点情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>此时<code>STATUS</code>都是<code>NotReady</code>的。待安装<code>calico</code>之后就会变成ready</p><h2 id="安装网络插件calico"><a href="#安装网络插件calico" class="headerlink" title="安装网络插件calico"></a>安装网络插件calico</h2><h3 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/archive/v3.25/manifests/calico.yaml -O</span><br></pre></td></tr></table></figure><h3 id="修改配置文件calico-yaml"><a href="#修改配置文件calico-yaml" class="headerlink" title="修改配置文件calico.yaml"></a>修改配置文件calico.yaml</h3><p>修改如下，value为安装kubeadm是传入的<code>--pod-network-cidr=10.244.0.0/16</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: CALICO_IPV4POOL_CIDR</span><br><span class="line">  value: &quot;10.244.0.0/16&quot;</span><br></pre></td></tr></table></figure><h3 id="部署calico"><a href="#部署calico" class="headerlink" title="部署calico"></a>部署calico</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><h3 id="查看节点情况-1"><a href="#查看节点情况-1" class="headerlink" title="查看节点情况"></a>查看节点情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME     STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-m1   Ready    control-plane,master   14h   v1.22.6</span><br><span class="line">k8s-n1   Ready    &lt;none&gt;                 14h   v1.22.6</span><br></pre></td></tr></table></figure><p>至此k8s算是安装完成了</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gogs安装-基于docker</title>
      <link href="/post/27050/"/>
      <url>/post/27050/</url>
      
        <content type="html"><![CDATA[<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a><strong>MYSQL</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:latest</span><br></pre></td></tr></table></figure><h3 id="降低内存"><a href="#降低内存" class="headerlink" title="降低内存"></a>降低内存</h3><ul><li>创建<code>mysqld.cnf</code>文件，内容如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">performance_schema_max_table_instances=400</span><br><span class="line">table_definition_cache=400</span><br><span class="line">table_open_cache=256</span><br><span class="line">performance_schema=off</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><ul><li>把文件拷贝进镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mysqld.cnf mysqlserver:/etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ul><li>重启镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart b0091e1609de</span><br></pre></td></tr></table></figure><h2 id="GOGS"><a href="#GOGS" class="headerlink" title="GOGS"></a><strong>GOGS</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3000:3000 -v /data/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure><p>配置页面：<br><img src="http://img.ncfl.tech/202303250003415.jpg" alt="http://img.ncfl.tech/202303250003415.jpg"></br><br>访问<code>http://IP:3000/</code>即可得到如下画面：</br><br><img src="http://img.ncfl.tech/202303250008542.jpg" alt="http://img.ncfl.tech/202303250008542.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gogs </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leanote安装-基于docker</title>
      <link href="/post/36656/"/>
      <url>/post/36656/</url>
      
        <content type="html"><![CDATA[<p>基础教程：<br><a href="https://gitee.com/monk/leanote-docker">https://gitee.com/monk/leanote-docker</a></p><h2 id="远程镜像："><a href="#远程镜像：" class="headerlink" title="远程镜像："></a><strong>远程镜像：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 9000:9000 -v /tmp/leanote/data:/home/data -v /tmp/leanote/logs:/home/logs --privileged=true ncfl/alpine-leanote:1.0.2</span><br><span class="line">docker run -itd -p 9000:9000 -v /tmp/leanote/data:/home/data -v /tmp/leanote/logs:/home/logs --privileged=true ncfl/centos-leanote:1.0.1</span><br></pre></td></tr></table></figure><h2 id="基于CENTOS"><a href="#基于CENTOS" class="headerlink" title="基于CENTOS"></a><strong>基于<code>CENTOS</code></strong></h2><p>上文中的教程，需要依赖本地的文件来进行打包docker，个人感觉不是非常好维护，故优化如下</p><p><code>Dockerfile</code>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER faker</span><br><span class="line"></span><br><span class="line"># Centos8不维护了，需要更新镜像的地址</span><br><span class="line">RUN sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-* \</span><br><span class="line">    &amp;&amp; sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-* \</span><br><span class="line">    &amp;&amp; yum update -y \</span><br><span class="line"># 安装wget</span><br><span class="line">    &amp;&amp; yum -y install wget \</span><br><span class="line"># 安装leanote</span><br><span class="line">    &amp;&amp; wget -O leanote-linux-amd64-v2.6.1.bin.tar.gz &quot;https://udomain.dl.sourceforge.net/project/leanote-bin/2.6.1/leanote-linux-amd64-v2.6.1.bin.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; tar -xvf leanote-linux-amd64-v2.6.1.bin.tar.gz -C /home \</span><br><span class="line">    &amp;&amp; rm -f leanote-linux-amd64-v2.6.1.bin.tar.gz \</span><br><span class="line"># 安装mongodb</span><br><span class="line">    &amp;&amp; wget -O mongodb-linux-x86_64-3.0.1.tgz &quot;https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz&quot; \</span><br><span class="line">    &amp;&amp; tar -xvf mongodb-linux-x86_64-3.0.1.tgz -C /home \</span><br><span class="line">    &amp;&amp; rm -f mongodb-linux-x86_64-3.0.1.tgz \</span><br><span class="line"># 清空缓存，较小docker镜像的大小</span><br><span class="line">    &amp;&amp; yum clean all \</span><br><span class="line"># 构建启动程序，用户启动leanote</span><br><span class="line">    &amp;&amp; echo &quot;#!/bin/bash&quot; &gt; /home/run.sh \</span><br><span class="line"># 启动mongodb</span><br><span class="line">    &amp;&amp; echo &quot;/home/mongodb-linux-x86_64-3.0.1/bin/mongod --dbpath=/home/data --fork --logpath=/home/logs/mongod.log&quot; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; echo &quot;/home/mongodb-linux-x86_64-3.0.1/bin/mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/&quot; &gt;&gt; /home/run.sh \</span><br><span class="line"># 启动leanote</span><br><span class="line">    &amp;&amp; echo &quot;nohup sh /home/leanote/bin/run.sh &gt; /home/logs/leanote.log &amp;&quot; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f /home/logs/leanote.log&quot; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; chmod 777 /home/run.sh</span><br><span class="line"></span><br><span class="line"># 数据卷挂载，将镜像内数据、日志挂载到本地</span><br><span class="line">VOLUME [/home/data,/home/logs]</span><br><span class="line"></span><br><span class="line"># 对外暴露的接口</span><br><span class="line">EXPOSE 9000</span><br><span class="line"></span><br><span class="line"># 启动后执行，启动leanote</span><br><span class="line">CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;/home/run.sh&quot;]</span><br></pre></td></tr></table></figure><p>打包docker镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos-leanote:1.0.1 .</span><br></pre></td></tr></table></figure><p>镜像上传docker仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 打TAG</span><br><span class="line">docker tag centos-leanote:1.0.1 ncfl/centos-leanote:1.0.1</span><br><span class="line"># 上传</span><br><span class="line">docker push ncfl/centos-leanote:1.0.1</span><br><span class="line"></span><br><span class="line"># 或者备份到其他地方</span><br><span class="line">docker save -o centos-leanote.tar centos-leanote:1.0.1</span><br><span class="line">docker load -i centos-leanote.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 9000:9000 -v /tmp/leanote/data:/home/data -v /tmp/leanote/logs:/home/logs --privileged=true centos-leanote:1.0.1</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:9000/</code>页面得到如下画面<br><img src="http://img.ncfl.tech/202303191721324.jpg" alt="http://img.ncfl.tech/202303191721324.jpg"></p><h2 id="基于alpine"><a href="#基于alpine" class="headerlink" title="基于alpine"></a><strong>基于<code>alpine</code></strong></h2><p>基于<code>Centos</code>生成的镜像比较大，如上有700M的大小，太大了，故基于<code>alpine</code>可以制作更小的镜像</p><p><code>Dockerfile</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">MAINTAINER faker</span><br><span class="line"></span><br><span class="line"># Alpine使用的c库使用mini版的musl libc与其他Linux发行版使用的gnu libc不一样，执行使之兼容</span><br><span class="line">RUN mkdir /lib64 &amp;&amp; ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 \</span><br><span class="line"># 下载leanote</span><br><span class="line">    &amp;&amp; wget -O leanote-linux-amd64-v2.6.1.bin.tar.gz &quot;https://udomain.dl.sourceforge.net/project/leanote-bin/2.6.1/leanote-linux-amd64-v2.6.1.bin.tar.gz&quot; \</span><br><span class="line">    &amp;&amp; tar -xvf leanote-linux-amd64-v2.6.1.bin.tar.gz -C /home \</span><br><span class="line">    &amp;&amp; rm -f leanote-linux-amd64-v2.6.1.bin.tar.gz \</span><br><span class="line">    &amp;&amp; echo &#x27;http://dl-cdn.alpinelinux.org/alpine/v3.6/main&#x27; &gt;&gt; /etc/apk/repositories \</span><br><span class="line">    &amp;&amp; echo &#x27;http://dl-cdn.alpinelinux.org/alpine/v3.6/community&#x27; &gt;&gt; /etc/apk/repositories \</span><br><span class="line"># 更新镜像    </span><br><span class="line">    &amp;&amp; apk update \</span><br><span class="line"># 安装mongodb，主要是mongod</span><br><span class="line">    &amp;&amp; apk add mongodb \</span><br><span class="line"># 安装mongodb工具，主要是mongorestore</span><br><span class="line">    &amp;&amp; apk add mongodb-tools \</span><br><span class="line"># 构建启动程序，用户启动leanote</span><br><span class="line">    &amp;&amp; echo &#x27;#!/bin/bash&#x27; &gt; /home/run.sh \</span><br><span class="line"># 启动mongodb    </span><br><span class="line">    &amp;&amp; echo &#x27;mongod --dbpath=/home/data --fork --logpath=/home/logs/mongod.log&#x27; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; echo &#x27;mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/&#x27; &gt;&gt; /home/run.sh \</span><br><span class="line"># 启动leanote    </span><br><span class="line">    &amp;&amp; echo &#x27;nohup sh /home/leanote/bin/run.sh &gt; /home/logs/leanote.log &amp;&#x27; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; echo &#x27;tail -f /home/logs/leanote.log&#x27; &gt;&gt; /home/run.sh \</span><br><span class="line">    &amp;&amp; chmod 777 /home/run.sh</span><br><span class="line"></span><br><span class="line">VOLUME [/home/data,/home/logs]</span><br><span class="line"></span><br><span class="line">EXPOSE 9000</span><br><span class="line"></span><br><span class="line">CMD sh /home/run.sh</span><br></pre></td></tr></table></figure><p>其他的步骤于基于<code>Centos</code>一样，这也是<code>Docker</code>的好处</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> leanote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装使用</title>
      <link href="/post/33694/"/>
      <url>/post/33694/</url>
      
        <content type="html"><![CDATA[<h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a><strong>1、准备工作</strong></h2><p>事前需要安装一些东西：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">yum install -y make cmake gcc gcc-c++  </span><br></pre></td></tr></table></figure><p>一般来说除了最后一个<code>gcc</code>可能需要安装，其他的一般来说linux都已经安装好了，起码我的linux已经安装好了。</p><h2 id="2、安装nginx"><a href="#2、安装nginx" class="headerlink" title="2、安装nginx"></a><strong>2、安装nginx</strong></h2><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="3、运行nginx"><a href="#3、运行nginx" class="headerlink" title="3、运行nginx"></a><strong>3、运行nginx</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 启动nginx</span><br><span class="line">nginx </span><br><span class="line"># 停止nginx</span><br><span class="line">nginx -s stop</span><br><span class="line"># 校验配置文件是否有问题</span><br><span class="line">nginx -t</span><br><span class="line"># 重新加载配置文件</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>启动之后，访问<code>http://ip:80</code>即可（记得关闭防火墙或者配置白名单），默认是80端口，可在配置文件中修改。看到下面则表示nginx安装成功。</p><p><img src="https://img.ncfl.tech/1682306830784.jpg" alt="https://img.ncfl.tech/1682306830784.jpg"></p><h2 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a><strong>4、配置</strong></h2><h3 id="web站点配置"><a href="#web站点配置" class="headerlink" title="web站点配置"></a>web站点配置</h3><p>配置信息主要存储在下面文件中，配置信息还是比较好懂的：</p><blockquote><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p></blockquote><p>这里说一下<code>server&#123;&#125;</code>这个节点，每一个<code>server&#123;&#125;</code>节点代表一个web站点。</p><p>笔者在本人配置信息如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen         8888;</span><br><span class="line">    server_name    localhost_tmp;</span><br><span class="line">    location / &#123;</span><br><span class="line">          root   html;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即访问<code>http://ip:8088</code>或<code>http://ip:8888</code>都可以进入到index.html页面中，即是上图中的界面。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>这里只打开一个<code>server&#123;&#125;</code>，并将<code>server&#123;&#125;</code>修改成如下，这里的<code>localhost:8080</code>指向的是Tomcat的主页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream  www.nginx.com  </span><br><span class="line">&#123;    </span><br><span class="line">    server   localhost:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.nginx.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reload</code>一些配置文件之后，访问<code>http://ip:8088</code>便会跳转到<code>localhost:8080</code>这个新的页面上，但是地址栏中的地址并不会发生改变，从而实现代理。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream  www.nginx.com  </span><br><span class="line">&#123;    </span><br><span class="line">    server   localhost:8080   weight=1;</span><br><span class="line">    server   IP:port          weight=10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.nginx.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置之后，访问<code>http://ip:8088</code>便会分别跳转至<code>localhost:8080</code>和<code>IP:port</code>这两个地址上，跳转到比例为1:10，<code>weight</code>值越大，被分配到的概率越大。 </p><h3 id="http泛域名转发"><a href="#http泛域名转发" class="headerlink" title="http泛域名转发"></a>http泛域名转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name *.ncfl.tech;</span><br><span class="line">    root         /usr/share/nginx/html; </span><br><span class="line"></span><br><span class="line">    if ($http_host ~* &quot;^(.*?)\.ncfl\.tech$&quot;) &#123;</span><br><span class="line">        set $domain $1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        if ($domain = &quot;leanote&quot;) &#123;</span><br><span class="line">            proxy_pass http://localhost:9000;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($domain = &quot;gogs&quot;) &#123;</span><br><span class="line">            proxy_pass http://localhost:3000;</span><br><span class="line">        &#125;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="https引用证书"><a href="#https引用证书" class="headerlink" title="https引用证书"></a>https引用证书</h3><p>采用的是腾讯云的证书，去<a href="https://console.cloud.tencent.com/ssl">https://console.cloud.tencent.com/ssl</a>申请免费的证书，免费的证书不支持泛域名<br>相关配置信息参考<a href="https://console.cloud.tencent.com/ssl">https://console.cloud.tencent.com/ssl</a>我这里赘述一下：</p><p>1、腾讯云控制台上申请免费证书，填写相关信息<br><img src="https://img.ncfl.tech/1682307885485.jpg" alt="https://img.ncfl.tech/1682307885485.jpg"><br>2、下载证书，并将下载下来的证书中的<code>crt</code>和<code>key</code>上传至服务器<code>etc/nginx</code>路径，即nginx安装路径<br><img src="https://img.ncfl.tech/1682308034491.jpg" alt="https://img.ncfl.tech/1682308034491.jpg"><br>3、在<code>nginx.conf</code>中配置https，并引入对应证书文件，同时把http重定向到https</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name *.ncfl.tech;</span><br><span class="line">return 301 https://$host$request_uri; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       listen       443 ssl http2 default_server;</span><br><span class="line">       listen       [::]:443 ssl http2 default_server;</span><br><span class="line">       server_name  leanote.ncfl.tech;</span><br><span class="line">       root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">       ssl_certificate &quot;/etc/nginx/leanote.ncfl.tech_bundle.crt&quot;;</span><br><span class="line">       ssl_certificate_key &quot;/etc/nginx/leanote.ncfl.tech.key&quot;;</span><br><span class="line">       ssl_session_cache shared:SSL:1m;</span><br><span class="line">       ssl_session_timeout  10m;</span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">       ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">       include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://localhost:9000;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="不同域名配置不同证书"><a href="#不同域名配置不同证书" class="headerlink" title="不同域名配置不同证书"></a>不同域名配置不同证书</h3><p>需要去腾讯云上申请多个免费证书，配置多个server，在不同的域名下指定不同的证书，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name *.ncfl.tech;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl  http2 default_server;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">        server_name  *.ncfl.tech;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/ncfl.tech_bundle.crt&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/ncfl.tech.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /var/www/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        listen       [::]:443 ssl;</span><br><span class="line">        server_name  leanote.ncfl.tech;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/leanote.ncfl.tech_bundle.crt&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/leanote.ncfl.tech.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:9000;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        listen       [::]:443 ssl;</span><br><span class="line">        server_name  gogs.ncfl.tech;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/gogs.ncfl.tech_bundle.crt&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/gogs.ncfl.tech.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:3000;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        listen       [::]:443 ssl;</span><br><span class="line">        server_name  blog.ncfl.tech;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/blog.ncfl.tech_bundle.crt&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/blog.ncfl.tech.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:4000;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO火焰图</title>
      <link href="/post/32122/"/>
      <url>/post/32122/</url>
      
        <content type="html"><![CDATA[<p>教程：<br>最基础教程：<a href="https://zhuanlan.zhihu.com/p/71529062">https://zhuanlan.zhihu.com/p/71529062</a></p><h2 id="火焰图简述"><a href="#火焰图简述" class="headerlink" title="火焰图简述"></a><em><strong>火焰图简述</strong></em></h2><p>火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。</p><h2 id="HTTP-CPU火焰图"><a href="#HTTP-CPU火焰图" class="headerlink" title="HTTP_CPU火焰图"></a><strong>HTTP_CPU火焰图</strong></h2><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">_ &quot;net/http/pprof&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// main</span><br><span class="line">// 指定pprof输出位置：export PPROF_TMPDIR=&quot;pprof/&quot;</span><br><span class="line">// 生成pprof分析文件：go tool pprof -seconds 10 http://127.0.0.1:8080/debug/pprof/profile</span><br><span class="line">func main() &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">LocalTz()</span><br><span class="line"></span><br><span class="line">doSomething([]byte(`&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3&#125;`))</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;start api server...&quot;)</span><br><span class="line">panic(http.ListenAndServe(&quot;:8080&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doSomething(s []byte) &#123;</span><br><span class="line">var m map[string]interface&#123;&#125;</span><br><span class="line">err := json.Unmarshal(s, &amp;m)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s1 := make([]string, 0)</span><br><span class="line">s2 := &quot;&quot;</span><br><span class="line">for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">s1 = append(s1, string(s))</span><br><span class="line">s2 += string(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func LocalTz() *time.Location &#123;</span><br><span class="line">tz, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;)</span><br><span class="line">return tz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>运行代码，直接访问<code>http://localhost:8080/debug/pprof/</code>,即可查到查看程序运行相关信息。</li><li><code>export PPROF_TMPDIR=&quot;pprof/&quot;</code>指定pprof文件保存的位置，不设置则保存默认位置，不便于后续维护开发</li><li><code>go tool pprof -seconds 10 http://127.0.0.1:8080/debug/pprof/profile</code>采集程序运行10s中的CPU信息，并生成pprof文件，文件名大致如<code>pprof.samples.cpu.001.pb.gz</code></li><li><code>go tool pprof -http=:8081 ~/pprof/pprof.samples.cpu.001.pb.gz</code>生成火焰图</li></ol><p>得到的火焰图如下：</p><ul><li><p>默认是图状火焰图：<br>可以在图中看到每个方法的耗时和占比<br>比如<code>doSomething</code>耗时<code>0.5s</code>，耗时占比<code>3.00%</code>，<code>LocakTz</code>耗时<code>6.64s</code>，耗时占比<code>39.81%</code>，所以如果要优化的话就是优化<code>LocakTz</code>方法<br><img src="https://img.ncfl.tech/202302192110053.jpg"></p></li><li><p>点击<code>VIEW</code>中可以切换视图，如<code>Falme Graph</code>，可以看到如下的图，可以从另外一个角度看到每个方法的耗时比例<br><img src="https://img.ncfl.tech/202302192120642.jpg"></p></li><li><p>点击<code>VIEW</code>中可以切换视图，如<code>Source</code>，可以看到如下图，从源码角度看到每个方法的耗时和比例<br><img src="https://img.ncfl.tech/202302192124273.jpg"></p></li><li><p>点击<code>VIEW</code>中可以切换视图，<code>TOP</code>中的含义这里做一下解释</p><ul><li>flat&#x2F;flat%：分别表示在当前层级 CPU 的占用时间和百分比。</li><li>cum&#x2F;cum%：分别表示截止到当前层级累积的 CPU 时间和占比。</li><li>sum%：所有层级的 CPU ，从小到大一直累积到100%</li><li>name：对应数据的方法路径</li></ul></li></ul><h2 id="HTTP-内存火焰图"><a href="#HTTP-内存火焰图" class="headerlink" title="HTTP_内存火焰图"></a><strong>HTTP_内存火焰图</strong></h2><p>代码和步骤均可参考上文内容，仅仅是再生成pprof文件的时候修改下参数即可</p><ul><li>-alloc_space -alloc_objects分配的空间</li><li>-inuse_space -inuse_objects 当前占用的空间，一般这个价值更大</li></ul><p>如:<code>go tool pprof -seconds 10  -inuse_space http://127.0.0.1:8080/debug/pprof/heap</code>对应的火焰图如下，这个case内存不断在分配和回收，所以看到的图比较简单。<br><img src="https://img.ncfl.tech/202302192208958.jpg"></p><h2 id="特定方法生成火焰图"><a href="#特定方法生成火焰图" class="headerlink" title="特定方法生成火焰图"></a><strong>特定方法生成火焰图</strong></h2><p>上文是针对<code>http</code>服务的火焰图，采用的是<code>&quot;net/http/pprof&quot;</code>，如果要对单纯某个方法看看火焰图的数据，可以采用一下代码方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;runtime/pprof&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">f, _ := os.OpenFile(&quot;cpu.pprof&quot;, os.O_CREATE|os.O_RDWR, 0644)</span><br><span class="line">defer f.Close()</span><br><span class="line">pprof.StartCPUProfile(f)</span><br><span class="line">defer pprof.StopCPUProfile()</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">LocalTz()</span><br><span class="line">doSomething([]byte(`&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3&#125;`))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doSomething(s []byte) &#123;</span><br><span class="line">var m map[string]interface&#123;&#125;</span><br><span class="line">err := json.Unmarshal(s, &amp;m)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s1 := make([]string, 0)</span><br><span class="line">s2 := &quot;&quot;</span><br><span class="line">for i := 0; i &lt; 100000; i++ &#123; // 次数不能太少，太少了看不出来</span><br><span class="line">s1 = append(s1, string(s))</span><br><span class="line">s2 += string(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func LocalTz() *time.Location &#123;</span><br><span class="line">tz, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;)</span><br><span class="line">return tz</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行上述代码会生成<code>cpu.pprof</code>文件，运行<code>go tool pprof -http=:8081 cpu.pprof</code>查看报告如下，与上文中的基本一致。<br><img src="https://img.ncfl.tech/202302192236719.jpg"></p><p>查看空间占用的火焰图代码类似，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;runtime/pprof&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">f, _ := os.OpenFile(&quot;mem.pprof&quot;, os.O_CREATE|os.O_RDWR, 0644)</span><br><span class="line">defer f.Close()</span><br><span class="line">pprof.WriteHeapProfile(f) // 只有这里修改了</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">LocalTz()</span><br><span class="line">doSomething([]byte(`&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3&#125;`))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doSomething(s []byte) &#123;</span><br><span class="line">var m map[string]interface&#123;&#125;</span><br><span class="line">err := json.Unmarshal(s, &amp;m)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s1 := make([]string, 0)</span><br><span class="line">s2 := &quot;&quot;</span><br><span class="line">for i := 0; i &lt; 100000; i++ &#123; // 次数不能太少，太少了看不出来</span><br><span class="line">s1 = append(s1, string(s))</span><br><span class="line">s2 += string(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func LocalTz() *time.Location &#123;</span><br><span class="line">tz, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;)</span><br><span class="line">return tz</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>火焰图如下：<br><img src="https://img.ncfl.tech/202302192243274.jpg"></p><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS:"></a><strong>TIPS:</strong></h2><ul><li>在benchmark中生成火焰图，参数如下：<ul><li>cpuprofile&#x3D;文件名</li><li>memprofile&#x3D;文件名</li><li>memprofilerate&#x3D;N 调整记录速率为原来的 1&#x2F;N。</li><li>blockprofile&#x3D;文件名<br>示例：<br><code>go test -bench . -cpuprofile=cpu.prof</code><br><code>go test -bench . -memprofile=./mem.prof</code></li></ul></li><li>火焰图一般结合<code>wrk</code>压测组件一起使用，不压测怎么知道接口可用性，使用方法自行百度，比较简单</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL-GO（3）graphql-go简介</title>
      <link href="/post/23091/"/>
      <url>/post/23091/</url>
      
        <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><strong>1、概述</strong></h2><p><code>Graphql-go</code>是另外一个基于<code>GO</code>语言实现的graphql服务器框架。<br>相较于<a href="https://github.com/99designs/gqlgen">gqlgen</a>，<code>Graphql-go</code>需要自己定义每个graphql字段的类型，含义，解析等操作，由于很多细节都需要自己的实现，所以更好理解，上手难度较低，但是相对而言代码量就多了很多。</p><p>代码库：<a href="https://github.com/graphql-go/graphql">https://github.com/graphql-go/graphql</a><br>文档：<a href="https://pkg.go.dev/github.com/graphql-go/graphql#section-readme">https://pkg.go.dev/github.com/graphql-go/graphql#section-readme</a><br>入门示例：<a href="https://pkg.go.dev/github.com/graphql-go/graphql#section-readme">https://pkg.go.dev/github.com/graphql-go/graphql#section-readme</a><br>本文相关代码：<a href="https://github.com/ncfl/graphql">https://github.com/ncfl/graphql</a></p><h2 id="2、简单示例"><a href="#2、简单示例" class="headerlink" title="2、简单示例"></a><strong>2、简单示例</strong></h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloworld</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Schema 定义查询的Schema</span></span><br><span class="line">fields := graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;hello&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(p)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;world&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">rootQuery := graphql.ObjectConfig&#123;Name: <span class="string">&quot;RootQuery&quot;</span>, Fields: fields&#125;</span><br><span class="line">schemaConfig := graphql.SchemaConfig&#123;Query: graphql.NewObject(rootQuery)&#125;</span><br><span class="line">schema, err := graphql.NewSchema(schemaConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to create new schema, error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query 开始执行查询</span></span><br><span class="line">query := <span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">params := graphql.Params&#123;Schema: schema, RequestString: query&#125;</span><br><span class="line">r := graphql.Do(params)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r.Errors) &gt; <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to execute graphql operation, errors: %+v&quot;</span>, r.Errors)</span><br><span class="line">&#125;</span><br><span class="line">rJSON, _ := json.Marshal(r)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s \n&quot;</span>, rJSON) <span class="comment">// &#123;&quot;data&quot;:&#123;&quot;hello&quot;:&quot;world&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上文的代码，可见，代码定义了查询的字段名为<code>hello</code>，类型是String，解析的时候返回<code>world</code>。</p><p>当然<code>Graphql-go</code>自身也有提供可视化的查询界面。代码如下</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/graphql-go/graphql&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/graphql-go/handler&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tutorial <span class="keyword">struct</span> &#123;</span><br><span class="line">ID       <span class="type">int</span></span><br><span class="line">Title    <span class="type">string</span></span><br><span class="line">Author   Author</span><br><span class="line">Comments []Comment</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">Name      <span class="type">string</span></span><br><span class="line">Tutorials []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Comment <span class="keyword">struct</span> &#123;</span><br><span class="line">Body <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">populate</span><span class="params">()</span></span> []Tutorial &#123;</span><br><span class="line">author := &amp;Author&#123;Name: <span class="string">&quot;Elliot Forbes&quot;</span>, Tutorials: []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;</span><br><span class="line">tutorial := Tutorial&#123;</span><br><span class="line">ID:     <span class="number">1</span>,</span><br><span class="line">Title:  <span class="string">&quot;Go GraphQL Tutorial&quot;</span>,</span><br><span class="line">Author: *author,</span><br><span class="line">Comments: []Comment&#123;</span><br><span class="line">&#123;Body: <span class="string">&quot;First Comment&quot;</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">tutorial2 := Tutorial&#123;</span><br><span class="line">ID:     <span class="number">2</span>,</span><br><span class="line">Title:  <span class="string">&quot;Go GraphQL Tutorial - Part 2&quot;</span>,</span><br><span class="line">Author: *author,</span><br><span class="line">Comments: []Comment&#123;</span><br><span class="line">&#123;Body: <span class="string">&quot;Second Comment&quot;</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tutorials []Tutorial</span><br><span class="line">tutorials = <span class="built_in">append</span>(tutorials, tutorial)</span><br><span class="line">tutorials = <span class="built_in">append</span>(tutorials, tutorial2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tutorials</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> authorType = graphql.NewObject(</span><br><span class="line">graphql.ObjectConfig&#123;</span><br><span class="line">Name: <span class="string">&quot;Author&quot;</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;Name&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;Tutorials&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.NewList(graphql.Int),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commentType = graphql.NewObject(</span><br><span class="line">graphql.ObjectConfig&#123;</span><br><span class="line">Name: <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;body&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tutorialType = graphql.NewObject(</span><br><span class="line">graphql.ObjectConfig&#123;</span><br><span class="line">Name: <span class="string">&quot;Tutorial&quot;</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.Int,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;title&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: authorType,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;comments&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.NewList(commentType),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">data</span><span class="params">()</span></span> graphql.Schema &#123;</span><br><span class="line"></span><br><span class="line">tutorials := populate()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Schema</span></span><br><span class="line">fields := graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;tutorial&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        tutorialType,</span><br><span class="line">Description: <span class="string">&quot;Get Tutorial By ID&quot;</span>,</span><br><span class="line">Args: graphql.FieldConfigArgument&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: &amp;graphql.ArgumentConfig&#123;</span><br><span class="line">Type: graphql.Int,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">id, ok := p.Args[<span class="string">&quot;id&quot;</span>].(<span class="type">int</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// Find tutorial</span></span><br><span class="line"><span class="keyword">for</span> _, tutorial := <span class="keyword">range</span> tutorials &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="type">int</span>(tutorial.ID) == id &#123;</span><br><span class="line"><span class="keyword">return</span> tutorial, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;list&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        graphql.NewList(tutorialType),</span><br><span class="line">Description: <span class="string">&quot;Get Tutorial List&quot;</span>,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(params graphql.ResolveParams)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> tutorials, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">rootQuery := graphql.ObjectConfig&#123;Name: <span class="string">&quot;RootQuery&quot;</span>, Fields: fields&#125;</span><br><span class="line">schemaConfig := graphql.SchemaConfig&#123;Query: graphql.NewObject(rootQuery)&#125;</span><br><span class="line">schema, err := graphql.NewSchema(schemaConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to create new schema, error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> schema</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">schema := data()</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, handler.New(&amp;handler.Config&#123;</span><br><span class="line">Schema:     &amp;schema,</span><br><span class="line">Pretty:     <span class="literal">true</span>,</span><br><span class="line">GraphiQL:   <span class="literal">true</span>,</span><br><span class="line">Playground: <span class="literal">true</span>,</span><br><span class="line">&#125;))</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8080/</code>，对应的界面如下：<br><img src="https://img.ncfl.tech/1632126458595_2.png"></p><h2 id="3、starwar星球大战"><a href="#3、starwar星球大战" class="headerlink" title="3、starwar星球大战"></a><strong>3、starwar星球大战</strong></h2><p>原生库完成的星球大战的代码非常不完成，很多功能没有实现，故自己实现了一个比较完成的星球大战，代码可见<a href="https://github.com/ncfl/graphql/tree/main/graphql-starwar">https://github.com/ncfl/graphql/tree/main/graphql-starwar</a><br>星球大战是个很不错的示例，几乎包括了需要用到的所有的细节：</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">episodeEnum = graphql.NewEnum(graphql.EnumConfig&#123;</span><br><span class="line">Name:        <span class="string">&quot;Episode&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;One of the films in the Star Wars Trilogy&quot;</span>,</span><br><span class="line">Values: graphql.EnumValueConfigMap&#123;</span><br><span class="line"><span class="string">&quot;NEWHOPE&quot;</span>: &amp;graphql.EnumValueConfig&#123;</span><br><span class="line">Value:       model.EpisodeNewhope,</span><br><span class="line">Description: <span class="string">&quot;Released in 1977.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;EMPIRE&quot;</span>: &amp;graphql.EnumValueConfig&#123;</span><br><span class="line">Value:       model.EpisodeEmpire,</span><br><span class="line">Description: <span class="string">&quot;Released in 1980.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;JEDI&quot;</span>: &amp;graphql.EnumValueConfig&#123;</span><br><span class="line">Value:       model.EpisodeJedi,</span><br><span class="line">Description: <span class="string">&quot;Released in 1983.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">characterInterface = graphql.NewInterface(graphql.InterfaceConfig&#123;</span><br><span class="line">Name:        <span class="string">&quot;Character&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;A character in the Star Wars Trilogy&quot;</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        graphql.NewNonNull(graphql.ID),</span><br><span class="line">Description: <span class="string">&quot;The id of the character.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        graphql.NewNonNull(graphql.String),</span><br><span class="line">Description: <span class="string">&quot;The name of the character.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;appearsIn&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        graphql.NewNonNull(graphql.NewList(graphql.NewNonNull(episodeEnum))),</span><br><span class="line">Description: <span class="string">&quot;Which movies they appear in.&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ResolveType: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveTypeParams)</span></span> *graphql.Object &#123;</span><br><span class="line"><span class="keyword">if</span> character, ok := p.Value.(*model.Human); ok &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := data.Humans[character.ID]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> humanType</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> character, ok := p.Value.(*model.Droid); ok &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := data.Droids[character.ID]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> droidType</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="普通结构体"><a href="#普通结构体" class="headerlink" title="普通结构体"></a>普通结构体</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">friendsEdgeType = graphql.NewObject(graphql.ObjectConfig&#123;</span><br><span class="line">Name:        <span class="string">&quot;FriendsEdge&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;An edge object for a character&#x27;s friends&quot;</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">&quot;cursor&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        graphql.NewNonNull(graphql.ID),</span><br><span class="line">Description: <span class="string">&quot;A cursor used for pagination&quot;</span>,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> human, ok := p.Source.(*model.FriendsEdge); ok &#123;</span><br><span class="line"><span class="keyword">return</span> human.Cursor, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;node&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type:        characterInterface,</span><br><span class="line">Description: <span class="string">&quot;The character represented by this friendship edge&quot;</span>,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> human, ok := p.Source.(*model.FriendsEdge); ok &#123;</span><br><span class="line"><span class="keyword">return</span> human.Node, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">searchResultUnion = graphql.NewUnion(graphql.UnionConfig&#123;</span><br><span class="line">Name:        <span class="string">&quot;SearchResult&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;search result&quot;</span>,</span><br><span class="line">Types: []*graphql.Object&#123;</span><br><span class="line">humanType,</span><br><span class="line">droidType,</span><br><span class="line">starShipType,</span><br><span class="line">&#125;,</span><br><span class="line">ResolveType: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveTypeParams)</span></span> *graphql.Object &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := p.Value.(*model.Human); ok &#123;</span><br><span class="line"><span class="keyword">return</span> humanType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, ok := p.Value.(*model.Droid); ok &#123;</span><br><span class="line"><span class="keyword">return</span> droidType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, ok := p.Value.(*model.Starship); ok &#123;</span><br><span class="line"><span class="keyword">return</span> starShipType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="输入类型"><a href="#输入类型" class="headerlink" title="输入类型"></a>输入类型</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">reviewInputType = graphql.NewInputObject(graphql.InputObjectConfig&#123;</span><br><span class="line">Name:        <span class="string">&quot;ReviewInput&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;The input object sent when someone is creating a new review&quot;</span>,</span><br><span class="line">Fields: graphql.InputObjectConfigFieldMap&#123;</span><br><span class="line"><span class="string">&quot;stars&quot;</span>: &amp;graphql.InputObjectFieldConfig&#123;</span><br><span class="line">Type:        graphql.NewNonNull(graphql.Int),</span><br><span class="line">Description: <span class="string">&quot;The number of stars this review gave, 1-5&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;commentary&quot;</span>: &amp;graphql.InputObjectFieldConfig&#123;</span><br><span class="line">Type:        graphql.String,</span><br><span class="line">Description: <span class="string">&quot;Comment about the movie&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;time&quot;</span>: &amp;graphql.InputObjectFieldConfig&#123;</span><br><span class="line">Type:        graphql.DateTime,</span><br><span class="line">Description: <span class="string">&quot;when the review was posted&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>详见<a href="https://github.com/graphql-go/graphql/blob/f02a1c961028d3ba7ac6bb22eaa09b31a2cb53dd/scalars.go#L557"><code>graphql.DateTime</code></a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DateTime = NewScalar(ScalarConfig&#123;</span><br><span class="line">Name: <span class="string">&quot;DateTime&quot;</span>,</span><br><span class="line">Description: <span class="string">&quot;The `DateTime` scalar type represents a DateTime.&quot;</span> +</span><br><span class="line"><span class="string">&quot; The DateTime is serialized as an RFC 3339 quoted string&quot;</span>,</span><br><span class="line">Serialize:  serializeDateTime,</span><br><span class="line">ParseValue: unserializeDateTime,</span><br><span class="line">ParseLiteral: <span class="function"><span class="keyword">func</span><span class="params">(valueAST ast.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">switch</span> valueAST := valueAST.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *ast.StringValue:</span><br><span class="line"><span class="keyword">return</span> unserializeDateTime(valueAST.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>定义完上面的结构体之后，将结构体根据逻辑拼接到<code>Query</code>和<code>Mutation</code>之后，便可以启动代码。完成的代码可见上面代码库<br>试一下执行结果：<br><img src="https://img.ncfl.tech/20210920165701.png"></p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a><strong>4、总结</strong></h2><ul><li>比较好上手的框架，所有细节都自己实现，可以清晰看到每一步的变化，有助于进一步了解<code>graphql</code>特性</li><li>代码量较大，类型，定义，解析等操作都需要自己动手，导致开发量较大</li><li>支持的功能和特性有限，相对于<code>gqlgen</code>较轻量较简单</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL-GO（2）gqlgen简介</title>
      <link href="/post/18347/"/>
      <url>/post/18347/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h1><img src="https://user-images.githubusercontent.com/46195831/89802919-0bb8ef00-db2a-11ea-8ba4-88e7a58b2fd2.png" alt="图片替换文本" width="300" height="300" align="bottom"/><p><code>gqlgen</code>是一个基于schema文件构建的GO语言<code>GraphQL</code>服务器<br></br><br>虽然<code>gqlgen</code>的star不是最多的，但是相较于<code>graphql-go</code>、<code>graph-gophers/graphql-go</code>，个人觉得<code>gqlgen</code>是提供功能最全的，还支持文件的<a href="https://gqlgen.com/reference/file-upload/">上传</a>等功能(虽然感觉这东西还不如用rest方便)。目前从我周边了解到，很多项目都从<code>graphql-go</code>转移到使用<code>gqlgen</code></p></br>git仓库：</br>[https://github.com/99designs/gqlgen](https://github.com/99designs/gqlgen)</br>文档：</br>[https://pkg.go.dev/github.com/99designs/gqlgen](https://pkg.go.dev/github.com/99designs/gqlgen) </br>[https://gqlgen.com/](https://gqlgen.com/)</br>入门示例：</br>[https://gqlgen.com/getting-started/](https://gqlgen.com/getting-started/)</br>本文相关代码：</br>[https://github.com/ncfl/graphql](https://github.com/ncfl/graphql)<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a><strong>简单示例</strong></h1><p>1、下载安装<code>gqlgen</code>工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/99designs/gqlgen</span><br></pre></td></tr></table></figure><p>2、初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 首先项目需要是一个go mod管理的的项目</span><br><span class="line">go mod init graphql</span><br><span class="line"># 初始化为gqlgen项目，下面命令二选一</span><br><span class="line"># init对应的源码为https://github.com/99designs/gqlgen/blob/master/cmd/init.go，感兴趣的同学可以自行去看看</span><br><span class="line">gqlgen init</span><br><span class="line">go run github.com/99designs/gqlgen init</span><br></pre></td></tr></table></figure><p>3、看下目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── gqlgen.yml               - gql配置文件，用以自动生成代码</span><br><span class="line">├── graph</span><br><span class="line">│   ├── generated            - 自动生成的运行代码</span><br><span class="line">│   │   └── generated.go</span><br><span class="line">│   ├── model                - 自动生成的结构体</span><br><span class="line">│   │   └── models_gen.go</span><br><span class="line">│   ├── resolver.go          - 解析类，里面其实就是一个结构体</span><br><span class="line">│   ├── schema.graphqls      - schema.graphqls</span><br><span class="line">│   └── schema.resolvers.go  - 解析类文件，也是主要的开发地方</span><br><span class="line">└── server.go                - 可执行文件</span><br></pre></td></tr></table></figure><p>4、按照提示运行一下<code>server.go</code>，访问一下<code>http://localhost:8080/</code>看一下效果如下，当然暂时还不能运行。<br>下面的这个界面是用基于<a href="https://github.com/graphql/graphql-playground">https://github.com/graphql/graphql-playground</a>这个生成的。有空可以了解一下。<br><img src="https://img.ncfl.tech/20210813201202.png"><br>5、修改一下文件，让<code>GraphQL</code>的服务器可以运行。修改如下，然后再运行一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改`schema.resolvers.go`文件如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地缓存</span></span><br><span class="line"><span class="keyword">var</span> todos []*model.Todo</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateTodo 添加数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *mutationResolver)</span></span> CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, <span class="type">error</span>) &#123;</span><br><span class="line">todo := &amp;model.Todo&#123;</span><br><span class="line">Text: input.Text,</span><br><span class="line">ID:   fmt.Sprintf(<span class="string">&quot;T%d&quot;</span>, rand.Int()),</span><br><span class="line">User: &amp;model.User&#123;ID: input.UserID, Name: <span class="string">&quot;user &quot;</span> + input.UserID&#125;,</span><br><span class="line">&#125;</span><br><span class="line">todos = <span class="built_in">append</span>(todos, todo)</span><br><span class="line"><span class="keyword">return</span> todo, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Todos 查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span></span> Todos(ctx context.Context) ([]*model.Todo, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> todos, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、在界面上输入如下，先运行<code>mutation</code>添加数据，在运行<code>query</code>查询数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your query or mutation here</span></span><br><span class="line"><span class="attr">mutation</span> <span class="string">createTodo &#123;</span></span><br><span class="line">  <span class="attr">createTodo(input</span>:<span class="string">&#123;text:&quot;todo&quot;, userId:&quot;1&quot;&#125;) &#123;</span></span><br><span class="line">    <span class="attr">user</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">id</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">text</span></span><br><span class="line">    <span class="attr">done</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">query</span> <span class="string">findTodos &#123;</span></span><br><span class="line">    <span class="attr">todos</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">text</span></span><br><span class="line">      <span class="attr">done</span></span><br><span class="line">      <span class="attr">user</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">name</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h1><p>配置文件详解可以看<a href="https://gqlgen.com/config/">https://gqlgen.com/config/</a><br>配置文件的解析类为<a href="https://github.com/99designs/gqlgen/blob/master/codegen/config/config.go">https://github.com/99designs/gqlgen/blob/master/codegen/config/config.go</a>，感兴趣的同学可以自行查阅<br></be><br>下面讲解以上文init生成的默认的<code>qlgen.yml</code>文件为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描的schema文件地址和文件格式</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">graph/*.graphqls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gqlgen服务器代码自动生成的目录和文件名</span></span><br><span class="line"><span class="attr">exec:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">graph/generated/generated.go</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">generated</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 如果需要用到Apollo federation指令则需要配置</span></span><br><span class="line"><span class="comment"># 关于Apollo federation指令可以查阅https://dgraph.io/docs/master/graphql/federation/</span></span><br><span class="line"><span class="comment"># 打开之后schema文件中会增加如下内容：</span></span><br><span class="line"><span class="comment"># directive @external on FIELD_DEFINITION</span></span><br><span class="line"><span class="comment"># directive @requires(fields: _FieldSet!) on FIELD_DEFINITION</span></span><br><span class="line"><span class="comment"># directive @provides(fields: _FieldSet!) on FIELD_DEFINITION</span></span><br><span class="line"><span class="comment"># directive @key(fields: _FieldSet!) on OBJECT | INTERFACE</span></span><br><span class="line"><span class="comment"># directive @extends on OBJECT</span></span><br><span class="line"><span class="comment"># scalar _Any</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># federation:</span></span><br><span class="line"><span class="comment">#   filename: graph/generated/federation.go</span></span><br><span class="line"><span class="comment">#   package: generated</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># graphql结构体代码自动生成的目录和文件名</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">graph/model/models_gen.go</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 解析文件代码自动生成的的目录和文件名</span></span><br><span class="line"><span class="attr">resolver:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">follow-schema</span></span><br><span class="line">  <span class="attr">dir:</span> <span class="string">graph</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">graph</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 当扫描autobind时，发现同一个结构体名出现多个的时候，则按照配置的tag名字加载对应的结构体</span></span><br><span class="line"><span class="comment"># 但是这里验证来看，同一个结构体名出线多个的时候，只会加载autobind配置的第一个路径，不会按照tag匹配。不建议使用</span></span><br><span class="line"><span class="comment"># 这里不太确定，如若有误，感谢指正</span></span><br><span class="line"><span class="comment"># struct_tag: json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 数组类型，是否适用为指针类型，即是否需要将 []*thing 替换为 []thing</span></span><br><span class="line"><span class="comment"># omit_slice_element_pointers: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 是否跳过验证阶段，代码自动生成之后，会验证自动生成的代码是否有误，默认需要验证</span></span><br><span class="line"><span class="comment"># skip_validation: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选配置</span></span><br><span class="line"><span class="comment"># 扫面下面路径，如果发现和需要生成的结构体名字相同，则使用扫描到的结构体，否则生成对应结构体</span></span><br><span class="line"><span class="attr">autobind:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;graphql/gqlgen/graph/model&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GraphQL声明的变量与系统的结构体的映射关系</span></span><br><span class="line"><span class="comment"># 可以根据需要配置字段是否需要解析</span></span><br><span class="line"><span class="comment"># 这里每个字段的resolver: true的时候，都会在自动生成的resolve中生成一个方法，如果请求字段中包含该字段，则会进入到对应的方法</span></span><br><span class="line"><span class="attr">models:</span></span><br><span class="line">  <span class="attr">ID:</span></span><br><span class="line">    <span class="attr">model:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int64</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int32</span></span><br><span class="line">  <span class="attr">Int:</span></span><br><span class="line">    <span class="attr">model:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int64</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int32</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="starwars星球大战"><a href="#starwars星球大战" class="headerlink" title="starwars星球大战"></a><strong>starwars星球大战</strong></h1><p>之前在<a href="https://graphql.bootcss.com/learn/">https://graphql.bootcss.com/learn/</a>学习的时候都是根据starwars作为示例，这里也基于gqlgen生成starwars服务<br></br><br><code>gqlgen</code>自身也生成了starwars的示例：<a href="https://github.com/99designs/gqlgen/tree/master/example/starwars">https://github.com/99designs/gqlgen/tree/master/example/starwars</a><br>但是个人感觉不适合入门，内部自定义一些结构体，导致理解上有点难度，我这边自己也是实现了一套个人觉得更好理解的，只变更数据层和逻辑层，不涉及<code>model</code>和<code>generate</code>的改动。<br></br><br>代码如下：<a href="https://github.com/ncfl/graphql/tree/main/gqlgen-starwar">https://github.com/ncfl/graphql/tree/main/gqlgen-starwar</a></p></br><h2 id="1、自动生成代码"><a href="#1、自动生成代码" class="headerlink" title="1、自动生成代码"></a>1、自动生成代码</h2><p>在对应目录下添加<code>gqlgen.yml</code>和<code>schema.graphql</code>文件，同目录下运行如下命令之一即可生成代码<br></br></p><blockquote><p>gqlgen<br>go run github.com&#x2F;99designs&#x2F;gqlgen </p></blockquote><p><code>gqlgen.yml</code>如下，也可见<a href="https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/gqlgen.yml">https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/gqlgen.yml</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./*.graphql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">exec:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">generated/generated.go</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">generated</span></span><br><span class="line"></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">model/model.go</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">model</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resolver:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">follow-schema</span></span><br><span class="line">  <span class="attr">dir:</span> <span class="string">resolve</span></span><br><span class="line">  <span class="attr">package:</span> <span class="string">resolve</span></span><br><span class="line"></span><br><span class="line"><span class="attr">autobind:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;graphql/gqlgen-starwar/model&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">models:</span></span><br><span class="line">  <span class="attr">ID:</span></span><br><span class="line">    <span class="attr">model:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int64</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int32</span></span><br><span class="line">  <span class="attr">Int:</span></span><br><span class="line">    <span class="attr">model:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int64</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">github.com/99designs/gqlgen/graphql.Int32</span></span><br><span class="line">  <span class="attr">Droid:</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">friendsConnection:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">friends:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Human:</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">friendsConnection:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">friends:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">height:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">FriendsConnection:</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">friends:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">edges:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Starship:</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">length:</span></span><br><span class="line">        <span class="attr">resolver:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>schema.graphql</code>如下，也可见：<a href="https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/schema.graphql">https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/schema.graphql</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The query type, represents all of the entry points into our object graph</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Query &#123;</span></span><br><span class="line">    <span class="attr">hero(episode</span>: <span class="string">Episode = NEWHOPE): Character</span></span><br><span class="line">    <span class="attr">reviews(episode</span>: <span class="string">Episode!, since: Time): [Review!]!</span></span><br><span class="line">    <span class="attr">search(text</span>: <span class="string">String!): [SearchResult!]!</span></span><br><span class="line">    <span class="attr">character(id</span>: <span class="string">ID!): Character</span></span><br><span class="line">    <span class="attr">droid(id</span>: <span class="string">ID!): Droid</span></span><br><span class="line">    <span class="attr">human(id</span>: <span class="string">ID!): Human</span></span><br><span class="line">    <span class="attr">starship(id</span>: <span class="string">ID!): Starship</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># The mutation type, represents all updates we can make to our data</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Mutation &#123;</span></span><br><span class="line">    <span class="attr">createReview(episode</span>: <span class="string">Episode!, review: ReviewInput!): Review</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># A humanoid creature from the Star Wars universe</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Human implements Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the human</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # What this human calls themselves</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # Height in the preferred unit, default is meters</span></span><br><span class="line">    <span class="attr">height(unit</span>: <span class="string">LengthUnit = METER): Float!</span></span><br><span class="line"><span class="comment">    # Mass in kilograms, or null if unknown</span></span><br><span class="line">    <span class="attr">mass</span>: <span class="string">Float</span></span><br><span class="line"><span class="comment">    # This human&#x27;s friends, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the human exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this human appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="comment">    # A list of starships this person has piloted, or an empty list if none</span></span><br><span class="line">    <span class="attr">starships</span>: <span class="string">[Starship!]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># An autonomous mechanical character in the Star Wars universe</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Droid implements Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the droid</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # What others call this droid</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # This droid&#x27;s friends, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the droid exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this droid appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="comment">    # This droid&#x27;s primary function</span></span><br><span class="line">    <span class="attr">primaryFunction</span>: <span class="string">String</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># A connection object for a character&#x27;s friends</span></span><br><span class="line"><span class="attr">type</span> <span class="string">FriendsConnection &#123;</span></span><br><span class="line"><span class="comment">    # The total number of friends</span></span><br><span class="line">    <span class="attr">totalCount</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # The edges for each of the character&#x27;s friends.</span></span><br><span class="line">    <span class="attr">edges</span>: <span class="string">[FriendsEdge!]</span></span><br><span class="line"><span class="comment">    # A list of the friends, as a convenience when edges are not needed.</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # Information for paginating this connection</span></span><br><span class="line">    <span class="attr">pageInfo</span>: <span class="string">PageInfo!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># An edge object for a character&#x27;s friends</span></span><br><span class="line"><span class="attr">type</span> <span class="string">FriendsEdge &#123;</span></span><br><span class="line"><span class="comment">    # A cursor used for pagination</span></span><br><span class="line">    <span class="attr">cursor</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The character represented by this friendship edge</span></span><br><span class="line">    <span class="attr">node</span>: <span class="string">Character</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Information for paginating this connection</span></span><br><span class="line"><span class="attr">type</span> <span class="string">PageInfo &#123;</span></span><br><span class="line">    <span class="attr">startCursor</span>: <span class="string">ID!</span></span><br><span class="line">    <span class="attr">endCursor</span>: <span class="string">ID!</span></span><br><span class="line">    <span class="attr">hasNextPage</span>: <span class="string">Boolean!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Represents a review for a movie</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Review &#123;</span></span><br><span class="line"><span class="comment">    # The number of stars this review gave, 1-5</span></span><br><span class="line">    <span class="attr">stars</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # Comment about the movie</span></span><br><span class="line">    <span class="attr">commentary</span>: <span class="string">String</span></span><br><span class="line"><span class="comment">    # when the review was posted</span></span><br><span class="line">    <span class="attr">time</span>: <span class="string">Time</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># The input object sent when someone is creating a new review</span></span><br><span class="line"><span class="attr">input</span> <span class="string">ReviewInput &#123;</span></span><br><span class="line"><span class="comment">    # 0-5 stars</span></span><br><span class="line">    <span class="attr">stars</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # Comment about the movie, optional</span></span><br><span class="line">    <span class="attr">commentary</span>: <span class="string">String</span></span><br><span class="line"><span class="comment">    # when the review was posted</span></span><br><span class="line">    <span class="attr">time</span>: <span class="string">Time</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Starship &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the starship</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The name of the starship</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # Length of the starship, along the longest axis</span></span><br><span class="line">    <span class="attr">length(unit</span>: <span class="string">LengthUnit = METER): Float!</span></span><br><span class="line"><span class="comment">    # coordinates tracking this ship</span></span><br><span class="line">    <span class="attr">history</span>: <span class="string">[[Int!]!]!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># The episodes in the Star Wars trilogy</span></span><br><span class="line"><span class="attr">enum</span> <span class="string">Episode &#123;</span></span><br><span class="line"><span class="comment">    # Star Wars Episode IV: A New Hope, released in 1977.</span></span><br><span class="line">    <span class="attr">NEWHOPE</span></span><br><span class="line"><span class="comment">    # Star Wars Episode V: The Empire Strikes Back, released in 1980.</span></span><br><span class="line">    <span class="attr">EMPIRE</span></span><br><span class="line"><span class="comment">    # Star Wars Episode VI: Return of the Jedi, released in 1983.</span></span><br><span class="line">    <span class="attr">JEDI</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># A character from the Star Wars universe</span></span><br><span class="line"><span class="attr">interface</span> <span class="string">Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the character</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The name of the character</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # The friends of the character, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the character exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this character appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Units of height</span></span><br><span class="line"><span class="attr">enum</span> <span class="string">LengthUnit &#123;</span></span><br><span class="line"><span class="comment">    # The standard unit around the world</span></span><br><span class="line">    <span class="attr">METER</span></span><br><span class="line"><span class="comment">    # Primarily used in the United States</span></span><br><span class="line">    <span class="attr">FOOT</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">union</span> <span class="string">SearchResult = Human | Droid | Starship</span></span><br><span class="line"><span class="attr">scalar</span> <span class="string">Time</span></span><br></pre></td></tr></table></figure><h2 id="2、添加可执行方法"><a href="#2、添加可执行方法" class="headerlink" title="2、添加可执行方法"></a>2、添加可执行方法</h2><p>首先添加基础数据，如果是正经服务，这些数据应该源自数据库或者其他接口，如果请求量较大，建议拉取的时候本地缓存。<br>在<code>resolver.go</code>中添加内容，详情可见:<a href="https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/resolve/resolver.go">https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/resolve/resolver.go</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> resolve</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;graphql/gqlgen-starwar/generated&quot;</span></span><br><span class="line"><span class="string">&quot;graphql/gqlgen-starwar/model&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This file will not be regenerated automatically.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// It serves as dependency injection for your app, add any dependencies you require here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resolver <span class="keyword">struct</span> &#123;</span><br><span class="line">humans    <span class="keyword">map</span>[<span class="type">string</span>]model.Human</span><br><span class="line">droid     <span class="keyword">map</span>[<span class="type">string</span>]model.Droid</span><br><span class="line">starships <span class="keyword">map</span>[<span class="type">string</span>]model.Starship</span><br><span class="line">reviews   <span class="keyword">map</span>[model.Episode][]*model.Review</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewResolver</span><span class="params">()</span></span> generated.Config &#123;</span><br><span class="line">r := Resolver&#123;&#125;</span><br><span class="line">r.humans = <span class="keyword">map</span>[<span class="type">string</span>]model.Human&#123;</span><br><span class="line"><span class="string">&quot;1000&quot;</span>: &#123;</span><br><span class="line">ID:        <span class="string">&quot;1000&quot;</span>,</span><br><span class="line">Name:      <span class="string">&quot;Luke Skywalker&quot;</span>,</span><br><span class="line">Friends:   []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1002&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1003&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2000&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2001&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn: []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">Height:    <span class="number">1.72</span>,</span><br><span class="line">Mass:      proto.Float64(<span class="number">77</span>),</span><br><span class="line">Starships: []*model.Starship&#123;&#123;ID: <span class="string">&quot;3001&quot;</span>&#125;, &#123;ID: <span class="string">&quot;3003&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;1001&quot;</span>: &#123;</span><br><span class="line">ID:        <span class="string">&quot;1001&quot;</span>,</span><br><span class="line">Name:      <span class="string">&quot;Darth Vader&quot;</span>,</span><br><span class="line">Friends:   []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1004&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn: []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">Height:    <span class="number">2.02</span>,</span><br><span class="line">Mass:      proto.Float64(<span class="number">136</span>),</span><br><span class="line">Starships: []*model.Starship&#123;&#123;ID: <span class="string">&quot;3002&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;1002&quot;</span>: &#123;</span><br><span class="line">ID:        <span class="string">&quot;1002&quot;</span>,</span><br><span class="line">Name:      <span class="string">&quot;Han Solo&quot;</span>,</span><br><span class="line">Friends:   []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1000&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1003&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2001&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn: []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">Height:    <span class="number">1.8</span>,</span><br><span class="line">Mass:      proto.Float64(<span class="number">80</span>),</span><br><span class="line">Starships: []*model.Starship&#123;&#123;ID: <span class="string">&quot;3000&quot;</span>&#125;, &#123;ID: <span class="string">&quot;3003&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;1003&quot;</span>: &#123;</span><br><span class="line">ID:        <span class="string">&quot;1003&quot;</span>,</span><br><span class="line">Name:      <span class="string">&quot;Leia Organa&quot;</span>,</span><br><span class="line">Friends:   []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1000&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1002&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2000&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2001&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn: []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">Height:    <span class="number">1.5</span>,</span><br><span class="line">Mass:      proto.Float64(<span class="number">49</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;1004&quot;</span>: &#123;</span><br><span class="line">ID:        <span class="string">&quot;1004&quot;</span>,</span><br><span class="line">Name:      <span class="string">&quot;Wilhuff Tarkin&quot;</span>,</span><br><span class="line">Friends:   []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1001&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn: []model.Episode&#123;model.EpisodeNewhope&#125;,</span><br><span class="line">Height:    <span class="number">1.8</span>,</span><br><span class="line">Mass:      proto.Float64(<span class="number">0</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.droid = <span class="keyword">map</span>[<span class="type">string</span>]model.Droid&#123;</span><br><span class="line"><span class="string">&quot;2000&quot;</span>: &#123;</span><br><span class="line">ID:              <span class="string">&quot;2000&quot;</span>,</span><br><span class="line">Name:            <span class="string">&quot;C-3PO&quot;</span>,</span><br><span class="line">Friends:         []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1000&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1002&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1003&quot;</span>&#125;, model.Droid&#123;ID: <span class="string">&quot;2001&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn:       []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">PrimaryFunction: proto.String(<span class="string">&quot;Protocol&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;2001&quot;</span>: &#123;</span><br><span class="line">ID:              <span class="string">&quot;2001&quot;</span>,</span><br><span class="line">Name:            <span class="string">&quot;R2-D2&quot;</span>,</span><br><span class="line">Friends:         []model.Character&#123;model.Human&#123;ID: <span class="string">&quot;1000&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1002&quot;</span>&#125;, model.Human&#123;ID: <span class="string">&quot;1003&quot;</span>&#125;&#125;,</span><br><span class="line">AppearsIn:       []model.Episode&#123;model.EpisodeNewhope, model.EpisodeEmpire, model.EpisodeJedi&#125;,</span><br><span class="line">PrimaryFunction: proto.String(<span class="string">&quot;Astromech&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.starships = <span class="keyword">map</span>[<span class="type">string</span>]model.Starship&#123;</span><br><span class="line"><span class="string">&quot;3000&quot;</span>: &#123;</span><br><span class="line">ID:   <span class="string">&quot;3000&quot;</span>,</span><br><span class="line">Name: <span class="string">&quot;Millennium Falcon&quot;</span>,</span><br><span class="line">History: [][]<span class="type">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Length: <span class="number">34.37</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;3001&quot;</span>: &#123;</span><br><span class="line">ID:   <span class="string">&quot;3001&quot;</span>,</span><br><span class="line">Name: <span class="string">&quot;X-Wing&quot;</span>,</span><br><span class="line">History: [][]<span class="type">int</span>&#123;</span><br><span class="line">&#123;<span class="number">6</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Length: <span class="number">12.5</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;3002&quot;</span>: &#123;</span><br><span class="line">ID:   <span class="string">&quot;3002&quot;</span>,</span><br><span class="line">Name: <span class="string">&quot;TIE Advanced x1&quot;</span>,</span><br><span class="line">History: [][]<span class="type">int</span>&#123;</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Length: <span class="number">9.2</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;3003&quot;</span>: &#123;</span><br><span class="line">ID:   <span class="string">&quot;3003&quot;</span>,</span><br><span class="line">Name: <span class="string">&quot;Imperial shuttle&quot;</span>,</span><br><span class="line">History: [][]<span class="type">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Length: <span class="number">20</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.reviews = <span class="keyword">map</span>[model.Episode][]*model.Review&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> generated.Config&#123;</span><br><span class="line">Resolvers: &amp;r,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建gqlgen服务器，添加可执行<code>main</code>方法，如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;graphql/gqlgen-starwar/generated&quot;</span></span><br><span class="line"><span class="string">&quot;graphql/gqlgen-starwar/resolve&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/99designs/gqlgen/graphql/handler&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/99designs/gqlgen/graphql/playground&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultPort = <span class="string">&quot;8080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">srv := handler.NewDefaultServer(generated.NewExecutableSchema(resolve.NewResolver()))</span><br><span class="line"></span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, playground.Handler(<span class="string">&quot;GraphQL playground&quot;</span>, <span class="string">&quot;/query&quot;</span>))</span><br><span class="line">http.Handle(<span class="string">&quot;/query&quot;</span>, srv)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;connect to http://localhost:%s/ for GraphQL playground&quot;</span>, defaultPort)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:&quot;</span>+defaultPort, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此运行上面的<code>main</code>方法，就可以访问<code>localhost:8080</code>，此时界面上对应的docs和schema即是完整的用例，只不过内部逻辑暂未实现而已。</p><h2 id="3、完成schema-resolvers-go逻辑"><a href="#3、完成schema-resolvers-go逻辑" class="headerlink" title="3、完成schema.resolvers.go逻辑"></a>3、完成<code>schema.resolvers.go</code>逻辑</h2><p>这里以最简单的<code>Human</code>，<code>Character</code>,<code>Search</code>为例，如下，逻辑也很简单，就是上文的数据中根据参数返回对应的数据而已<br></br><br>完整的代码可见<a href="https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/resolve/schema.resolvers.go">https://github.com/ncfl/graphql/blob/main/gqlgen-starwar/resolve/schema.resolvers.go</a><br></br></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span></span> Search(ctx context.Context, text <span class="type">string</span>) ([]model.SearchResult, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> l []model.SearchResult</span><br><span class="line"><span class="keyword">for</span> _, h := <span class="keyword">range</span> r.humans &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(h.Name, text) &#123;</span><br><span class="line">l = <span class="built_in">append</span>(l, h)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> r.droid &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(d.Name, text) &#123;</span><br><span class="line">l = <span class="built_in">append</span>(l, d)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> r.starships &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(s.Name, text) &#123;</span><br><span class="line">l = <span class="built_in">append</span>(l, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span></span> Character(ctx context.Context, id <span class="type">string</span>) (model.Character, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> h, ok := r.humans[id]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;h, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d, ok := r.droid[id]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;d, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span></span> Droid(ctx context.Context, id <span class="type">string</span>) (*model.Droid, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> d, ok := r.droid[id]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;d, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *queryResolver)</span></span> Human(ctx context.Context, id <span class="type">string</span>) (*model.Human, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> h, ok := r.humans[id]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;h, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h2><p>待所有逻辑全部实现完成之后，即可将<a href="https://graphql.bootcss.com/learn/">https://graphql.bootcss.com/learn/</a>中的示例在自己的搭建的服务器上进行验证，如下：<br><img src="https://img.ncfl.tech/20210815142218.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><ul><li><code>gqlgen</code>是基于schema文件自动生成的代码，类似于模板模式开发</li><li>因为上面导致代码开发量减少跟多，专注于配置文件和reslove文件即可，加快开发</li><li>也同样因为上面，自动生成代码导致内部逻辑被隐藏，进而导致内部细节不够透明</li><li>不管从支持的功能，还是迭代开发，个人觉得<code>gqlgen</code>都是首选</li><li>但是由于支持的功能较多，所以想要深入使用，门槛较高</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL-GO（1）简述</title>
      <link href="/post/19135/"/>
      <url>/post/19135/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h1><p> <code>GraphQL</code>是由<code>FaceBook</code>开发的一种API查询语言，调用者可以无任何冗余的情况下获取到数据。<br> 与<code>GraphQL</code>对标的是<code>Rest</code>：</p><ul><li><code>Rest</code>是由后台定义返回的字段，如果后台返回的字段过多，则会出现返回的无用字段影响性能，如果后台返回的字段不足，则需要后台重新开发新增需要的字段</li><li><code>GraphQL</code>是由调用者定义需要返回的字段，后台根据请求返回指定字段</li></ul><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a><strong>学习资料</strong></h1><p>官方文档中文：<a href="https://graphql.bootcss.com/learn/">https://graphql.bootcss.com/learn/</a></p><p>官方文档英文：<a href="https://graphql.org/learn/">https://graphql.org/learn/</a><br></br><br>官方文档的资料写的很详细也非常浅显易懂，我下面也只是搬运核心的一些内容。<br>(顺口一提)官方文档里面的示例是可以直接修改运行的</p><h1 id="schema"><a href="#schema" class="headerlink" title="schema"></a><strong>schema</strong></h1><p>中文文档：<a href="https://graphql.bootcss.com/learn/schema/">https://graphql.bootcss.com/learn/schema/</a><br>英文文档：<a href="https://graphql.org/learn/schema/">https://graphql.org/learn/schema/</a><br></br><br><code>GraphQL</code>是由schema文件来定义所提供的能力，简单理解就是用schema来定义有哪些接口，接口对应的请求结构体和响应接口体<br></br><br>官方文档上并没有给出示例的<code>starwar</code>的schema文件，含义也没有做解释，我这里稍微做一下补充，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The query type, represents all of the entry points into our object graph</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Query &#123;</span></span><br><span class="line">    <span class="attr">hero(episode</span>: <span class="string">Episode = NEWHOPE): Character</span></span><br><span class="line">    <span class="attr">reviews(episode</span>: <span class="string">Episode!, since: Time): [Review!]!</span></span><br><span class="line">    <span class="attr">search(text</span>: <span class="string">String!): [SearchResult!]!</span></span><br><span class="line">    <span class="attr">character(id</span>: <span class="string">ID!): Character</span></span><br><span class="line">    <span class="attr">droid(id</span>: <span class="string">ID!): Droid</span></span><br><span class="line">    <span class="attr">human(id</span>: <span class="string">ID!): Human</span></span><br><span class="line">    <span class="attr">starship(id</span>: <span class="string">ID!): Starship</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># The mutation type, represents all updates we can make to our data</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Mutation &#123;</span></span><br><span class="line">    <span class="attr">createReview(episode</span>: <span class="string">Episode!, review: ReviewInput!): Review</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># A humanoid creature from the Star Wars universe</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Human implements Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the human</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # What this human calls themselves</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # Height in the preferred unit, default is meters</span></span><br><span class="line">    <span class="attr">height(unit</span>: <span class="string">LengthUnit = METER): Float!</span></span><br><span class="line"><span class="comment">    # Mass in kilograms, or null if unknown</span></span><br><span class="line">    <span class="attr">mass</span>: <span class="string">Float</span></span><br><span class="line"><span class="comment">    # This human&#x27;s friends, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the human exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this human appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="comment">    # A list of starships this person has piloted, or an empty list if none</span></span><br><span class="line">    <span class="attr">starships</span>: <span class="string">[Starship!]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># An autonomous mechanical character in the Star Wars universe</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Droid implements Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the droid</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # What others call this droid</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # This droid&#x27;s friends, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the droid exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this droid appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="comment">    # This droid&#x27;s primary function</span></span><br><span class="line">    <span class="attr">primaryFunction</span>: <span class="string">String</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># A connection object for a character&#x27;s friends</span></span><br><span class="line"><span class="attr">type</span> <span class="string">FriendsConnection &#123;</span></span><br><span class="line"><span class="comment">    # The total number of friends</span></span><br><span class="line">    <span class="attr">totalCount</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # The edges for each of the character&#x27;s friends.</span></span><br><span class="line">    <span class="attr">edges</span>: <span class="string">[FriendsEdge!]</span></span><br><span class="line"><span class="comment">    # A list of the friends, as a convenience when edges are not needed.</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # Information for paginating this connection</span></span><br><span class="line">    <span class="attr">pageInfo</span>: <span class="string">PageInfo!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># An edge object for a character&#x27;s friends</span></span><br><span class="line"><span class="attr">type</span> <span class="string">FriendsEdge &#123;</span></span><br><span class="line"><span class="comment">    # A cursor used for pagination</span></span><br><span class="line">    <span class="attr">cursor</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The character represented by this friendship edge</span></span><br><span class="line">    <span class="attr">node</span>: <span class="string">Character</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Information for paginating this connection</span></span><br><span class="line"><span class="attr">type</span> <span class="string">PageInfo &#123;</span></span><br><span class="line">    <span class="attr">startCursor</span>: <span class="string">ID!</span></span><br><span class="line">    <span class="attr">endCursor</span>: <span class="string">ID!</span></span><br><span class="line">    <span class="attr">hasNextPage</span>: <span class="string">Boolean!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Represents a review for a movie</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Review &#123;</span></span><br><span class="line"><span class="comment">    # The number of stars this review gave, 1-5</span></span><br><span class="line">    <span class="attr">stars</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # Comment about the movie</span></span><br><span class="line">    <span class="attr">commentary</span>: <span class="string">String</span></span><br><span class="line"><span class="comment">    # when the review was posted</span></span><br><span class="line">    <span class="attr">time</span>: <span class="string">Time</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># The input object sent when someone is creating a new review</span></span><br><span class="line"><span class="attr">input</span> <span class="string">ReviewInput &#123;</span></span><br><span class="line"><span class="comment">    # 0-5 stars</span></span><br><span class="line">    <span class="attr">stars</span>: <span class="string">Int!</span></span><br><span class="line"><span class="comment">    # Comment about the movie, optional</span></span><br><span class="line">    <span class="attr">commentary</span>: <span class="string">String</span></span><br><span class="line"><span class="comment">    # when the review was posted</span></span><br><span class="line">    <span class="attr">time</span>: <span class="string">Time</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">Starship &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the starship</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The name of the starship</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # Length of the starship, along the longest axis</span></span><br><span class="line">    <span class="attr">length(unit</span>: <span class="string">LengthUnit = METER): Float!</span></span><br><span class="line"><span class="comment">    # coordinates tracking this ship</span></span><br><span class="line">    <span class="attr">history</span>: <span class="string">[[Int!]!]!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># The episodes in the Star Wars trilogy</span></span><br><span class="line"><span class="attr">enum</span> <span class="string">Episode &#123;</span></span><br><span class="line"><span class="comment">    # Star Wars Episode IV: A New Hope, released in 1977.</span></span><br><span class="line">    <span class="attr">NEWHOPE</span></span><br><span class="line"><span class="comment">    # Star Wars Episode V: The Empire Strikes Back, released in 1980.</span></span><br><span class="line">    <span class="attr">EMPIRE</span></span><br><span class="line"><span class="comment">    # Star Wars Episode VI: Return of the Jedi, released in 1983.</span></span><br><span class="line">    <span class="attr">JEDI</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># A character from the Star Wars universe</span></span><br><span class="line"><span class="attr">interface</span> <span class="string">Character &#123;</span></span><br><span class="line"><span class="comment">    # The ID of the character</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">ID!</span></span><br><span class="line"><span class="comment">    # The name of the character</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">String!</span></span><br><span class="line"><span class="comment">    # The friends of the character, or an empty list if they have none</span></span><br><span class="line">    <span class="attr">friends</span>: <span class="string">[Character!]</span></span><br><span class="line"><span class="comment">    # The friends of the character exposed as a connection with edges</span></span><br><span class="line">    <span class="attr">friendsConnection(first</span>: <span class="string">Int, after: ID): FriendsConnection!</span></span><br><span class="line"><span class="comment">    # The movies this character appears in</span></span><br><span class="line">    <span class="attr">appearsIn</span>: <span class="string">[Episode!]!</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"># Units of height</span></span><br><span class="line"><span class="attr">enum</span> <span class="string">LengthUnit &#123;</span></span><br><span class="line"><span class="comment">    # The standard unit around the world</span></span><br><span class="line">    <span class="attr">METER</span></span><br><span class="line"><span class="comment">    # Primarily used in the United States</span></span><br><span class="line">    <span class="attr">FOOT</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">union</span> <span class="string">SearchResult = Human | Droid | Starship</span></span><br><span class="line"><span class="attr">scalar</span> <span class="string">Time</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><a href="https://graphql.bootcss.com/learn/schema/#lists-and-non-null">!</a></td><td>标识该字段非空</td><td></td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#lists-and-non-null">[]</a></td><td>表示当前字段为数组类型</td><td></td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#the-query-and-mutation-types">Query</a></td><td>对外提供查询的接口，类似于rest中的get请求，括号中为请求结构体，最后字段响应结构体</td><td>上文中<code>Query</code>的<code>hero</code>为例，请求参数名为<code>episode</code>，请求类型为<code>Episode</code>，如果不传参，默认值为<code>NEWHOPE</code>，响应类型为<code>Character</code></td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#the-query-and-mutation-types">Mutation</a></td><td>对外提供的插入接口，类似于rest中的put请求，括号中为请求结构体，最后字段响应结构体</td><td>上文中<code>Mutation</code>的<code>createReview</code>为例，请求参数名为<code>episode</code>和<code>review</code>，请求类型为<code>Episode</code>和<code>ReviewInput</code>,且都不能为空，响应类型为<code>Review</code></td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#object-types-and-fields">type</a></td><td>结构体，定义<code>GraphQL</code>中所需要的结构体</td><td>上文中的<code>Human</code>为例，定义了<code>id</code>,<code>name</code>,<code>height</code>等字段，类型<code>ID</code>,<code>String</code>,<code>Float</code>,<code>Boolean</code>, <code>Int</code>为<code>GraphQL</code>自身提供的类型，字段也可以有查询参数。比如<code>height</code>字段有参数<code>unit</code>，类型为<code>LengthUnit</code>，默认值为<code>METER</code></td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#interfaces">interface</a></td><td>接口类型，其实我觉得理解成超类或者父类更合适，就是定义了其他类型所共有的字段</td><td>上文中<code>Character</code>为例，<code>Droid</code>和<code>Human</code>都实现(继承)了<code>Character</code>的属性，这里的子类需要重新声明<code>Character</code>的字段</td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#enumeration-types">enum</a></td><td>枚举类型</td><td>上文中<code>Episode</code>为例，定了三个值<code>NEWHOPE</code>,<code>EMPIRE</code>,<code>JEDI</code>，枚举的类型这里不会体现，可以在实现的时候自定义，通常是字符串类型</td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#input-types">input</a></td><td>定义接口的请求参数类型，该类型字段只能用户接口的入参</td><td>上文中<code>ReviewInput</code>为例，在<code>Mutation</code>中的<code>createReview</code>的入参为<code>ReviewInput</code>类型</td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#union-types">union</a></td><td>联合类型，和接口十分相似，但是它并不指定类型之间的任何共同字段。</td><td>上文中<code>SearchResult</code>为例，该字段既可以是<code>Human</code>，也可以是<code>Droid</code>，或者<code>Starship</code>，在实现的时候可以解析指定类型</td></tr><tr><td><a href="https://graphql.bootcss.com/learn/schema/#scalar-types">scalar</a></td><td>定义标量类型，<code>GraphQL</code>中默认的标量为<code>ID</code>,<code>String</code>,<code>Float</code>,<code>Boolean</code>, <code>Int</code>，实现的时候需要实现类型的序列化，反序列，验证等方法</td><td>上文中<code>Time</code>为例，定义全新的标量，对应的解析方法需要在代码实现</td></tr></tbody></table><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h1><p>中文文档：<a href="https://graphql.bootcss.com/learn/queries/">https://graphql.bootcss.com/learn/queries/</a><br>英文文档：<a href="https://graphql.org/learn/queries/">https://graphql.org/learn/queries/</a><br></br><br>建议去上面的网址去运行一下脚本，实地感受一下效果<br></br></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">query</span> <span class="string">testQueryHuman&#123;</span></span><br><span class="line">  <span class="attr">human1000</span>:<span class="string">human(id: &quot;1000&quot;) &#123;</span></span><br><span class="line">    <span class="attr">name</span></span><br><span class="line">    <span class="attr">height(unit</span>: <span class="string">FOOT)</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">human1001</span>:<span class="string">human(id: &quot;1001&quot;) &#123;</span></span><br><span class="line">    <span class="attr">name</span></span><br><span class="line">    <span class="attr">height</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>得到的效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;human1000&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Luke Skywalker&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">5.6430448</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;human1001&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Darth Vader&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">2.02</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></br>1、可以看到查询几个字段就返回几个字段</br>2、`query testQueryHuman`为当前查询的[操作名称](https://graphql.bootcss.com/learn/queries/#operation-name)，`query`为固定资，后面的名字自定义</br>3、`human1000`和`human1001`为查询结果的[别名](https://graphql.bootcss.com/learn/queries/#aliases)，可以不写</br>4、`id: "1000"`和`id: "1001"`为查询[参数](https://graphql.bootcss.com/learn/queries/#arguments)，即查询ID为1000和1001的人类，同时可见查询的字段`height`也是可以带参数的</br>5、其他的操作，如[片段](https://graphql.bootcss.com/learn/queries/#fragments)，[指令](https://graphql.bootcss.com/learn/queries/#directives)，[变更](https://graphql.bootcss.com/learn/queries/#mutations)，[内联片段](https://graphql.bootcss.com/learn/queries/#inline-fragments)见官方文档<h1 id="我理解的优缺点"><a href="#我理解的优缺点" class="headerlink" title="我理解的优缺点"></a><strong>我理解的优缺点</strong></h1><p>优点：</p><ul><li>由调用者决定返回的数据，数据足够透明</li><li>降低网络带宽，提供相应速度</li><li>减少服务的开发成本，更加适应多变的需求</li></ul><p>缺点：</p><ul><li>系统整体架构复杂化，毕竟多引入了组件</li><li>后台系统复杂度上升，数据层对数据的维护和提供能力需要增强，因为原本只需要查询少量字段，现在需维护所有需要的字段，以备调用者请求</li><li>对调用者而言，学习成本更大，本来只需要了解接口字段含义，现在需要了解整个<code>GraphQL</code>提供的能力</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h1><p><code>GraphQL</code>提供了多种语言的实现代码库，详情可见<a href="https://graphql.bootcss.com/code/">https://graphql.bootcss.com/code/</a><br></br><br>java的之前玩过了，也写过一下文档，可见<a href="https://blog.csdn.net/q15150676766/category_7004424.html">https://blog.csdn.net/q15150676766/category_7004424.html</a>但是有点年久失修了<br></br><br>这次主要研究的是<code>GO</code>使用<code>GraphQL</code>的框架，<code>GO</code>提供的框架太多了，学习起来有点吃力，这次主要学习和研究最火的三个（也是就star最多的三个），我们项目中用的是<code>gqlgen</code>，太高级的功能没做深究，粗浅的学习一下怎么用。</p><ul><li><a href="https://github.com/graphql-go/graphql">graphql-go</a>：一个 Go&#x2F;Golang 的 <code>GraphQL</code> 实现</li><li><a href="https://github.com/graph-gophers/graphql-go">graph-gophers&#x2F;graphql-go</a>：一个活跃的 Golang <code>GraphQL</code> 实现</li><li><a href="https://github.com/99designs/gqlgen">99designs&#x2F;gqlgen</a>：生成基于 <code>GraphQL</code> 的服务器的库</li></ul></br>下面是大佬们整理的三个框架的比较<p><img src="https://img.ncfl.tech/20210811231623.png" alt="GO框架比较"></p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章收藏-中间件</title>
      <link href="/post/4526/"/>
      <url>/post/4526/</url>
      
        <content type="html"><![CDATA[<h3 id="综合："><a href="#综合：" class="headerlink" title="综合："></a>综合：</h3><p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-sentinel.html">https://pdai.tech/md/db/nosql-redis/db-redis-x-sentinel.html</a></p><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h3 id="redis持久化-rdb-aof"><a href="#redis持久化-rdb-aof" class="headerlink" title="redis持久化 rdb aof"></a>redis持久化 rdb aof</h3><p><a href="https://developer.aliyun.com/article/541097">https://developer.aliyun.com/article/541097</a></p><h3 id="redis底层数据结构"><a href="#redis底层数据结构" class="headerlink" title="redis底层数据结构"></a>redis底层数据结构</h3><p><a href="https://www.cnblogs.com/xiaolincoding/p/15628854.html">https://www.cnblogs.com/xiaolincoding/p/15628854.html</a></p><h3 id="redis底层数据结构-1"><a href="#redis底层数据结构-1" class="headerlink" title="redis底层数据结构"></a>redis底层数据结构</h3><p><a href="https://zsr.github.io/2017/07/03/redis-zset%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/">https://zsr.github.io/2017/07/03/redis-zset%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</a></p><h3 id="Redis的渐进式REHASH"><a href="#Redis的渐进式REHASH" class="headerlink" title="Redis的渐进式REHASH"></a>Redis的渐进式REHASH</h3><p><a href="https://luoming1224.github.io/2018/11/12/%5Bredis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dredis%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E6%9C%BA%E5%88%B6/">https://luoming1224.github.io/2018/11/12/%5Bredis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dredis%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E6%9C%BA%E5%88%B6/</a><br><a href="https://tech.meituan.com/2018/07/27/redis-rehash-practice-optimization.html">https://tech.meituan.com/2018/07/27/redis-rehash-practice-optimization.html</a></p><h3 id="REDIS集群扩容"><a href="#REDIS集群扩容" class="headerlink" title="REDIS集群扩容"></a>REDIS集群扩容</h3><p><a href="https://blog.csdn.net/men_wen/article/details/72896682">https://blog.csdn.net/men_wen&#x2F;article&#x2F;details&#x2F;72896682</a></p><h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><h3 id="kafka-CSDN解析"><a href="#kafka-CSDN解析" class="headerlink" title="kafka CSDN解析"></a>kafka CSDN解析</h3><p><a href="https://blog.csdn.net/weixin_38750084/article/details/82942564">https://blog.csdn.net/weixin_38750084&#x2F;article&#x2F;details&#x2F;82942564</a></p><h3 id="KAFKA一致性顺序性等"><a href="#KAFKA一致性顺序性等" class="headerlink" title="KAFKA一致性顺序性等"></a>KAFKA一致性顺序性等</h3><p><a href="https://www.cnblogs.com/sunsky303/p/9511839.html">https://www.cnblogs.com/sunsky303/p/9511839.html</a></p><h3 id="Kafka分区分配策略"><a href="#Kafka分区分配策略" class="headerlink" title="Kafka分区分配策略"></a>Kafka分区分配策略</h3><p><a href="https://www.cnblogs.com/hzmark/p/sticky_assignor.html">https://www.cnblogs.com/hzmark/p/sticky_assignor.html</a><br><a href="https://juejin.im/post/5e04cb11f265da33e34801ce">https://juejin.im/post/5e04cb11f265da33e34801ce</a></p><h3 id="kakfa同步机制"><a href="#kakfa同步机制" class="headerlink" title="kakfa同步机制"></a>kakfa同步机制</h3><p><a href="https://juejin.im/post/5ccffe886fb9a03239689e5c">https://juejin.im/post/5ccffe886fb9a03239689e5c</a></p><h3 id="kafka高吞吐的原因"><a href="#kafka高吞吐的原因" class="headerlink" title="kafka高吞吐的原因"></a>kafka高吞吐的原因</h3><p><a href="https://www.cnblogs.com/barrywxx/p/11544379.html">https://www.cnblogs.com/barrywxx/p/11544379.html</a></p><h3 id="Kafka面试知识点"><a href="#Kafka面试知识点" class="headerlink" title="Kafka面试知识点"></a>Kafka面试知识点</h3><p><a href="https://www.jianshu.com/p/62f1ea002022">https://www.jianshu.com/p/62f1ea002022</a><br><a href="https://zhuanlan.zhihu.com/p/79579389">https://zhuanlan.zhihu.com/p/79579389</a></p><h3 id="几种MQ比较"><a href="#几种MQ比较" class="headerlink" title="几种MQ比较"></a>几种MQ比较</h3><p><a href="https://cloud.tencent.com/developer/article/1426045">https://cloud.tencent.com/developer/article/1426045</a></p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>插入：<a href="https://segmentfault.com/a/1190000020118044#articleHeader0">https://segmentfault.com/a/1190000020118044#articleHeader0</a><br>前驱节点后继节点：<a href="https://blog.csdn.net/Li_haiyu/article/details/94437906">https://blog.csdn.net/Li_haiyu&#x2F;article&#x2F;details&#x2F;94437906</a><br>删除：<a href="https://my.oschina.net/u/3272058/blog/1914452">https://my.oschina.net/u/3272058/blog/1914452</a><br>所有的树特性<a href="https://blog.csdn.net/weixin_37645838/article/details/82778923">https://blog.csdn.net/weixin_37645838&#x2F;article&#x2F;details&#x2F;82778923</a></p><h3 id="B树，B-树"><a href="#B树，B-树" class="headerlink" title="B树，B+树"></a>B树，B+树</h3><p><a href="https://www.cnblogs.com/guohai-stronger/p/9225057.html">https://www.cnblogs.com/guohai-stronger/p/9225057.html</a></p><h3 id="mysql死锁模拟及其注意事项"><a href="#mysql死锁模拟及其注意事项" class="headerlink" title="mysql死锁模拟及其注意事项"></a>mysql死锁模拟及其注意事项</h3><p><a href="https://www.aneasystone.com/archives/2018/04/solving-dead-locks-four.html">https://www.aneasystone.com/archives/2018/04/solving-dead-locks-four.html</a></p><h3 id="数据库隔离机制"><a href="#数据库隔离机制" class="headerlink" title="数据库隔离机制"></a>数据库隔离机制</h3><p><a href="https://juejin.im/entry/5b835dfbf265da43531d0593">https://juejin.im/entry/5b835dfbf265da43531d0593</a></p><h3 id="索引相关知识点"><a href="#索引相关知识点" class="headerlink" title="索引相关知识点"></a>索引相关知识点</h3><p><a href="https://blog.csdn.net/mysteryhaohao/article/details/51719871">https://blog.csdn.net/mysteryhaohao/article/details/51719871</a></p><h3 id="数据库为什么使用B-树"><a href="#数据库为什么使用B-树" class="headerlink" title="数据库为什么使用B+树"></a>数据库为什么使用B+树</h3><p><a href="https://draveness.me/whys-the-design-mysql-b-plus-tree">https://draveness.me/whys-the-design-mysql-b-plus-tree</a></p><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p><a href="https://zhuanlan.zhihu.com/p/598892366">https://zhuanlan.zhihu.com/p/598892366</a></p><h1 id="一致性算法"><a href="#一致性算法" class="headerlink" title="一致性算法"></a>一致性算法</h1><h3 id="拜占庭问题"><a href="#拜占庭问题" class="headerlink" title="拜占庭问题"></a>拜占庭问题</h3><p><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg&t=1066s">https://www.youtube.com/watch?v=e9KVmyI1eCg&t=1066s</a></p><h3 id="raft算法图解"><a href="#raft算法图解" class="headerlink" title="raft算法图解"></a>raft算法图解</h3><p><a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></p><h3 id="ZAB-raft-Paxos视频"><a href="#ZAB-raft-Paxos视频" class="headerlink" title="ZAB raft Paxos视频"></a>ZAB raft Paxos视频</h3><p><a href="https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from=333.337.search-card.all.click&vd_source=5049cdb7864cfa3b2891e8ab98480c55">https://www.bilibili.com/video/BV1TW411M7Fx/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;5049cdb7864cfa3b2891e8ab98480c55</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO基础</title>
      <link href="/post/9365/"/>
      <url>/post/9365/</url>
      
        <content type="html"><![CDATA[<h2 id="元素range的为该元素的拷贝"><a href="#元素range的为该元素的拷贝" class="headerlink" title="元素range的为该元素的拷贝"></a><em><strong>元素range的为该元素的拷贝</strong></em></h2><p>数组或者slice在range expression副本参与循环，即range中的a为a的拷贝，与a不是同一个地址，所以range时的index和value都不是真正数组的index和value。建议range的时候使用slice或者数组指针。</p><p>Map和Chan这两个数据类型除外，虽然range的也是拷贝的对象，但是该对象指向的是数据本身。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 错误循环</span></span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">var</span> r [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">12</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line">r[i] = v</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a) <span class="comment">// a =  [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;r = &quot;</span>, r) <span class="comment">// r =  [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确循环</span></span><br><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">12</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line">r[i] = a[i]</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a) <span class="comment">// a =  [1 12 13 4 5]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;r = &quot;</span>, r) <span class="comment">// r =  [1 12 13 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确循环</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> &amp;a &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">12</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line">r[i] = v</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a) <span class="comment">// a =  [1 12 13 4 5]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;r = &quot;</span>, r) <span class="comment">// r =  [1 12 13 4 5]</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="GO文件加载顺序"><a href="#GO文件加载顺序" class="headerlink" title="GO文件加载顺序"></a><em><strong>GO文件加载顺序</strong></em></h2><p>同一个package下，按照文件名字符串比较从小到大顺序加载<br>不同package，按照import中声明顺序进行加载，如果有依赖，则按照依赖顺序进行加载</p><h3 id="验证方法：每个go文件下声明init-方法，观察输出顺序即可"><a href="#验证方法：每个go文件下声明init-方法，观察输出顺序即可" class="headerlink" title="验证方法：每个go文件下声明init()方法，观察输出顺序即可"></a><em>验证方法</em>：每个go文件下声明<code>init()</code>方法，观察输出顺序即可</h3><h2 id="byte和rune的区别"><a href="#byte和rune的区别" class="headerlink" title="byte和rune的区别"></a><em><strong>byte和rune的区别</strong></em></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。</span><br><span class="line">rune类型，代表一个 UTF-8字符。</span><br></pre></td></tr></table></figure><h2 id="数组和切片的区别"><a href="#数组和切片的区别" class="headerlink" title="数组和切片的区别*"></a><em><strong>数组和切片的区别</strong></em>*</h2><ul><li>切片是指针类型，数组是值类型</li><li>数组的长度是固定的，而切片长度可以任意调整（切片是动态的数组）</li><li>数组只有长度一个属性，而切片比数组多了一个容量（cap)属性</li><li>切片的底层也是数组实现的</li></ul><h3 id="切换长度增长规律："><a href="#切换长度增长规律：" class="headerlink" title="切换长度增长规律："></a><em>切换长度增长规律：</em></h3><p>函数：<code>runtime/slice.go: func growslice</code><br>规则：见文章：<a href="https://golang.design/go-questions/slice/grow/">切片扩容规则</a></p><p>tips：</p><ul><li>基本规则：1.18版本之前：当原 slice 容量小于 1024 的时候，新 slice 容量变成原来的 2 倍；原 slice 容量超过 1024，新 slice 容量变成原来的1.25倍。</li><li>基本规则：1.18版本之后：当原slice容量(oldcap)小于256的时候，新slice(newcap)容量为原来的2倍；原slice容量超过256，新slice容量newcap &#x3D; oldcap+(oldcap+3*256)&#x2F;4</li><li>分配大小之后，在获取到的最新的容量大小之后，会对内存进行对齐，会导致最终的容量比之前的稍大，详情见源码</li><li>如果一次性增加多个元素之后，容量需要一口气扩大很多，而不是逐一扩大，需要重新计算所需要的容量，当次扩容与逐一增加的规律有不同</li></ul><p>若<code>slice[start:index:max]</code>，则<code>len=index-start</code>，<code>cap=max-index</code>，测试如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">slice := []int&#123;10, 20, 30, 40, 50, 60&#125;</span><br><span class="line">println(len(slice), cap(slice))  // 6 6</span><br><span class="line"></span><br><span class="line">slice1 := slice[2:5:5]</span><br><span class="line">println(len(slice1), cap(slice1)) // 3 4</span><br><span class="line"></span><br><span class="line">slice2 := slice[1:3:5]</span><br><span class="line">println(len(slice2), cap(slice2)) // 2 4</span><br></pre></td></tr></table></figure><h2 id="new与make的区别"><a href="#new与make的区别" class="headerlink" title="new与make的区别"></a><em><strong>new与make的区别</strong></em></h2><ul><li>二者都是用来做内存分配的。</li><li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li><li>new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li></ul><h2 id="Map底层"><a href="#Map底层" class="headerlink" title="Map底层"></a><em><strong>Map底层</strong></em></h2><p>函数：<code>src/runtime/map.go</code><br>源码分析：</br><br><a href="https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access">https://eddycjy.gitbook.io/golang/di-7-ke-shu-ju-jie-gou/map-access</a></br><br><a href="https://zhuanlan.zhihu.com/p/495998623">https://zhuanlan.zhihu.com/p/495998623</a></br><br>Map底层存储方式为数组，对key进行hash计算，把<code>K</code> <code>V</code> 作为一个结构体存入数组。在存储时key不能重复，当key重复时，value进行覆盖。</p><h3 id="key冲突解决方法："><a href="#key冲突解决方法：" class="headerlink" title="key冲突解决方法："></a><em>key冲突解决方法：</em></h3><ul><li>线性探测：若数组当前位置有值，则从当前位置往后逐一查找，直到查看空位置，此时可能会引起数组的扩容</li><li>拉链法：在key冲突的位置，下拉一个链表，将值存入链表中</li></ul><p>优劣势：</p><ul><li>拉链法比线性探测处理简单</li><li>线性探测查找是会被拉链法会更消耗时间</li><li>线性探测会更加容易导致扩容，而拉链不会</li><li>拉链存储了指针，所以空间上会比线性探测占用多一点</li><li>拉链是动态申请存储空间的，所以更适合链长不确定的</li></ul><p>GOLANG中解决key冲突的方法是<code>线性探测</code></p><h2 id="select经典用法"><a href="#select经典用法" class="headerlink" title="select经典用法"></a><em><strong>select经典用法</strong></em></h2><h3 id="用作超时判断"><a href="#用作超时判断" class="headerlink" title="用作超时判断"></a>用作超时判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var resChan = make(chan int)</span><br><span class="line">func test() &#123;</span><br><span class="line">    select &#123;</span><br><span class="line">    case data := &lt;-resChan:</span><br><span class="line">        doData(data)</span><br><span class="line">    case &lt;-time.After(time.Second * 3):</span><br><span class="line">        fmt.Println(&quot;request time out&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出处理"><a href="#退出处理" class="headerlink" title="退出处理"></a>退出处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//主线程（协程）中如下：</span><br><span class="line">var shouldQuit=make(chan struct&#123;&#125;)</span><br><span class="line">fun main()&#123;</span><br><span class="line">    select &#123;</span><br><span class="line">        case &lt;-c.shouldQuit:</span><br><span class="line">            cleanUp()</span><br><span class="line">            return</span><br><span class="line">        default:</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//再另外一个协程中，如果运行遇到非法操作或不可处理的错误，就向shouldQuit发送数据通知程序停止运行</span><br><span class="line">close(shouldQuit)</span><br></pre></td></tr></table></figure><h2 id="对象方法的调用"><a href="#对象方法的调用" class="headerlink" title="对象方法的调用"></a><em><strong>对象方法的调用</strong></em></h2><p>有以下这种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">    id   int</span><br><span class="line">    name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (self *User) Test() &#123;</span><br><span class="line">    fmt.Printf(&quot;%p, %v\n&quot;, self, self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    mExpression := (*User).Test</span><br><span class="line">    mExpression(&amp;User&#123;1, &quot;Tom&quot;&#125;) // 显式传递 receiver   这种方式第一次见</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以把<code>nil</code>转化为某个对象指针，然后调用对象方法 ，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type Data struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">func (Data) TestValue() &#123;&#125;</span><br><span class="line"></span><br><span class="line">func (*Data) TestPointer() &#123;&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var p *Data = nil</span><br><span class="line">    p.TestPointer()</span><br><span class="line"></span><br><span class="line">    (*Data)(nil).TestPointer() // method value</span><br><span class="line">    (*Data).TestPointer(nil)   // method expression</span><br><span class="line"></span><br><span class="line">    // p.TestValue()            // invalid memory address or nil pointer dereference</span><br><span class="line"></span><br><span class="line">    // (Data)(nil).TestValue()  // cannot convert nil to type Data</span><br><span class="line">    // Data.TestValue(nil)      // cannot use nil as type Data in function argument</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="chan通道"><a href="#chan通道" class="headerlink" title="chan通道"></a><em><strong>chan通道</strong></em></h2><p>1、不声明大小的<code>chan</code>是无缓冲的通道，又称为阻塞的通道，如<code>ch := make(chan int)</code></p><ul><li>无缓冲通道上的发送操作会阻塞，直到另一个goroutine在该通道上执行接收操作，才能发送成功。</li><li>如果接收操作先执行，接收方的goroutine将阻塞，直到另一个goroutine在该通道上发送一个值。</li><li>使用无缓冲通道进行通信将导致发送和接收的goroutine同步化。因此，无缓冲通道也被称为同步通道。</li></ul><p>2、通道遍历方式<code>range</code>和<code>select</code>的区别</p><h3 id="range"><a href="#range" class="headerlink" title="range"></a><strong>range</strong></h3><ul><li>在遍历时，如果 channel 没有关闭，则回出现 deadlock 的错误。 </li><li>在遍历时，如果 channel 已经关闭，则会正常遍历数据，遍历完后，就会退出遍历</li><li>对于nil channel，无论收发都会被阻塞。</li><li>写完 chan 之后一定要关闭close chan，否则主协程读的时候，会发生被阻塞。</li><li>已关闭的Channel(有缓冲的),如果继续读数据，得到的是零值(对于int，就是0), 如果没有关闭，读不到数据了。</li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a><strong>select</strong></h3><ul><li>除default外，每个case操作一个channel，要么读要么写。</li><li>除default外，各case执行顺序是随机的。</li><li>如果没有default语句, 则会阻塞等待任一case。</li><li>读操作要判断是否成功读取，关闭的channel也可以读取</li></ul><h2 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a><em><strong>GMP</strong></em></h2><p>1、在 IO 密集型场景下，可以适当调高 P 的数量，<code>runtime.GOMAXPROCS()</code>。</br><br>    因为 M 需要与 P 绑定才能运行，而 M 在执行 G 时某些操作会陷入系统调用，此时与 M 关联的 P 处于等待状态，如果系统调用一直不返回那么等待系统调用这段时间的 CPU 资源其实是被浪费的，虽然 runtime 中有 sysmon 监控线程可以抢占 G，此处就是抢占与 G 关联的 P，让 P 重新绑定一个 M 运行 G，但 sysmon 是周期性执行抢占的，在 sysmon 稳定运行后每隔 10ms 检查一次是否要抢占 P，操作系统中在 10ms 内可以执行多次线程切换，如果 P 处于系统调用状态还有需要运行的 G，这部分 G 得不到执行其实CPU资源是被浪费的。</p><h2 id="传递对象时用指针还是值"><a href="#传递对象时用指针还是值" class="headerlink" title="传递对象时用指针还是值"></a><em><strong>传递对象时用指针还是值</strong></em></h2><ul><li>传值会拷贝整个对象，而传指针只会拷贝指针地址，指向的对象是同一个。传指针可以减少值的拷贝，<br>但是会导致内存分配逃逸到堆中，增加垃圾回收(GC)的负担。在对象频繁创建和删除的场景下，传递指<br>针导致的GC开销可能会严重影响性能。</li><li>一般情况下，对于需要修改原对象值，或占用内存比较大的结构体，选择传指针。对于只读的占用内存<br>较小的结构体，直接传值能够获得更好的性能。</li></ul><h2 id="限流器"><a href="#限流器" class="headerlink" title="限流器"></a><em><strong>限流器</strong></em></h2><p>限流器作用：X时间内超过N次请求，则拒绝，作用于服务降级<br>限流器算法：固定窗口、滑动窗口、滑动日志、漏桶、令牌桶</br><br>官方限流器仓库：<a href="http://golang.org/x/time/rate">golang.org&#x2F;x&#x2F;time&#x2F;rate</a></br><br>GOLANG限流器：<a href="https://www.cyhone.com/articles/usage-of-golang-rate/">https://www.cyhone.com/articles/usage-of-golang-rate/</a></br><br>基于JAVA的各种算法实现：<a href="https://www.cnblogs.com/liqiangchn/p/14253924.html">https://www.cnblogs.com/liqiangchn/p/14253924.html</a></p><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a><strong>TIPS</strong></h1><ul><li>GOLANG中有值类型(int系列、float系列、bool、string、数组和结构体等)和引用类型(指针、slice切片、管道channel、接口interface、map、函数等)，值类型可以直接声明变量值，引用类型需要用make来预先分配内存空间</li><li>如果一个slice被多个地方引用，建议<code>cap</code>和<code>len</code>相等。如果不等，则在<code>append</code>的之后，引用的是同一个地址，导致其他地方使用到了被修改后的数据，引起问题。<code>cap</code>和<code>len</code>相等之后，<code>append</code>会重新迁移到新的地址，进而不影响原地址的引用</li><li><code>func (T) Name()</code>和<code>func (*T) Name()</code>的区别：<code>func (T) Name()</code>运行时将接收者的值复制一份，修改接受者T的属性无效，<code>func (*T) Name()</code>修改接受者T的属性值有效，个人推荐用指针型接受者，废指针型每次需要拷贝，增加内存的分配，降低速度，且无法实操接受者的值</li><li><code>map</code>的<code>range</code>是随机的，每次<code>range</code>出来的顺序都不一样，因为底层在遍历的时候会生成一个随机数，随机从一个<code>bucket</code>开始遍历</li><li><code>select</code>如果同时有多个条件满足，则会随机公平的选择一个<code>case</code>来运行，如果有<code>default</code>则会立即运行<code>default</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章收藏-JAVA</title>
      <link href="/post/53239/"/>
      <url>/post/53239/</url>
      
        <content type="html"><![CDATA[<h3 id="RAFT算法"><a href="#RAFT算法" class="headerlink" title="RAFT算法"></a>RAFT算法</h3><p><a href="https://blog.csdn.net/lxlmycsdnfree/article/details/78984752">https://blog.csdn.net/lxlmycsdnfree/article/details/78984752</a></p><h3 id="java日志系统"><a href="#java日志系统" class="headerlink" title="java日志系统"></a>java日志系统</h3><p><a href="https://www.cnblogs.com/chenhongliang/p/5312517.html">https://www.cnblogs.com/chenhongliang/p/5312517.html</a></p><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p><a href="https://www.cnblogs.com/javalyy/p/8882144.html">https://www.cnblogs.com/javalyy/p/8882144.html</a><br><a href="https://blog.csdn.net/rdhj5566/article/details/50646599">https://blog.csdn.net/rdhj5566/article/details/50646599</a></p><h3 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h3><p><a href="https://www.cnblogs.com/javahr/p/8318728.html">https://www.cnblogs.com/javahr/p/8318728.html</a><br><a href="http://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/util/CronExpression.html">http://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/util/CronExpression.html</a></p><h3 id="mysql事务配置："><a href="#mysql事务配置：" class="headerlink" title="mysql事务配置："></a>mysql事务配置：</h3><p><a href="https://blog.csdn.net/qq_19167629/article/details/80426625">https://blog.csdn.net/qq_19167629&#x2F;article&#x2F;details&#x2F;80426625</a></p><h3 id="Hibernate相关参数说明，巨详细"><a href="#Hibernate相关参数说明，巨详细" class="headerlink" title="Hibernate相关参数说明，巨详细"></a>Hibernate相关参数说明，巨详细</h3><p><a href="https://blog.csdn.net/qq_25827845/article/details/53242219">https://blog.csdn.net/qq_25827845&#x2F;article&#x2F;details&#x2F;53242219</a></p><h3 id="jvm序列化工具性能比较"><a href="#jvm序列化工具性能比较" class="headerlink" title="jvm序列化工具性能比较"></a>jvm序列化工具性能比较</h3><p><a href="https://github.com/eishay/jvm-serializers/wiki">https://github.com/eishay/jvm-serializers/wiki</a></p><h3 id="BlockingQueque-阻塞队列"><a href="#BlockingQueque-阻塞队列" class="headerlink" title="BlockingQueque 阻塞队列"></a>BlockingQueque 阻塞队列</h3><p><a href="https://blog.csdn.net/qq_42135428/article/details/80285737">https://blog.csdn.net/qq_42135428&#x2F;article&#x2F;details&#x2F;80285737</a></p><h3 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h3><p><a href="https://www.jianshu.com/p/1b4b3c738d8c">https://www.jianshu.com/p/1b4b3c738d8c</a></p><h3 id="Redis-三个工具比较（Jedis、redisson、Lettuce）"><a href="#Redis-三个工具比较（Jedis、redisson、Lettuce）" class="headerlink" title="Redis 三个工具比较（Jedis、redisson、Lettuce）"></a>Redis 三个工具比较（Jedis、redisson、Lettuce）</h3><p><a href="https://www.cnblogs.com/liyan492/p/9858548.html">https://www.cnblogs.com/liyan492/p/9858548.html</a></p><h3 id="awk基本语法"><a href="#awk基本语法" class="headerlink" title="awk基本语法"></a>awk基本语法</h3><p><a href="https://www.jianshu.com/p/cae3cccd2ee6">https://www.jianshu.com/p/cae3cccd2ee6</a></p><h3 id="最左前置原则"><a href="#最左前置原则" class="headerlink" title="最左前置原则"></a>最左前置原则</h3><p><a href="https://www.cnblogs.com/lanqi/p/10282279.html">https://www.cnblogs.com/lanqi/p/10282279.html</a></p><h3 id="分布式RPC框架性能大比拼"><a href="#分布式RPC框架性能大比拼" class="headerlink" title="分布式RPC框架性能大比拼"></a>分布式RPC框架性能大比拼</h3><p><a href="https://colobu.com/2016/09/05/benchmarks-of-popular-rpc-frameworks/">https://colobu.com/2016/09/05/benchmarks-of-popular-rpc-frameworks/</a></p><h3 id="公平锁VS非公平锁"><a href="#公平锁VS非公平锁" class="headerlink" title="公平锁VS非公平锁"></a>公平锁VS非公平锁</h3><p><a href="https://www.jianshu.com/p/f584799f1c77">https://www.jianshu.com/p/f584799f1c77</a></p><h3 id="java的15中锁"><a href="#java的15中锁" class="headerlink" title="java的15中锁"></a>java的15中锁</h3><p><a href="https://segmentfault.com/a/1190000017766364">https://segmentfault.com/a/1190000017766364</a></p><h3 id="synchronized与lock"><a href="#synchronized与lock" class="headerlink" title="synchronized与lock"></a>synchronized与lock</h3><p><a href="https://juejin.im/post/5db943fd51882564635002c2">https://juejin.im/post/5db943fd51882564635002c2</a></p><h3 id="线程池拒绝策略"><a href="#线程池拒绝策略" class="headerlink" title="线程池拒绝策略"></a>线程池拒绝策略</h3><p><a href="http://www.kailing.pub/article/index/arcid/255.html">http://www.kailing.pub/article/index/arcid/255.html</a></p><h3 id="数据结构可视工具"><a href="#数据结构可视工具" class="headerlink" title="数据结构可视工具"></a>数据结构可视工具</h3><p><a href="http://algoanim.ide.sk/?page=categories">http://algoanim.ide.sk/?page=categories</a><br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles&#x2F;visualization&#x2F;Algorithms.html</a></p><h3 id="HashMap相关"><a href="#HashMap相关" class="headerlink" title="HashMap相关"></a>HashMap相关</h3><p>hashMap扩容相关：<a href="https://blog.csdn.net/u014532901/article/details/78936283">https://blog.csdn.net/u014532901/article/details/78936283</a><br><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">https://tech.meituan.com/2016/06/24/java-hashmap.html</a></p><h3 id="DUBBO相关知识点"><a href="#DUBBO相关知识点" class="headerlink" title="DUBBO相关知识点"></a>DUBBO相关知识点</h3><p>汇总：<a href="https://zhuanlan.zhihu.com/p/45846108">https://zhuanlan.zhihu.com/p/45846108</a><br>负载均衡：<a href="http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html">http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html</a><br>集群容错：<a href="https://dubbo.apache.org/zh-cn/blog/dubbo-cluster-error-handling.html">https://dubbo.apache.org/zh-cn/blog/dubbo-cluster-error-handling.html</a><br>服务暴露：<a href="https://juejin.im/post/5e40f28ff265da5714161f7b">https://juejin.im/post/5e40f28ff265da5714161f7b</a></p><h3 id="hystrix使用"><a href="#hystrix使用" class="headerlink" title="hystrix使用"></a>hystrix使用</h3><p><a href="https://www.jianshu.com/p/b9af028efebb">https://www.jianshu.com/p/b9af028efebb</a><br><a href="https://www.iteye.com/blog/hot66hot-2155036">https://www.iteye.com/blog/hot66hot-2155036</a></p><h3 id="TCP-amp-UDP"><a href="#TCP-amp-UDP" class="headerlink" title="TCP  &amp;  UDP"></a>TCP  &amp;  UDP</h3><p><a href="https://blog.csdn.net/yichu5074/article/details/80991635">https://blog.csdn.net/yichu5074/article/details/80991635</a></p><h3 id="一致性算法简介"><a href="#一致性算法简介" class="headerlink" title="一致性算法简介"></a>一致性算法简介</h3><p><a href="https://www.bilibili.com/video/av21667358/">https://www.bilibili.com/video/av21667358/</a></p><h3 id="CAP不能100-的原因"><a href="#CAP不能100-的原因" class="headerlink" title="CAP不能100%的原因"></a>CAP不能100%的原因</h3><p><a href="https://blog.csdn.net/yeyazhishang/article/details/80758354">https://blog.csdn.net/yeyazhishang/article/details/80758354</a></p><h3 id="G1垃圾回收器工作流程"><a href="#G1垃圾回收器工作流程" class="headerlink" title="G1垃圾回收器工作流程"></a>G1垃圾回收器工作流程</h3><p><a href="https://blog.csdn.net/j3T9Z7H/article/details/80074460">https://blog.csdn.net/j3T9Z7H/article/details/80074460</a></p><h3 id="序列化方式比较"><a href="#序列化方式比较" class="headerlink" title="序列化方式比较"></a>序列化方式比较</h3><p><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html</a></p><h3 id="线程池运行-核心线程怎么保存，非核心怎么销毁"><a href="#线程池运行-核心线程怎么保存，非核心怎么销毁" class="headerlink" title="线程池运行   核心线程怎么保存，非核心怎么销毁"></a>线程池运行   核心线程怎么保存，非核心怎么销毁</h3><p><a href="https://blog.csdn.net/anhenzhufeng/article/details/88870374">https://blog.csdn.net/anhenzhufeng/article/details/88870374</a></p><h3 id="分布式唯一ID的几种生成方案"><a href="#分布式唯一ID的几种生成方案" class="headerlink" title="分布式唯一ID的几种生成方案"></a>分布式唯一ID的几种生成方案</h3><p><a href="https://juejin.im/post/5b3a23746fb9a024e15cad79">https://juejin.im/post/5b3a23746fb9a024e15cad79</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty</title>
      <link href="/post/64849/"/>
      <url>/post/64849/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Netty参数设置"><a href="#1、Netty参数设置" class="headerlink" title="1、Netty参数设置"></a><strong>1、Netty参数设置</strong></h1><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><em><strong>通用参数</strong></em></td><td></td></tr><tr><td>CONNECT_TIMEOUT_MILLIS</td><td>Netty参数，连接超时毫秒数，默认值30000毫秒即30秒。</td></tr><tr><td>MAX_MESSAGES_PER_READ</td><td>Netty参数，一次Loop读取的最大消息数，对于ServerChannel或者NioByteChannel，默认值为16，其他Channel默认值为1。默认值这样设置，是因为：ServerChannel需要接受足够多的连接，保证大吞吐量，NioByteChannel可以减少不必要的系统调用select。</td></tr><tr><td>WRITE_SPIN_COUNT</td><td>Netty参数，一个Loop写操作执行的最大次数，默认值为16。也就是说，对于大数据量的写操作至多进行16次，如果16次仍没有全部写完数据，此时会提交一个新的写任务给EventLoop，任务将在下次调度继续执行。这样，其他的写请求才能被响应不会因为单个大数据量写请求而耽误。</td></tr><tr><td>ALLOCATOR</td><td>Netty参数，ByteBuf的分配器，默认值为ByteBufAllocator.DEFAULT，4.0版本为UnpooledByteBufAllocator，4.1版本为PooledByteBufAllocator。该值也可以使用系统参数io.netty.allocator.type配置，使用字符串值：”unpooled”，”pooled”。</td></tr><tr><td>RCVBUF_ALLOCATOR</td><td>Netty参数，用于Channel分配接受Buffer的分配器，默认值为AdaptiveRecvByteBufAllocator.DEFAULT，是一个自适应的接受缓冲区分配器，能根据接受到的数据自动调节大小。可选值为FixedRecvByteBufAllocator，固定大小的接受缓冲区分配器。</td></tr><tr><td>AUTO_READ</td><td>Netty参数，自动读取，默认值为True。Netty只在必要的时候才设置关心相应的I&#x2F;O事件。对于读操作，需要调用channel.read()设置关心的I&#x2F;O事件为OP_READ，这样若有数据到达才能读取以供用户处理。该值为True时，每次读操作完毕后会自动调用channel.read()，从而有数据到达便能读取；否则，需要用户手动调用channel.read()。需要注意的是：当调用config.setAutoRead(boolean)方法时，如果状态由false变为true，将会调用channel.read()方法读取数据；由true变为false，将调用config.autoReadCleared()方法终止数据读取。</td></tr><tr><td>WRITE_BUFFER_HIGH_WATER_MARK</td><td>Netty参数，写高水位标记，默认值64KB。如果Netty的写缓冲区中的字节超过该值，Channel的isWritable()返回False。</td></tr><tr><td>WRITE_BUFFER_LOW_WATER_MARK</td><td>Netty参数，写低水位标记，默认值32KB。当Netty的写缓冲区中的字节超过高水位之后若下降到低水位，则Channel的isWritable()返回True。写高低水位标记使用户可以控制写入数据速度，从而实现流量控制。推荐做法是：每次调用channl.write(msg)方法首先调用channel.isWritable()判断是否可写。</td></tr><tr><td>MESSAGE_SIZE_ESTIMATOR</td><td>Netty参数，消息大小估算器，默认为DefaultMessageSizeEstimator.DEFAULT。估算ByteBuf、ByteBufHolder和FileRegion的大小，其中ByteBuf和ByteBufHolder为实际大小，FileRegion估算值为0。该值估算的字节数在计算水位时使用，FileRegion为0可知FileRegion不影响高低水位。</td></tr><tr><td>SINGLE_EVENTEXECUTOR_PER_GROUP</td><td>Netty参数，单线程执行ChannelPipeline中的事件，默认值为True。该值控制执行ChannelPipeline中执行ChannelHandler的线程。如果为Trye，整个pipeline由一个线程执行，这样不需要进行线程切换以及线程同步，是Netty4的推荐做法；如果为False，ChannelHandler中的处理过程会由Group中的不同线程执行。</td></tr><tr><td><em><strong>SocketChannel参数</strong></em></td><td></td></tr><tr><td>SO_RCVBUF</td><td>Socket参数，TCP数据接收缓冲区大小。该缓冲区即TCP接收滑动窗口，linux操作系统可使用命令：cat&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_rmem查询其大小。一般情况下，该值可由用户在任意时刻设置，但当设置值超过64KB时，需要在连接到远端之前设置。</td></tr><tr><td>SO_SNDBUF</td><td>Socket参数，TCP数据发送缓冲区大小。该缓冲区即TCP发送滑动窗口，linux操作系统可使用命令：cat&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_smem查询其大小。</td></tr><tr><td>TCP_NODELAY</td><td>TCP参数，立即发送数据，默认值为Ture（Netty默认为True而操作系统默认为False）。该值设置Nagle算法的启用，改算法将小的碎片数据连接成更大的报文来最小化所发送的报文的数量，如果需要发送一些较小的报文，则需要禁用该算法。Netty默认禁用该算法，从而最小化报文传输延时。</td></tr><tr><td>SO_KEEPALIVE</td><td>Socket参数，连接保活，默认值为False。启用该功能时，TCP会主动探测空闲连接的有效性。可以将此功能视为TCP的心跳机制，需要注意的是：默认的心跳间隔是7200s即2小时。Netty默认关闭该功能。</td></tr><tr><td>SO_REUSEADDR</td><td>Socket参数，地址复用，默认值False。有四种情况可以使用：(1).当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你希望启动的程序的socket2要占用该地址和端口，比如重启服务且保持先前端口。(2).有多块网卡或用IPAlias技术的机器在同一端口启动多个进程，但每个进程绑定的本地IP地址不能相同。(3).单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。(4).完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。</td></tr><tr><td>SO_LINGER</td><td>Socket参数，关闭Socket的延迟时间，默认值为-1，表示禁用该功能。-1表示socket.close()方法立即返回，但OS底层会将发送缓冲区全部发送到对端。0表示socket.close()方法立即返回，OS放弃发送缓冲区的数据直接向对端发送RST包，对端收到复位错误。非0整数值表示调用socket.close()方法的线程被阻塞直到延迟时间到或发送缓冲区中的数据发送完毕，若超时，则对端会收到复位错误。</td></tr><tr><td>IP_TOS</td><td>IP参数，设置IP头部的Type-of-Service字段，用于描述IP包的优先级和QoS选项。</td></tr><tr><td>ALLOW_HALF_CLOSURE</td><td>Netty参数，一个连接的远端关闭时本地端是否关闭，默认值为False。值为False时，连接自动关闭；为True时，触发ChannelInboundHandler的userEventTriggered()方法，事件为ChannelInputShutdownEvent。</td></tr><tr><td><em><strong>ServerSocketChannel参数</strong></em></td><td></td></tr><tr><td>SO_RCVBUF</td><td>已说明，需要注意的是：当设置值超过64KB时，需要在绑定到本地端口前设置。该值设置的是由ServerSocketChannel使用accept接受的SocketChannel的接收缓冲区。</td></tr><tr><td>SO_REUSEADDR</td><td>已说明</td></tr><tr><td>SO_BACKLOG</td><td>Socket参数，服务端接受连接的队列长度，如果队列已满，客户端连接将被拒绝。默认值，Windows为200，其他为128。</td></tr><tr><td><em><strong>DatagramChannel参数</strong></em></td><td></td></tr><tr><td>SO_BROADCAST</td><td>Socket参数，设置广播模式。</td></tr><tr><td>SO_RCVBUF</td><td>已说明</td></tr><tr><td>SO_SNDBUF</td><td>已说明</td></tr><tr><td>SO_REUSEADDR</td><td>已说明</td></tr><tr><td>IP_MULTICAST_LOOP_DISABLED</td><td>对应IP参数IP_MULTICAST_LOOP，设置本地回环接口的多播功能。由于IP_MULTICAST_LOOP返回True表示关闭，所以Netty加上后缀_DISABLED防止歧义。</td></tr><tr><td>IP_MULTICAST_ADDR</td><td>对应IP参数IP_MULTICAST_IF，设置对应地址的网卡为多播模式</td></tr><tr><td>IP_MULTICAST_IF</td><td>对应IP参数IP_MULTICAST_IF2，同上但支持IPV6。</td></tr><tr><td>IP_MULTICAST_TTL</td><td>IP参数，多播数据报的time-to-live即存活跳数。</td></tr><tr><td>IP_TOS</td><td>已说明</td></tr><tr><td>DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION</td><td>Netty参数，DatagramChannel注册的EventLoop即表示已激活。</td></tr></tbody></table><h1 id="2、增大Linux并发配置"><a href="#2、增大Linux并发配置" class="headerlink" title="2、增大Linux并发配置"></a><strong>2、增大Linux并发配置</strong></h1><p>使用<code>ulimit -n 查看linux系统对用户打开文件数的软设置和硬设置</code></p><h1 id="3、netty内置的常用的Handler"><a href="#3、netty内置的常用的Handler" class="headerlink" title="3、netty内置的常用的Handler"></a><strong>3、netty内置的常用的Handler</strong></h1><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>1、OIO单线程下仅可以有一个客户端，可以通过线程池创建多个客户端，但是机器消耗性能。<br>2、客户端关闭的时候报错，是因为客户端已经关闭了，但是服务器认为channel还未关闭，还在玩channel里面写数据，导致报错。<br>需要判断读取到的数据不为0才往channel里面写数据。</p><p>1、netty出入调用链模拟实现<br><img src="http://localhost:9000/api/file/getImage?fileId=5d73c8e1b9963029fc000039"><br>2、写数据的两种方式（没有测试过，主要是不会）<br><img src="http://localhost:9000/api/file/getImage?fileId=5d73c8e1b9963029fc000038"><br>3、这种写入方式模拟<br><img src="http://localhost:9000/api/file/getImage?fileId=5d7676b0b9963029fc00003c"><br>4、java NIO的epoll和netty的epoll，其中EpollEventLoopGroup只能在Linux环境上使用<br><img src="http://localhost:9000/api/file/getImage?fileId=5d80b499b9963029fc000048"><br>5、netty的最佳实践<br><img src="http://localhost:9000/api/file/getImage?fileId=5d80b917b9963029fc000049"><br>6、直接缓存区：<br><img src="http://localhost:9000/api/file/getImage?fileId=5d85dad4b9963029fc00004e"><br>7、Netty有可能导致资源泄漏，需要提供不同的策略来监控泄漏<br><img src="http://localhost:9000/api/file/getImage?fileId=5d85dad4b9963029fc00004b"><br>8、操作pipe、channel 和操作context的区别<br><img src="http://localhost:9000/api/file/getImage?fileId=5d85dad4b9963029fc00004d"><br>9、netty3 和netty4 的I&#x2F;O 操作区别<br><img src="http://localhost:9000/api/file/getImage?fileId=5d85dad4b9963029fc00004c"><br>10、WebSocket内置的类型<br><img src="http://localhost:9000/api/file/getImage?fileId=5d8cde5ab9963029fc00004f"><br>11、NIO借助点餐理解<br><img src="http://localhost:9000/api/file/getImage?fileId=5db1e12ab9963029fc000055"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j配置文件详解</title>
      <link href="/post/7889/"/>
      <url>/post/7889/</url>
      
        <content type="html"><![CDATA[<h1 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a><strong>log4j.xml</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE log4j:configuration PUBLIC &quot;-//log4j/log4j Configuration//EN&quot; &quot;log4j.dtd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 日志输出到控制台 --&gt;</span><br><span class="line">    &lt;appender name=&quot;console&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 日志输出格式 --&gt;</span><br><span class="line">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!--过滤器设置输出的级别--&gt;</span><br><span class="line">        &lt;filter class=&quot;org.apache.log4j.varia.LevelRangeFilter&quot;&gt;</span><br><span class="line">            &lt;!-- 设置日志输出的最小级别 --&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;!-- 设置日志输出的最大级别 --&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 输出日志到文件 --&gt;</span><br><span class="line">    &lt;appender name=&quot;fileAppender&quot; class=&quot;org.apache.log4j.FileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 输出文件全路径名--&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件--&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;!--是否启用缓存，默认false--&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--缓存大小，依赖上一个参数(bufferedIO), 默认缓存大小8K --&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志输出格式 --&gt;</span><br><span class="line">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 输出日志到文件，当文件大小达到一定阈值时，自动备份 --&gt;</span><br><span class="line">    &lt;!-- FileAppender子类 --&gt;</span><br><span class="line">    &lt;appender name=&quot;rollingAppender&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 日志文件全路径名 --&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件--&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 保存备份日志的最大个数，默认值是：1 --&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值是：10MB --&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 设置日志输出的样式 --&gt;`</span><br><span class="line">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">            &lt;!-- 日志输出格式 --&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 --&gt;</span><br><span class="line">    &lt;appender name=&quot;dailyRollingAppender&quot; class=&quot;org.apache.log4j.DailyRollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 文件文件全路径名 --&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;!-- 设置日志备份频率，默认：为每天一个日志文件 --&gt;</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">        &lt;!--每分钟一个备份--&gt;</span><br><span class="line">        &lt;!----&gt;</span><br><span class="line">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 1. 指定logger的设置，additivity是否遵循缺省的继承机制 2. 当additivity=&quot;false&quot;时，root中的配置就失灵了，不遵循缺省的继承机制 3. 代码中使用Logger.getLogger(&quot;logTest&quot;)获得此输出器，且不会使用根输出器 --&gt;</span><br><span class="line">    &lt;logger name=&quot;logTest&quot; additivity=&quot;false&quot;&gt;</span><br><span class="line">        &lt;level value =&quot;INFO&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;dailyRollingAppender&quot;/&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!-- 根logger的设置，若代码中未找到指定的logger，则会根据继承机制，使用根logger--&gt;</span><br><span class="line">    &lt;root&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;console&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;fileAppender&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;rollingAppender&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;dailyRollingAppender&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a><strong>log4j2.xml</strong></h1><p>建议粗粗了解之后，后面的详情都参考官网<br><a href="http://logging.apache.org/log4j/2.x/manual/appenders.html">http://logging.apache.org/log4j/2.x/manual/appenders.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--日志级别以及优先级排序: OFF&gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="line">&lt;!-- Configuration 属性等信息配置位置 status 用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部的详细输出 monitorInterval 自动检测修改配置 文件和重新配置本身,设置间隔秒数 --&gt;</span><br><span class="line">&lt;configuration status=&quot;WARN&quot;&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 --&gt;</span><br><span class="line">        &lt;!-- $&#123;web:rootDir&#125;是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 --&gt;</span><br><span class="line">        &lt;!-- &lt;property name=&quot;basePath&quot;&gt;d:/qfxSpringMVCMybaitsDemoLogs&lt;/property&gt; --&gt;</span><br><span class="line">        &lt;property name=&quot;basePath&quot;&gt;$&#123;web:rootDir&#125;/log4j2Logs&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 可以参考https://blog.csdn.net/maihilton/article/details/80814739，官网没有找到相关配置 控制台默认输出格式,&quot;%-5level&quot;:日志级别,&quot;%l&quot;:输出完整的错误位置,是小写的L %c&#123;参数&#125; 或 %logger&#123;参数&#125; 输出日志名称 %C&#123;参数&#125; 或 %class&#123;参数&#125; 输出类型 %d&#123;参数&#125; 输出时间 %F 或者 %file 显示调用logger的源文件名 highlight&#123;pattern&#125;&#123;style&#125; 高亮显示 %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数，会影响性能 %L 输出错误行号 %m 或 %msg 或 %message 输出错误信息 %M 或 %method 显示调用logger的方法名 %n 输出换行符 %p 或者 %level 显示该条日志的优先级 INFO DEBUG %t 或 %thread 输出产生该日志事件的线程名 %r 显示从程序启动时到记录该条日志时已经经过的毫秒数 %20 右对齐，不足20个字符则在信息前面用空格补足，超过20个字符则保留原信息 %-20 左对齐，不足20个字符则在信息后面用空格补足，超过20个字符则保留原信息 %.30 如果信息超过30个字符，则只保留最后30个字符 %20.30 右对齐，不足20个字符则在信息前面用空格补足，超过30个字符则只保留最后30个字符 %-20.30 左对齐，不足20个字符则在信息后面用空格补足，超过30个字符则只保留最后30个字符 --&gt;</span><br><span class="line">        &lt;property name=&quot;console_log_pattern&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %l - %m%n&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志默认切割的最小单位 --&gt;</span><br><span class="line">        &lt;property name=&quot;every_file_size&quot;&gt;20MB&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志默认输出级别 --&gt;</span><br><span class="line">        &lt;property name=&quot;output_log_level&quot;&gt;DEBUG&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志默认存放路径(所有级别日志) --&gt;</span><br><span class="line">        &lt;property name=&quot;rolling_fileName&quot;&gt;$&#123;basePath&#125;/all.log&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按&quot;年月&quot;建立的文件夹下面并进行压缩,作为存档 --&gt;</span><br><span class="line">        &lt;property name=&quot;rolling_filePattern&quot;&gt;$&#123;basePath&#125;/%d&#123;yyyy-MM&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个 --&gt;</span><br><span class="line">        &lt;property name=&quot;rolling_max&quot;&gt;50&lt;/property&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 控制台显示的日志最低级别 --&gt;</span><br><span class="line">        &lt;property name=&quot;console_print_level&quot;&gt;DEBUG&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/Properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--定义appender --&gt;</span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!-- 用来定义输出到控制台的配置 --&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot;&gt;</span><br><span class="line">            &lt;!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) --&gt;</span><br><span class="line">            &lt;ThresholdFilter level=&quot;$&#123;console_print_level&#125;&quot;/&gt;</span><br><span class="line">            &lt;!-- 设置输出格式,不设置默认为:%m%n --&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;$&#123;console_log_pattern&#125;&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 打印root中指定的level级别以上的日志到文件 --&gt;</span><br><span class="line">        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;$&#123;rolling_fileName&#125;&quot; filePattern=&quot;$&#123;rolling_filePattern&#125;&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;$&#123;log_pattern&#125;&quot;/&gt;</span><br><span class="line">            &lt;SizeBasedTriggeringPolicy size=&quot;$&#123;every_file_size&#125;&quot;/&gt;</span><br><span class="line">            &lt;!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 --&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;$&#123;rolling_max&#125;&quot;/&gt;</span><br><span class="line">            &lt;!-- 匹配INFO以及以上级别 --&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;INFO&quot;/&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;INFO&quot;/&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingFile&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 指定时间生成日志 --&gt;</span><br><span class="line">        &lt;Appenders&gt;</span><br><span class="line">            &lt;RollingRandomAccessFile name=&quot;logdaily&quot; fileName=&quot;$&#123;LOG_HOME&#125;/app.log&quot; filePattern=&quot;$&#123;LOG_HOME&#125;/app-%d&#123;yyyy-MM-dd&#125;.log&quot;&gt;  </span><br><span class="line">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;  </span><br><span class="line">            &lt;Policies&gt;  </span><br><span class="line">                &lt;!-- &lt;CronTriggeringPolicy schedule=&quot;0 0 * * * ?&quot;/&gt;  --&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot;/&gt;  </span><br><span class="line">            &lt;/Policies&gt; </span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt; </span><br><span class="line">            &lt;/RollingRandomAccessFile&gt;  </span><br><span class="line">        &lt;/Appenders&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 指定大小生成日志 --&gt;</span><br><span class="line">        &lt;Appenders&gt;  </span><br><span class="line">            &lt;RollingRandomAccessFile name=&quot;logsize&quot; fileName=&quot;$&#123;LOG_HOME&#125;/app.log&quot; filePattern=&quot;$&#123;LOG_HOME&#125;/error-%i.log&quot;&gt;  </span><br><span class="line">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;  </span><br><span class="line">            &lt;Policies&gt;  </span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;10 MB&quot;/&gt;  </span><br><span class="line">            &lt;/Policies&gt; </span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;  </span><br><span class="line">            &lt;/RollingRandomAccessFile&gt;  </span><br><span class="line">        &lt;/Appenders&gt; </span><br><span class="line">        </span><br><span class="line">        &lt;!-- 直接输出文件 --&gt;</span><br><span class="line">        &lt;File name=&quot;MyFile&quot; fileName=&quot;logs/app.log&quot;&gt;</span><br><span class="line">          &lt;PatternLayout&gt;</span><br><span class="line">            &lt;Pattern&gt;$&#123;log_pattern&#125;&lt;/Pattern&gt;</span><br><span class="line">          &lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/File&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--然后定义logger,只有定义了logger并引入的appender,appender才会生效 --&gt;</span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!-- 指定对应类的日志打印信息 --&gt;</span><br><span class="line">        &lt;logger name=&quot;java.sql&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;Console&quot;/&gt;</span><br><span class="line">        &lt;/logger&gt;</span><br><span class="line">        &lt;!--建立一个默认的root的logger --&gt;</span><br><span class="line">        &lt;root level=&quot;$&#123;output_log_level&#125;&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;RollingFile&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;Console&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;MyFile&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;logdaily&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;logsize&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对log4j2性能测试如下：<br>测试代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private static Logger logger = LoggerFactory.getLogger(XXX.class);</span><br><span class="line"></span><br><span class="line">public static void main(String args[]) throws Exception &#123;</span><br><span class="line">    test(1, 100, 100);</span><br><span class="line">    // -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span><br><span class="line">    int[] threadPool = &#123;1, 10, 20, 50&#125;;</span><br><span class="line">    int[] thread = &#123;1, 10, 100&#125;;</span><br><span class="line">    int[] run = &#123;100, 1000, 10000, 20000&#125;;</span><br><span class="line">    for (int tp : threadPool) &#123;</span><br><span class="line">        for (int t : thread) &#123;</span><br><span class="line">            for (int r : run) &#123;</span><br><span class="line">                long l = System.currentTimeMillis();</span><br><span class="line">                test(tp, t, r);</span><br><span class="line">                long cost = System.currentTimeMillis() - l;</span><br><span class="line">                System.out.println(&quot;线程池大小&quot; + tp + &quot;\t启用线程&quot; + t + &quot;\t执行次数&quot; + (t * r) + &quot;\t耗时&quot; + cost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void test(int threadPool, int threadNum, int runNum) throws Exception &#123;</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(threadPool);</span><br><span class="line">    CountDownLatch count = new CountDownLatch(threadNum * runNum);</span><br><span class="line">    int i = -1;</span><br><span class="line">    while (++i &lt; threadNum) &#123;</span><br><span class="line">        service.execute(() -&gt; &#123;</span><br><span class="line">            int j = -1;</span><br><span class="line">            while (++j &lt; runNum) &#123;</span><br><span class="line">                count.countDown();</span><br><span class="line">                logger.info(&quot;hello, &#123;&#125;&quot;, 1);</span><br><span class="line">                logger.debug(&quot;hello, &#123;&#125;&quot;, 1);</span><br><span class="line">                logger.warn(&quot;hello, &#123;&#125;&quot;, 1);</span><br><span class="line">                logger.error(&quot;hello, &#123;&#125;&quot;, 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    count.await();</span><br><span class="line">    service.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a><strong>TIPS</strong></h2><ul><li>使用<Async>标签  异步队列是BockingQueue，队列默认大小是128</li><li>使用<AsyncLogger>标签   异步队列是Disruptor队列默认大小是4096</li></ul><p>在一定误差的允许下，可以看出，全异步 &gt; 混合异步 &gt; 同步</p><table><thead><tr><th>线程池大小</th><th>线程</th><th>次数</th><th>VM option</th><th>同步</th><th>appender异步</th><th>logger异步</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100</td><td>48</td><td>107</td><td>3</td><td>18</td></tr><tr><td>1</td><td>1</td><td>1000</td><td>17</td><td>55</td><td>31</td><td>66</td></tr><tr><td>1</td><td>1</td><td>10000</td><td>34</td><td>296</td><td>252</td><td>683</td></tr><tr><td>1</td><td>1</td><td>20000</td><td>69</td><td>340</td><td>420</td><td>1271</td></tr><tr><td>1</td><td>10</td><td>1000</td><td>3</td><td>19</td><td>20</td><td>64</td></tr><tr><td>1</td><td>10</td><td>10000</td><td>17</td><td>172</td><td>200</td><td>635</td></tr><tr><td>1</td><td>10</td><td>100000</td><td>1161</td><td>1696</td><td>2016</td><td>6381</td></tr><tr><td>1</td><td>10</td><td>200000</td><td>3136</td><td>3306</td><td>4044</td><td>12538</td></tr><tr><td>1</td><td>100</td><td>10000</td><td>148</td><td>176</td><td>187</td><td>626</td></tr><tr><td>1</td><td>100</td><td>100000</td><td>1507</td><td>1672</td><td>1887</td><td>6230</td></tr><tr><td>1</td><td>100</td><td>1000000</td><td>15431</td><td>16738</td><td>19424</td><td>62293</td></tr><tr><td>1</td><td>100</td><td>2000000</td><td>28986</td><td>32689</td><td>37049</td><td>125551</td></tr><tr><td>10</td><td>1</td><td>100</td><td>1</td><td>2</td><td>1</td><td>8</td></tr><tr><td>10</td><td>1</td><td>1000</td><td>13</td><td>18</td><td>18</td><td>59</td></tr><tr><td>10</td><td>1</td><td>10000</td><td>140</td><td>158</td><td>203</td><td>614</td></tr><tr><td>10</td><td>1</td><td>20000</td><td>281</td><td>319</td><td>364</td><td>1230</td></tr><tr><td>10</td><td>10</td><td>1000</td><td>17</td><td>34</td><td>41</td><td>16</td></tr><tr><td>10</td><td>10</td><td>10000</td><td>160</td><td>264</td><td>281</td><td>119</td></tr><tr><td>10</td><td>10</td><td>100000</td><td>1572</td><td>2347</td><td>2079</td><td>1093</td></tr><tr><td>10</td><td>10</td><td>200000</td><td>3329</td><td>4643</td><td>4109</td><td>3812</td></tr><tr><td>10</td><td>100</td><td>10000</td><td>208</td><td>244</td><td>201</td><td>162</td></tr><tr><td>10</td><td>100</td><td>100000</td><td>1653</td><td>2300</td><td>2102</td><td>2109</td></tr><tr><td>10</td><td>100</td><td>1000000</td><td>16670</td><td>23536</td><td>20370</td><td>19270</td></tr><tr><td>10</td><td>100</td><td>2000000</td><td>33487</td><td>46660</td><td>40939</td><td>37694</td></tr><tr><td>20</td><td>1</td><td>100</td><td>1</td><td>5</td><td>4</td><td>7</td></tr><tr><td>20</td><td>1</td><td>1000</td><td>15</td><td>16</td><td>17</td><td>58</td></tr><tr><td>20</td><td>1</td><td>10000</td><td>147</td><td>158</td><td>168</td><td>579</td></tr><tr><td>20</td><td>1</td><td>20000</td><td>283</td><td>346</td><td>350</td><td>1191</td></tr><tr><td>20</td><td>10</td><td>1000</td><td>17</td><td>24</td><td>24</td><td>12</td></tr><tr><td>20</td><td>10</td><td>10000</td><td>154</td><td>228</td><td>212</td><td>106</td></tr><tr><td>20</td><td>10</td><td>100000</td><td>1643</td><td>2274</td><td>2036</td><td>1137</td></tr><tr><td>20</td><td>10</td><td>200000</td><td>3222</td><td>4498</td><td>4043</td><td>3617</td></tr><tr><td>20</td><td>100</td><td>10000</td><td>171</td><td>229</td><td>216</td><td>229</td></tr><tr><td>20</td><td>100</td><td>100000</td><td>1714</td><td>2292</td><td>2148</td><td>1922</td></tr><tr><td>20</td><td>100</td><td>1000000</td><td>17266</td><td>22957</td><td>21735</td><td>20052</td></tr><tr><td>20</td><td>100</td><td>2000000</td><td>34316</td><td>46796</td><td>43313</td><td>39711</td></tr><tr><td>50</td><td>1</td><td>100</td><td>1</td><td>4</td><td>2</td><td>8</td></tr><tr><td>50</td><td>1</td><td>1000</td><td>19</td><td>16</td><td>17</td><td>59</td></tr><tr><td>50</td><td>1</td><td>10000</td><td>150</td><td>164</td><td>171</td><td>589</td></tr><tr><td>50</td><td>1</td><td>20000</td><td>312</td><td>346</td><td>348</td><td>1201</td></tr><tr><td>50</td><td>10</td><td>1000</td><td>16</td><td>23</td><td>21</td><td>12</td></tr><tr><td>50</td><td>10</td><td>10000</td><td>161</td><td>253</td><td>202</td><td>103</td></tr><tr><td>50</td><td>10</td><td>100000</td><td>1657</td><td>2329</td><td>2014</td><td>1115</td></tr><tr><td>50</td><td>10</td><td>200000</td><td>3355</td><td>4767</td><td>4092</td><td>3624</td></tr><tr><td>50</td><td>100</td><td>10000</td><td>171</td><td>235</td><td>229</td><td>168</td></tr><tr><td>50</td><td>100</td><td>100000</td><td>1711</td><td>2405</td><td>2235</td><td>2035</td></tr><tr><td>50</td><td>100</td><td>1000000</td><td>17443</td><td>24013</td><td>22610</td><td>20424</td></tr><tr><td>50</td><td>100</td><td>2000000</td><td>33214</td><td>48154</td><td>45750</td><td>40724</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka代码使用-JAVA</title>
      <link href="/post/57831/"/>
      <url>/post/57831/</url>
      
        <content type="html"><![CDATA[<h2 id="1、main简单使用"><a href="#1、main简单使用" class="headerlink" title="1、main简单使用"></a><strong>1、main简单使用</strong></h2><p>引入kafka相关的maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;group-1&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;session.timeout.ms&quot;</span>, <span class="string">&quot;30000&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    kafkaConsumer.subscribe(Arrays.asList(<span class="string">&quot;HelloWorld&quot;</span>));</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;offset = %d, value = %s&quot;</span>, record.offset(), record.value());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;retries&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Message &quot;</span> + i;</span><br><span class="line">            producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;HelloWorld&quot;</span>, msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;Sent:&quot;</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个分别run两个方法，producer负责向<code>HelloWorld</code>这个主题生产消息。consumer始终监听<code>HelloWorld</code>这个主题，每当这个主题有新的消息进来，便执行相关的操作。</p><h2 id="2、基于注解的spring-kafka"><a href="#2、基于注解的spring-kafka" class="headerlink" title="2、基于注解的spring-kafka"></a><strong>2、基于注解的spring-kafka</strong></h2><p>引入相关的maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>consumer的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;String, String&gt;&gt; <span class="title function_">kafkaListenerContainerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(<span class="keyword">new</span> <span class="title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(consumerConfigs()));</span><br><span class="line">        factory.setConcurrency(<span class="number">3</span>);</span><br><span class="line">        factory.getContainerProperties().setPollTimeout(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">consumerConfigs</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; propsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        propsMap.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        propsMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">        propsMap.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">        propsMap.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, <span class="string">&quot;15000&quot;</span>);</span><br><span class="line">        propsMap.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        propsMap.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        propsMap.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;group1&quot;</span>);</span><br><span class="line">        propsMap.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> propsMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>producer的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaProducerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ProducerFactory&lt;String, String&gt; <span class="title function_">producerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaProducerFactory</span>&lt;&gt;(producerConfigs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">producerConfigs</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, <span class="number">0</span>);</span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaTemplate&lt;String, String&gt; <span class="title function_">kafkaTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KafkaTemplate</span>&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>consumer监听kafka的消息,这样的话，每次有消息的进到kafka的时候就被监听到，执行对应的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaListenerCustom</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听my开头的主题，注意&quot;.&quot;</span></span><br><span class="line"><span class="comment">     * &quot;.*&quot; 表示所有的topic都监听</span></span><br><span class="line"><span class="comment">     * 只要这个主题有新的消息，这个方法就会被执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record 不知道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topicPattern = &quot;.*&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record, <span class="meta">@Header(KafkaHeaders.RECEIVED_TOPIC)</span> String topic)</span> &#123;</span><br><span class="line">        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());</span><br><span class="line">        <span class="keyword">if</span> (kafkaMessage.isPresent()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">message</span> <span class="operator">=</span> kafkaMessage.get();</span><br><span class="line">            logger.info(<span class="string">&quot;Listener------------------ message =topic：&#123;&#125;,&#123;&#125;&quot;</span>, topic, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者发送消息到kafka，在上文的producer中，已经把KafkaTemplate作为一个bean注入到spring容器中，故这里可以直接使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">KafkaService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(KafkaServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendJson</span><span class="params">(String topic, String json)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line">        jsonObj.put(<span class="string">&quot;topic&quot;</span>, topic);</span><br><span class="line">        jsonObj.put(<span class="string">&quot;ts&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;json+++++++++++++++++++++  message = &#123;&#125;&quot;</span>, jsonObj);</span><br><span class="line"></span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future = kafkaTemplate.send(topic, jsonObj.toJSONString());</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;msg OK.&#123;&#125;&quot;</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;msg send failed: &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来只要启动spring，即可调用producer的<code>sendJson</code>方法便可以向kafka发送消息，同时consumer的监听也可以立刻监听到发送到kafka的消息。</p><h2 id="3、基于xml的spring-kafka"><a href="#3、基于xml的spring-kafka" class="headerlink" title="3、基于xml的spring-kafka"></a><strong>3、基于xml的spring-kafka</strong></h2><p>记得把之前基于注解的代码全部注释掉，或者注释掉相关的注解。<br>了解spring机制的应该都知道，基于xml和基于注解的，其实大同小异。</p><p>生产者配置文件producer-kafka.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义producer的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;bootstrap.servers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;localhost:9092&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;retries&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;batch.size&quot;</span> <span class="attr">value</span>=<span class="string">&quot;16384&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;linger.ms&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;buffer.memory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33554432&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key.serializer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;value.serializer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建kafkatemplate需要使用的producerfactory bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.kafka.core.DefaultKafkaProducerFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;producerProperties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.kafka.core.KafkaTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;producerFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;autoFlush&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者配置文件consumer-kafka.xml，注意consumer中有对应的监听类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.定义consumer的参数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- consumerProperties -&gt; consumerFactory  载入配置构造消费者工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;bootstrap.servers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;localhost:9092&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;group.id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;group1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;enable.auto.commit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;session.timeout.ms&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15000&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key.deserializer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;value.deserializer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建consumerFactory bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.kafka.core.DefaultKafkaConsumerFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;consumerProperties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.定义消费监听实现类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.test.kafka.spring.xml.KafkaConsumerServiceImpl_&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.消费者容器配置信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- messageListener -&gt; containerProperties  载入容器配置（topics）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.kafka.listener.config.ContainerProperties&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- topic --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;topics&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageListener&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;kafkaConsumerService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.消费者并发消息监听容器，执行doStart()方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- consumerFactory+containerProperties -&gt; messageListenerContainer 容器配置（topics）+ 消息监听器，构造一个并发消息监听容器，并执行初始化方法doStart --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.kafka.listener.ConcurrentMessageListenerContainer&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;doStart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;consumerFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;containerProperties&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;concurrency&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>consumer对应的监听类，实现<code>MessageListener</code>便可以完成监听，<code>KafkaListener</code>这个注解主要是为了说明监听哪个主题，这里配置的是监听所有的主题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span>&lt;String, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@KafkaListener(topicPattern = &quot;.*&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ConsumerRecord&lt;String, String&gt; data)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;listen 3 : &quot;</span> + <span class="string">&quot; key:&quot;</span> + data.key() + <span class="string">&quot; value: &quot;</span> + data.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样使用刚刚的<code>sendJson</code>向kafka发送短信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">KafkaService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(KafkaServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendJson</span><span class="params">(String topic, String json)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line">        jsonObj.put(<span class="string">&quot;topic&quot;</span>, topic);</span><br><span class="line">        jsonObj.put(<span class="string">&quot;ts&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;json+++++++++++++++++++++  message = &#123;&#125;&quot;</span>, jsonObj);</span><br><span class="line"></span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future = kafkaTemplate.send(topic, jsonObj.toJSONString());</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;msg OK.&#123;&#125;&quot;</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;msg send failed: &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样的话就和刚刚基于注解的spring-kafka实现一样的功能了。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h2><p>无法解析地址<code>XXXXX:9092</code>这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Can&#x27;t resolve address: XXXXX:9092</span><br><span class="line">    at org.apache.kafka.common.network.Selector.connect(Selector.java:180) ~[kafka-clients-0.10.1.0.jar:na]</span><br><span class="line">    at org.apache.kafka.clients.NetworkClient.initiateConnect(NetworkClient.java:498) [kafka-clients-0.10.1.0.jar:na]</span><br><span class="line">    at org.apache.kafka.clients.NetworkClient.ready(NetworkClient.java:159) [kafka-clients-0.10.1.0.jar:na]</span><br><span class="line">    at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.tryConnect(ConsumerNetworkClient.java:454) [kafka-clients-0.10.1.0.jar:na]</span><br><span class="line">    at org.apache.kafka.clients.consumer.internals.AbstractCoordinator$GroupCoordinatorResponseHandler.onSuccess(AbstractCoordinator.java:556) [kafka-clients-0.10.1.0.jar:na]</span><br></pre></td></tr></table></figure><p>在<code>server.properties</code>下添加 下面内容即可解析对应的地址。</p><blockquote><p>listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</p></blockquote><hr><p>报错broker不可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br><span class="line">org.apache.kafka.clients.NetworkClient:[Consumer clientId=consumer-4, groupId=cwenao-group] Connection to node 0 could not be established. Broker may not be available.</span><br></pre></td></tr></table></figure><p>如果采用的是阿里云的服务器，需要在<code>server.properties</code>中配置下面内容：</p><blockquote><p>listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;内网IP:9092<br>advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;公网IP:9092<br>内网IP指的是<code>ifconfig</code>中的ip地址，也可以通过<code>cat /etc/hosts</code>获取，公网ip值的就是服务器对外的ip</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis稍微高级使用</title>
      <link href="/post/23474/"/>
      <url>/post/23474/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="获取符合规则的键名列表-其中pattern支持glob风格通配格式"><a href="#获取符合规则的键名列表-其中pattern支持glob风格通配格式" class="headerlink" title="获取符合规则的键名列表,其中pattern支持glob风格通配格式"></a>获取符合规则的键名列表,其中pattern支持glob风格通配格式</h3><blockquote><p>KEYS pattern</p></blockquote><h3 id="判断键是否存在，返回1成功，0失败"><a href="#判断键是否存在，返回1成功，0失败" class="headerlink" title="判断键是否存在，返回1成功，0失败"></a>判断键是否存在，返回1成功，0失败</h3><blockquote><p>EXISTS key</p></blockquote><h3 id="删除键，返回成功数量，不支持通配"><a href="#删除键，返回成功数量，不支持通配" class="headerlink" title="删除键，返回成功数量，不支持通配"></a>删除键，返回成功数量，不支持通配</h3><blockquote><p>del key [key…]</p></blockquote><h3 id="增减"><a href="#增减" class="headerlink" title="增减"></a>增减</h3><blockquote><p>INCR key<br>INCRBY key increment<br>DECR key<br>DECRBY key increment</p></blockquote><h3 id="追加，若无此键则自动创建"><a href="#追加，若无此键则自动创建" class="headerlink" title="追加，若无此键则自动创建"></a>追加，若无此键则自动创建</h3><blockquote><p>APPEND key value</p></blockquote><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><blockquote><p>STRLEN key</p></blockquote><h3 id="批量SET和GET"><a href="#批量SET和GET" class="headerlink" title="批量SET和GET"></a>批量SET和GET</h3><blockquote><p>MSET key value [key value …]<br>MGET key [key …]</p></blockquote><h3 id="使用SSCAN替代SMEMBERS"><a href="#使用SSCAN替代SMEMBERS" class="headerlink" title="使用SSCAN替代SMEMBERS"></a>使用SSCAN替代SMEMBERS</h3><blockquote><p>scan cursor [MATCH pattern] [COUNT count]       #基于整个redis库进行扫描<br>sscan key cursor [MATCH pattern] [COUNT count]  #扫描指定的set类型的key<br>hscan key cursor [MATCH pattern] [COUNT count]  #扫描指定的hash类型的key<br>zscan key cursor [MATCH pattern] [COUNT count]  #扫描指定的zset类型的key</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果一个set非常大，使用SMEMBERS可能会耗时很长，导致redis堵死</span><br><span class="line">返回是一个数组，第一个表示当前的游标，第二个为集合元素，游标重回0表示遍历完成</span><br><span class="line">MATCH 是对应该key中值的规则，COUNT是满足该规则返回的数量，COUNT和MATCH必须有一个</span><br><span class="line">如果set底层使用的是inset数组，则count可能会无效，直接返回全部元素，类似SMEMBERS</span><br><span class="line">如果set底层使用hsahtable，则返回count个元素，但是有可能会稍微波动，即count=500可能返回略大于500个元素</span><br><span class="line">set底层使用的数据结构取决于元素个数，小于`set-max-inset-entries`则使用inset结构，大于`set-max-inset-entries`使用hashtable结构</span><br><span class="line">类型的命令还有scan(遍历key),hscan(遍历map),zscan(遍历有序set)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 获取所有的key，*标识通配，可以与其他字符配合使用</span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"># redis支持多数据库，可以使用下面的语句切换数据库，默认0-16</span><br><span class="line">select 1</span><br><span class="line"></span><br><span class="line"># 清空redis的所有缓存，包括其他的数据库</span><br><span class="line">flushall</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="散列类型，相当于对象，key-类名，field-属性名，value-属性值"><a href="#散列类型，相当于对象，key-类名，field-属性名，value-属性值" class="headerlink" title="散列类型，相当于对象，key 类名，field 属性名，value 属性值"></a>散列类型，相当于对象，key 类名，field 属性名，value 属性值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HSET key field value</span><br><span class="line">HGET key field value</span><br><span class="line">HMSET key field value [field value ...]</span><br><span class="line">HMGET key field [field ...]</span><br><span class="line">HGETALL key</span><br><span class="line">HDEL key field [field ...]</span><br><span class="line"># 判断是否存在</span><br><span class="line">HEXISTS key field </span><br><span class="line"># 如果字段不存在时赋值,NX表示if Not eXist</span><br><span class="line">HSETNX key field value </span><br><span class="line"># 字段自增</span><br><span class="line">HINRCBY key filed increment </span><br><span class="line"># 获取key下面的所有field</span><br><span class="line">HKEYS key </span><br><span class="line"># 获取key下面的所有field对应的值</span><br><span class="line">KVALS key</span><br><span class="line"># 获取key对应的field数量</span><br><span class="line">HLEN key</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 左侧插入数据</span><br><span class="line">LPUSH key value [value ...]</span><br><span class="line"># 右侧插入数据</span><br><span class="line">RPUSH key value [value ...]</span><br><span class="line"># 左侧弹出数据</span><br><span class="line">LPOP key</span><br><span class="line"># 右侧弹出数据</span><br><span class="line">RPOP key</span><br><span class="line"># 当key为空的时候，会阻塞连接，直到key中有元素</span><br><span class="line">BRPOP key timeout</span><br><span class="line"># 列表长度</span><br><span class="line">LLEN key</span><br><span class="line"># 获取范围内的数据，不pop，支持负索引</span><br><span class="line">LRANGE key start stop</span><br><span class="line"># 移除count个的值为value的数，count=0  移除全部，count&gt;0 从左边开始删除，count&lt;0 从右边开始删除 </span><br><span class="line">LREM key count value </span><br><span class="line"># 获取指定index的value </span><br><span class="line">LINDEX key value </span><br><span class="line"># 设置指定index的value </span><br><span class="line">LSET key index value </span><br><span class="line"># 保留start到stop的，其他删除 </span><br><span class="line">LTRIM key start stop </span><br><span class="line"># 从左到右查找，在一个值为pivot的位置前后添加value </span><br><span class="line">LINSERT key BEFORE|AFTER pivot value </span><br><span class="line"># 列表复制 </span><br><span class="line">RPOPLPUSH source destination </span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SADD key member [member...] </span><br><span class="line">SREM key member [member...] </span><br><span class="line">SMEMBERS key </span><br><span class="line"># 判断元素是否存在 </span><br><span class="line">SISMEMRBE key member </span><br><span class="line"># SDIFF A B 表示A-B SDIFF A B C 表示A-B-C </span><br><span class="line">SDIFF key [key ...] </span><br><span class="line"># SINTER A B 表示A∩B SINTER A B C 表示A∩B∩C </span><br><span class="line">SINTER key [key ...] </span><br><span class="line"># SUNION A B 表示A∪B SUNION A B C 表示A∪B∪C </span><br><span class="line">SUNION key [key ...] </span><br><span class="line"># 获取集合中元素个数 </span><br><span class="line">SCARD key </span><br><span class="line"># SDIFFSTORE destination A B 表示A-B 并储存至destination SDIFFSTORE destination A B C 表示A-B-C </span><br><span class="line">SDIFFSTORE destination key [key ...] </span><br><span class="line"># SINTERSTORE destination A B 表示A∩B 并储存至destination SINTERSTORE destination A B C 表示A∩B∩C </span><br><span class="line">SINTERSTORE destination key [key ...] </span><br><span class="line"># SUNIONSTORE destination A B 表示A∪B 并储存至destination SUNIONSTORE destination A B C 表示A∪B∪C </span><br><span class="line">SUNIONSTORE destination key [key ...] </span><br><span class="line"># 从集合key中随机获取元素(可重复)， 若count!=null &amp;&amp; count&gt; 0 则不重复得获取count个数据  若count!=null &amp;&amp; count &lt; 0 则可重复得获取count个数据</span><br><span class="line">SRANDMEMBER key [count]</span><br><span class="line"># 随机弹出一个元素</span><br><span class="line">SPOP key</span><br></pre></td></tr></table></figure><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加元素并赋予分数</span><br><span class="line">ZADD key score member [score member ...] </span><br><span class="line"># 获得元素</span><br><span class="line">ZSCORE key member</span><br><span class="line"># 获得排名在某个范围的元素列表 ZRANGE从小到大 ZREVRANGE 从大到小 WITHSCORES 是否带分数</span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br><span class="line"># 获得指定分数范围的元素, (min 或者 (max 表示 不包括该数 ，偏移offset后的count个值</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line">ZREVRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line"># 增加元素分数 increment可以为负数</span><br><span class="line">ZINCRBY key increment menber</span><br><span class="line"># 元素个数</span><br><span class="line">ZCARD key</span><br><span class="line"># 指定分数元素个数</span><br><span class="line">ZCOUNT key min max</span><br><span class="line"># 删除</span><br><span class="line">ZREM key member [member ...]</span><br><span class="line"># 按照排名范围删除元素</span><br><span class="line">ZREMRANGEBYRANK key start stop</span><br><span class="line"># 按照分数范围删除元素</span><br><span class="line">ZREMRANGEBYSCORE  key min max</span><br><span class="line"># 获得元素排名</span><br><span class="line">ZRANK key member</span><br><span class="line">ZREVRANK key member</span><br></pre></td></tr></table></figure><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><blockquote><p>MULTI<br>命令一<br>命令二<br>EXEC</p></blockquote><p>将命令一与命令二整合成一个事务进行处理，如果，命令存在语法错误，则不会执行该事务，如果命令存在运行错误，则会跳过错误语句继续执行，不支持事务回滚。</p><p><code>WATCH</code>命令可以监听一个或者多个键，watch之后，一旦值被修改了，则后续的事务便不再执行，直到遇到第一个EXEC命令，也可以使用<code>UNWATCH</code>取消对该键的监听</p><p>不允许事务的嵌套</p><h2 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置过期时间</span><br><span class="line">EXPIRE key seconds</span><br><span class="line">PEXPIRE key milliseconds</span><br><span class="line"># 查看剩余过期时间</span><br><span class="line">TTL key</span><br><span class="line">PTTL key</span><br><span class="line"># 取消过期时间，重新设置key的值也可以取消过期时间</span><br><span class="line">PERSIST key</span><br></pre></td></tr></table></figure><p><code>WATCH</code> 监听的有过期时间的key，若<code>WATCH</code>期间过期了，则key会被删除，同时不认为key的值被修改，即事务依然会执行</p><h2 id="redis脚本"><a href="#redis脚本" class="headerlink" title="redis脚本"></a>redis脚本</h2><p>优点：</p><ul><li>减少网络开销，多语句一个请求统一执行，类型管道</li><li>原子操作，不用考虑资源竞争问题</li><li>代码复用</li></ul><p>很简单不做展开，自己需要的时候去看一下文档</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>允许RDB和AOF两种方式同时存在</p><h3 id="RDB方式"><a href="#RDB方式" class="headerlink" title="RDB方式"></a>RDB方式</h3><p>通过快照完成的，当符合一定条件的时候会自动将内存找那个的而所有数据生成一份备份病存储在硬盘上，这个过程称之为快照.<br>不是十分安全，若快照到一半听让死机了，则会丢失数据。<br>默认保存的文件<code>dump.rdb</code></p><ul><li>根据配置规则进行快照</li><li>用户执行SAVE或者BGSAVE命令</li><li>执行FLUSHALL命令</li><li>执行复制replication命令</li></ul><hr><p><strong>根据配置规则进行快照</strong><br><code>redis.conf</code>中进行配置<code>save M N</code>表示每单时间M(s)内被修改的键的个数大于N个时便执行自动快照条件<br>目前<code>redis.conf</code>中有三个默认的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10 </span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><hr><p><strong>用户执行SAVE或者BGSAVE命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 会阻塞线程，不建议使用</span><br><span class="line">SAVE</span><br><span class="line"># 在后台运行</span><br><span class="line">BGSAVE</span><br><span class="line"># 查看最后一次成功的快照时间，返回时间戳</span><br><span class="line">LASTSAVE</span><br></pre></td></tr></table></figure><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF可以将redis执行的每一条写命令追加到硬盘文件中，故会降低极限时候redis的性能<br>打开方式：<br><code>redis.conf</code>中<code>appendonly yes</code><br>默认的保存的文件：<code>appendonly.aof</code></p><p>执行的命令可能很多，但是数据所占的内存可能并没有变化多少，这个时候<code>appendonly.aof</code>就会很大，此时，redis会根据conf文件重写aof文件<br>在<code>redis.conf</code>中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 目前的AOF文件大小超过上一次重写时AOF文件的百分之多少时进行重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"># 允许重写的最小AOF文件大小，即大于这个值才会重写</span><br><span class="line">auto-aof-rewritemin-size 64m</span><br></pre></td></tr></table></figure><p>可以使用下面的命令手动执行AOF的重写</p><blockquote><p>BGREWRITEAOF</p></blockquote><p>事实上，并非每次都更新aof文件，而是更新到了系统的硬盘缓存中，然后30s一次由缓存同步到硬盘中。故存在隐患，可以在conf中进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 总是同步，但是性能最差</span><br><span class="line">appendfsync always</span><br><span class="line"># 每秒同步，满足大多数要求</span><br><span class="line">appendfsync everysec</span><br><span class="line"># 30s一次，30s是由操作系统决定的</span><br><span class="line">appendfsync no</span><br></pre></td></tr></table></figure><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>主数据库上的数据会被直接复制到从数据库上（理论上从数据库应该是只读的）<br>使用的是RDB快照模式进行主从复制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在本地启动两个redis服务，分别监听不同的端口</span><br><span class="line"># 启动主数据库</span><br><span class="line">./redis-server -p 6379</span><br><span class="line"># 启动从数据库</span><br><span class="line">./redis-server -p 6380 --salveof 127.0.0.1 6379</span><br><span class="line"># 在redis启动之后，可以运行下面的语句成为某个数据库的从数据库</span><br><span class="line">SLAVEOF 127.0.0.1 6379</span><br><span class="line"># 停止作为从数据库</span><br><span class="line">SLAVEOF NO ONE</span><br><span class="line"># 查看主从数据库的相关信息</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>这样便完成了主从数据库的搭建，在主数据库上的操作都会被同步到从数据库上</p><hr><p>采用的是<code>乐观复制</code>的复制策略，即是允许主从数据库在一定时间上存在不一致性，但是最终会一致，主从的复制是异步的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从数据库数量达到配置，主数据库才可用</span><br><span class="line">min-slaves-to-write 3</span><br><span class="line"># 允许从数据库最长失去连接的时间，单位秒</span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></table></figure><hr><p>主从数据库之间的关系允许像树状图，即一个从数据库也可以作为主数据库</br><br>redis集群可以实现读写分离，提高性能。</br><br>如果主数据库没有使用持久化，那么主数据库崩了的时候，不能直接重启主数据库，需要主从切换。若直接重启主数据库，此时主数据库上的数据为空的，主从同步的时候会导致从数据库上的数据被清空</br><br>复制采用的是RDB快照的方式，即使主数据库没有开启RDB方式，在主从复制的时候也会生成RDB快照</br><br>使用<code>repl-diskless-sync yes</code>的时候，采用的是无硬盘复制，即RDB快照文件不会存储在硬盘上，直接通过网络发送到从数据库上</br><br>从数据库执行快照文件的时候使用的是增量复制，不是全部复制。增量复制需要用到的是队列和偏移量。可以配置<code>repl-backlog-size</code>的大小来决定队列的大小，越大允许断线的时间越长，默认是1M。<code>repl-backlog-ttl</code>表示主从数据库断开连接多长时间之后清空队列中的数据，默认是1小时</p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><ul><li>监听主从数据库是否正常运行</li><li>主数据库出现故障时自动将从数据库转换为从数据库</li><li>哨兵之间可以互相监听</li></ul><hr><p>执行哨兵模式，首先使用上述的复制模式，启动三个redis服务，可以是本地的三个不同端口。6379,6380,6381。</p><p>创建sentinel.conf文件内容如下：其中mymaster为主数据的名称和对应的IP端口，哨兵模式只需要配置主数据库，哨兵会根据主数据库自动寻找到从数据库。1表示票数，至少要经过几个哨兵同意才可以升级为主数据库。<br>当redis哨兵出错的时候，会把错误信息更新值该文件中。<br>sentinel monitor master-name ip redis-port quorum</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>运行哨兵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-sentinel ./sentinel.conf</span><br></pre></td></tr></table></figure><p>可以得到下面的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># sentinel 的ID</span><br><span class="line">11449:X 02 Mar 21:28:20.546 # Sentinel ID is 7b4df9113bd033d138ac901f664125ccf8fcf1a1</span><br><span class="line"># 主数据库的信息</span><br><span class="line">11449:X 02 Mar 21:28:20.546 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line"># 从数据库的信息</span><br><span class="line">11449:X 02 Mar 21:28:20.547 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:28:20.579 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>如果让主数据库停了，例如杀死进程，等待指定时间（默认是30s）便会得到下面的输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 哨兵主观认为主数据库停止了，PING失败之后会主观认为主数据库挂了</span><br><span class="line">11449:X 02 Mar 21:39:58.108 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line"># 哨兵客观认为主数据库停止了，向其他哨兵询问，当其他哨兵同样主观认为主数据库挂了，且达到配置的quorum数量的时候，就认为是客观下线</span><br><span class="line">11449:X 02 Mar 21:39:58.108 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">11449:X 02 Mar 21:39:58.108 # +new-epoch 1</span><br><span class="line"># 哨兵开始进行故障恢复</span><br><span class="line">11449:X 02 Mar 21:39:58.108 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line"># 选举领头哨兵 采用RAFT算法，选领头哨兵是为了避免多个哨兵对故障节点进行恢复。raft可以参考这篇文章：https://blog.csdn.net/lxlmycsdnfree/article/details/78984752</span><br><span class="line">11449:X 02 Mar 21:39:58.144 # +vote-for-leader 7b4df9113bd033d138ac901f664125ccf8fcf1a1 1</span><br><span class="line">11449:X 02 Mar 21:39:58.144 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.145 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.208 # +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.208 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.287 * +failover-state-wait-promotion slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.869 # +promoted-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.869 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:58.929 * +slave-reconf-sent slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:59.873 * +slave-reconf-inprog slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">11449:X 02 Mar 21:39:59.873 * +slave-reconf-done slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line"># 哨兵故障恢复结束</span><br><span class="line">11449:X 02 Mar 21:39:59.980 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line"># 主数据库切换到6381这个数据库</span><br><span class="line">11449:X 02 Mar 21:39:59.980 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6381</span><br><span class="line"># 发现6379这个之前的主数据库并没有被移除，当6379被重启的时候，会成为6381的从数据库</span><br><span class="line">11449:X 02 Mar 21:39:59.980 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6381</span><br><span class="line">11449:X 02 Mar 21:39:59.980 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381</span><br></pre></td></tr></table></figure><hr><p>哨兵<br>同一个哨兵可以监听多个redis系统，如下配置即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor a 127.0.0.1. 6379 2</span><br><span class="line">sentinel monitor b 111.111.111.111 6666 4</span><br></pre></td></tr></table></figure><p>同时也可以多个哨兵监听一个系统，形成网状结构<br>哨兵之间只创建一条连接来发送PING命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 主数据库故障的主从切换时间，默认是30000</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br></pre></td></tr></table></figure><p>哨兵工作原理：</p><ul><li>每10秒哨兵会向主数据库和从数据库发送INFO命令来获取数据库的信息</li><li>每2秒哨兵会向主数据库和从数据库法的__sentinel__:hello频道发送自己的消息，以获取其他同样监控该数据的哨兵节点信息<br>  格式：&lt;哨兵的地址&gt;,&lt;哨兵的端口&gt;,&lt;哨兵的运行ID&gt;,&lt;哨兵的配置版本&gt;,&lt;主数据库的名字&gt;,&lt;主数据库的地址&gt;,&lt;主数据库的端口&gt;,&lt;数据库的配置信息&gt;</li><li>每1秒哨兵会向主数据库和从数据库和其他哨兵节点发送PING命令</li></ul><p>从数据库升级为主数据库选择方案：</p><ul><li>1、所有在线的从数据库中，选择优先级别最高的从数据库。优先级通过<code>slave-priority</code>选项进行配置</li><li>2、如果有多个最高优先级别的从数据库，则复制命令的偏移量越大（复制越完整，也以为这时间越长啊？）越优先</li><li>3、选择运行ID最小的从数据库（表明该从数据库最先启动，数据最完整）</li></ul><h3 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h3><p>相关操作参考这位老哥。<a href="https://www.cnblogs.com/aquester/p/10916284.html">https://www.cnblogs.com/aquester/p/10916284.html</a><br>笔者只有一台机子，所以笔者的仔一台机子上搭建Redis集群，搭建的是3主3从的Redis集群，本地分别使用的是6380,6381,6382,6383,6384,6385这6个端口<br>需要修改的配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 端口号打开：</span><br><span class="line">port 6380</span><br><span class="line"># 集群模式打开</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 集群状态保存的文件</span><br><span class="line">cluster-config-file nodes-6380.conf </span><br></pre></td></tr></table></figure><p>然后分别启动6个Redis</p><blockquote><p>.&#x2F;redis.server .&#x2F;..&#x2F;redis_0.conf<br>.&#x2F;redis.server .&#x2F;..&#x2F;redis_1.conf<br>.&#x2F;redis.server .&#x2F;..&#x2F;redis_2.conf<br>.&#x2F;redis.server .&#x2F;..&#x2F;redis_3.conf<br>.&#x2F;redis.server .&#x2F;..&#x2F;redis_4.conf<br>.&#x2F;redis.server .&#x2F;..&#x2F;redis_5.conf</p></blockquote><p>启动之后会看到下面的输出：<code>No cluster configuration found. I&#39;m C215dgd86ax236za5d65gg</code></p><p>然后创建集群，注意这里最好使用IP，否则Java调用的时候可能会报错<code>./redis-cli --cluster create --cluster-replicas 1 192.168.6.3:6380 192.168.6.3:6381 192.168.6.3:6382 192.168.6.3:6383 192.168.6.3:6384 192.168.6.3:6385</code></p><ol><li>create                       表示创建一个redis集群。</li><li>–cluster-replicas 1         表示为集群中的每一个主节点指定一个从节点，即一比一的复制</li></ol><p>查看集群状态,随便访问集群一台Redis的客户端，输入<code>cluster nodes</code>，获得输出即可查看集群状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">956ece9fe2d4926ce9260bcd6c6852f74391daed 192.168.6.3:6381@16381 master - 0 1563115423641 2 connected 5461-10922</span><br><span class="line">a080f7f617f3d80d4af7ddbae3766e99252c1b44 192.168.6.3:6380@16380 myself,master - 0 1563115422000 1 connected 0-5460</span><br><span class="line">1d55f6989556137915e21ac97411ae334440aeac 192.168.6.3:6384@16384 master - 0 1563115423000 7 connected 10923-16383</span><br><span class="line">81bc103d557bde07fc03775bf3b0e16eaea0f736 192.168.6.3:6382@16382 slave 1d55f6989556137915e21ac97411ae334440aeac 0 1563115424651 7 connected</span><br><span class="line">2ab35db74175770349a1eb1e00fd28caabfaaed5 192.168.6.3:6385@16385 slave a080f7f617f3d80d4af7ddbae3766e99252c1b44 0 1563115423000 6 connected</span><br><span class="line">2e1d1b75167686c67a5854148267b1b7e0ec8e38 192.168.6.3:6383@16383 slave 956ece9fe2d4926ce9260bcd6c6852f74391daed 0 1563115423000 4 connected</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 增加新的主节点（master）-----------在192.168.6.3:6380所在的集群中增加192.168.6.3:6390的master节点</span><br><span class="line">redis-cli --cluster add-node 192.168.6.3:6390 192.168.6.3:6380</span><br><span class="line"># 增加新的主节点（slave）-----------在192.168.6.3:6380所在的集群中增加192.168.6.3:6390的slave节点，slave节点随机分配</span><br><span class="line">redis-cli --cluster add-node --cluster-slave </span><br><span class="line">redis-cli --cluster add-node --cluster-slave --cluster-master-id 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 192.168.6.3:6390 192.168.6.3:6380 </span><br><span class="line"># 删除节点</span><br><span class="line">redis-cli --cluster del-node 192.168.6.3:6390 `&lt;node-id&gt;`</span><br><span class="line"># 检查节点状态</span><br><span class="line">redis-cli --cluster check 192.168.6.3:6390</span><br><span class="line"># 参数说明：</span><br><span class="line"># host：port：必传参数，集群内任意节点地址，用来获取整个集群信息。</span><br><span class="line"># --from：制定源节点的 id，如果有多个源节点，使用逗号分隔，如果是all源节点变为集群内所有主节点，在迁移过程中提示用户输入。</span><br><span class="line"># --to：需要迁移的目标节点的id，目标节点只能填写一个，在迁移过程中提示用户输入。</span><br><span class="line"># --slots：需要迁移槽的总数量，在迁移过程中提示用户输入。</span><br><span class="line"># --yes：当打印出 reshard 执行计划时，是否需要用户输入yes确认后再执行 reshard。</span><br><span class="line"># --timeout：控制每次 migrate 操作的超时时间，默认为60000毫秒。</span><br><span class="line"># --pipeline：控制每次批量迁移键的数量，默认为10。</span><br><span class="line">redis-trib.rb reshard host:port --from &lt;arg&gt; --to &lt;arg&gt; --slots &lt;arg&gt; --yes --timeout &lt;arg&gt; --pipeline &lt;arg&gt;</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="键命名"><a href="#键命名" class="headerlink" title="键命名"></a>键命名</h3><blockquote><p>对象名:对象ID:对象属性，例如”user:1:friends” 表示用户1的好友列表</p></blockquote><h3 id="内存管理："><a href="#内存管理：" class="headerlink" title="内存管理："></a>内存管理：</h3><p>修改<code>redis.conf</code>中的<code>maxmemory</code>可以指定redis使用的最大内存，当内存超过这个值的时候，便会采用<code>maxmemory-policy</code>的方法来删除key</p><p>maxmemory-policy配置的规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">volatile-lru                #使用LRU算法删除一个键（只对设置了过期时间的键）</span><br><span class="line">allkeys-lru                 #使用LRU算法删除一个键</span><br><span class="line">volatile-random             #随机删除一个键（只对设置了过期时间的键）</span><br><span class="line">allkeys-random              #随机删除一个键</span><br><span class="line">volatile-ttl                #删除过期时间最近的一个键</span><br><span class="line">noeviction                  #不删除键，只返回错误</span><br></pre></td></tr></table></figure><p>当设置<code>maxmemory</code>的时候，redis便不会使用共享对象（redis会在本地创建0-9999个int类型的对象，然后有值为范围内int的便指向过去，C语言，你懂得）</p><h3 id="排序SORT"><a href="#排序SORT" class="headerlink" title="排序SORT"></a>排序SORT</h3><blockquote><p>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC | DESC] [ALPHA] [STORE destination]</p></blockquote><h4 id="SORT-key-by-pattern"><a href="#SORT-key-by-pattern" class="headerlink" title="SORT key by pattern"></a>SORT key by pattern</h4><p>例如<code>SORT uid BY user_level_*</code>，让 uid 键按照 user_level_{uid}的大小来排序，其中uid是{1,2,3,4}，且存在key为user_level_1，user_level_2，user_level_3，user_level_4的四个值，该语句会把key满足user_level_*（*为uid中的值）的进行排序，然后该顺序为uid最后的顺序</p><h4 id="SORT-key-GET-pattern"><a href="#SORT-key-GET-pattern" class="headerlink" title="SORT key GET pattern"></a>SORT key GET pattern</h4><p>例如<code>SORT uid GET user_name_*</code>代码先排序 uid ， 再取出键 user_name_{uid} 的值</p><p><code>pattern</code>可以是#，表示被排序键的值</p><h4 id="SORT-key-BY-pattern-GET-pattern-GET-pattern-…"><a href="#SORT-key-BY-pattern-GET-pattern-GET-pattern-…" class="headerlink" title="SORT key [BY pattern] [GET pattern [GET pattern …]]"></a>SORT key [BY pattern] [GET pattern [GET pattern …]]</h4><p>例如<code>SORT uid BY user_level_* GET user_name_*</code>先按 user_level_{uid} 来排序 uid 列表， 再取出相应的 user_name_{uid} 的值</p><h4 id="SORT性能优化"><a href="#SORT性能优化" class="headerlink" title="SORT性能优化"></a>SORT性能优化</h4><p>时间复杂度Ο(n+mlog(m)),n是排序个数，m是返回个数</p><p>优化：<br>减低排序个数（减小n）<br>减少返回个数，使用limit（减小m）<br>n和m都很大的时候，尽量存储排序结果</p><h3 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 发布</span><br><span class="line">PUBLISH channel message</span><br><span class="line"># 订阅</span><br><span class="line">SUBSCRIBE channel [channel ...]</span><br><span class="line"># 取消订阅</span><br><span class="line">UNSUBSCRIBE [channel [channel ...]]</span><br><span class="line"># glob风格订阅</span><br><span class="line">PSUBSCRIBE pattern</span><br><span class="line"># glob风格取消订阅</span><br><span class="line">PUNSUBSCRIBE pattern</span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>不使用管道，每个命令执行的时候都需要向远程的redis服务器发送请求，然后逐个返回，效率较低<br>使用管道，就是多个命令给远程redis，然后执行，然后返回<br>下面是网上偷的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;**.**.**.**&quot;</span>, <span class="number">6379</span>, <span class="number">10000</span>);</span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用pipeline存储数据</span></span><br><span class="line">    <span class="comment">//选择redis的库</span></span><br><span class="line">    jedis.select(<span class="number">4</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">        data.clear();</span><br><span class="line">        data.put(<span class="string">&quot;k_&quot;</span> + i, <span class="string">&quot;v_&quot;</span> + i);</span><br><span class="line">        jedis.hmset(<span class="string">&quot;k_&quot;</span> + i, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;datasize=&quot;</span> + jedis.dbSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;hmset without pipeline used=&quot;</span> + (end - start) / <span class="number">1000</span> + <span class="string">&quot;seconds!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用pipeline存储数据</span></span><br><span class="line">    jedis.select(<span class="number">4</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> jedis.pipelined();</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">        data.clear();</span><br><span class="line">        data.put(<span class="string">&quot;k_&quot;</span> + i, <span class="string">&quot;v_&quot;</span> + i);</span><br><span class="line">        pipeline.hmset(<span class="string">&quot;k_&quot;</span> + i, data);</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.sync();</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;datasize=&quot;</span> + jedis.dbSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;hmset with pipeline used=&quot;</span> + (end - start) / <span class="number">1000</span> + <span class="string">&quot;seconds!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">// 直接使用Jedis hgetall</span></span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    Map&lt;String, Map&lt;String, String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        result.put(key, jedis.hgetAll(key));</span><br><span class="line">    &#125;</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;result size:[&quot;</span> + result.size() + <span class="string">&quot;] ..&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hgetAll without pipeline used [&quot;</span> + (end - start) / <span class="number">1000</span> + <span class="string">&quot;] seconds ..&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用pipeline hgetall</span></span><br><span class="line">    Map&lt;String, Response&lt;Map&lt;String, String&gt;&gt;&gt; responses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(keys.size());</span><br><span class="line">    result.clear();</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        responses.put(key, pipeline.hgetAll(key));</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.sync();</span><br><span class="line">    <span class="keyword">for</span> (String k : responses.keySet()) &#123;</span><br><span class="line">        result.put(k, responses.get(k).get());</span><br><span class="line">    &#125;</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;result size:[&quot;</span> + result.size() + <span class="string">&quot;] ..&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hgetAll with pipeline used [&quot;</span> + (end - start) / <span class="number">1000</span> + <span class="string">&quot;] seconds ..&quot;</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    jedis.disconnect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置redis密码"><a href="#设置redis密码" class="headerlink" title="设置redis密码"></a>设置redis密码</h3><p>在<code>redis.conf</code>文件中添加<code>requirepass password</code>即可设置密码。<br>后续客户端在执行命令之前都需要执行<code>AUTH password</code>，否则认证不通过，会报<code>NOAUTH Authentication required.</code>错误</p><p>redis复制的情况下，如果主数据库使用了密码，需要在从数据库的配置文件中通过<code>masterauth</code>参数设置主数据库的密码，从而使从数据库连接主数据库时自动使用AUTH命令认证</p><h3 id="命令的重命名"><a href="#命令的重命名" class="headerlink" title="命令的重命名"></a>命令的重命名</h3><p>在配置文件中添加<code>rename-command A B</code> 这样可以使得命令可以自己使用，加强安全性，如重命名<code>flushall</code>可以降低被清空redis的可能性 </p><h3 id="命令监控"><a href="#命令监控" class="headerlink" title="命令监控"></a>命令监控</h3><p>1、耗时命令记录<br><code>redis.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 超过多长时间的算是耗时 单位微秒，默认10000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"># 记录超时语句的最大条数 默认128</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure><p>在客户端使用<code>SLOWLOG GET</code>获取当前的耗时命令日志</p><p>2、命令监控<br>在客户端执行<code>MONITOR</code>便会打印所有的命令，但是这种方法非常消耗性能，仅用于调试</p><h2 id="redis的内存管理与实现"><a href="#redis的内存管理与实现" class="headerlink" title="redis的内存管理与实现"></a>redis的内存管理与实现</h2><p>很重要，参考redis入门指南93页</p><p>list 数目较小时可以理解为一种特殊数组（ziplist），数目大于配置的上限时底层实现会自动切换成链表</br><br>hash 数目较小时可以理解为一种特殊数组(ziplist)，数目大于配置的上限时底层实现会自动切换成hash table</br><br>set 根据元素的类型 int 时经过封装的数组(intset)，其他则为hash table</br><br>sort set 数目较小时可以理解为一种特殊数组(ziplist),数目大于配置上限时就会切换成跳表skip list</br></p><p>内存占用上来说一般可认为跳表会略大于 链表＼数组＼hash table 其他的数据结构之间差异不大，如果真要比较可能要查看源码计算。</br><br>时间效率上来说，要具体到业务常用的操作比较才有意义，比如 同样对list数据结构操作 rpop 时间复杂度O(1) 而 LRANGE时间复杂度为O(N)</br></p><p><a href="https://www.jianshu.com/p/44712ff0528d">https://www.jianshu.com/p/44712ff0528d</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat（5）Join</title>
      <link href="/post/43338/"/>
      <url>/post/43338/</url>
      
        <content type="html"><![CDATA[<h2 id="mycat的join简介："><a href="#mycat的join简介：" class="headerlink" title="mycat的join简介："></a><strong>mycat的join简介：</strong></h2><p>1、尽量避免使用Left join或Right join,而用Inner join。<br>2、在使用Left join或Right join时，ON会优先执行，where条件在最后执行，所以在使用过程中，条件尽可能的在ON语句中判断，减少where的执行 c:少用子查询，而用join。<br><br/><br>mycat支持的Join有四种：</p><ul><li>全局表</li><li>ER分片</li><li>catletT(人工智能)</li><li>ShareJoin</li><li>Spark&#x2F;Storm 对join扩展</li></ul><p>本篇博客只讲前面两张，另外两种一是讲不清，二是用处不是很广。</p><h2 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a><strong>全局表</strong></h2><p>全局表比较简单，即是在每个节点上都存在这个每一个表，所以，当其他表需要与这个表join的时候，直接取自己分片上对应的这个表即可。全局表可以是以下这几种情况（省份表，厂商表，设备类型表）</p><p>全局表一般具有以下几个特点：</p><ul><li>变动不频繁</li><li>数据量总体变化不大</li><li>数据规模不大，很少有超过数十万条记录。</li></ul><p>所以全局表操作的时候，有以下特点：</p><ul><li>全局表的插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</li><li>全局表的查询操作，只从一个节点获取</li><li>全局表可以跟任何一个表进行JOIN操作</li></ul><h2 id="ER分片"><a href="#ER分片" class="headerlink" title="ER分片"></a><strong>ER分片</strong></h2><p>先看一下ER分片的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;my-rang&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">parentKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图，根据我自己的理解，简单来说，就是customer根据某种分片规则分在dn1和dn2两个节点上，然后customer对应的order就保存在对应的节点上。如customer1在dn1这个节点上，那么customer对应的所有订单信息都对应存储在dn1这个节点上。<br><img src="http://localhost:9000/api/file/getImage?fileId=5c33631db9963008fb000005"></p><p>我在本地的测试的示例如下：<br>在dn1上有下面两个sql，用人话来说就是，用户a有订单12和订单15，用户b有订单45，用户c没有订单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#   customer.sql</span><br><span class="line">DROP TABLE IF EXISTS `customer`;</span><br><span class="line">CREATE TABLE `customer` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `customer_name` varchar(15) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of customer</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;1&#x27;, &#x27;a&#x27;);</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;2&#x27;, &#x27;b&#x27;);</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;3&#x27;, &#x27;c&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   order.sql</span><br><span class="line">DROP TABLE IF EXISTS `order`;</span><br><span class="line">CREATE TABLE `order` (</span><br><span class="line">  `id` int(10) NOT NULL,</span><br><span class="line">  `customer_id` int(10) NOT NULL,</span><br><span class="line">  `order_no` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of order</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;111&#x27;, &#x27;1&#x27;, &#x27;12&#x27;);</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;121&#x27;, &#x27;1&#x27;, &#x27;15&#x27;);</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;123&#x27;, &#x27;2&#x27;, &#x27;45&#x27;);</span><br></pre></td></tr></table></figure><p>dn2上有下面两个sql，用人话来说就是，用户x有订单656，用户y有订单1564，用户z有订单3465</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#   customer.sql</span><br><span class="line">DROP TABLE IF EXISTS `customer`;</span><br><span class="line">CREATE TABLE `customer` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `customer_name` varchar(15) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of customer</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;101&#x27;, &#x27;x&#x27;);</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;102&#x27;, &#x27;y&#x27;);</span><br><span class="line">INSERT INTO `customer` VALUES (&#x27;103&#x27;, &#x27;z&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   order.sql</span><br><span class="line">DROP TABLE IF EXISTS `order`;</span><br><span class="line">CREATE TABLE `order` (</span><br><span class="line">  `id` int(10) NOT NULL,</span><br><span class="line">  `customer_id` int(10) NOT NULL,</span><br><span class="line">  `order_no` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of order</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;245&#x27;, &#x27;103&#x27;, &#x27;3465&#x27;);</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;25323&#x27;, &#x27;102&#x27;, &#x27;1564&#x27;);</span><br><span class="line">INSERT INTO `order` VALUES (&#x27;111111&#x27;, &#x27;101&#x27;, &#x27;656&#x27;);</span><br></pre></td></tr></table></figure><p>然后我的schema.xml的配置信息如下。然后这么配置的话是无法直接通过mycat访问order这个表的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;my-rang&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">parentKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分片规则<code>my-rang</code>如下，别问，问就去看mycat的分片规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableRule name=&quot;my-rang&quot;&gt;</span><br><span class="line">&lt;rule&gt;</span><br><span class="line">&lt;columns&gt;id&lt;/columns&gt;</span><br><span class="line">&lt;algorithm&gt;my-rang-long&lt;/algorithm&gt;</span><br><span class="line">&lt;/rule&gt;</span><br><span class="line">&lt;/tableRule&gt;</span><br><span class="line"></span><br><span class="line">&lt;function name=&quot;my-rang-long&quot; class=&quot;io.mycat.route.function.AutoPartitionByLong&quot;&gt;</span><br><span class="line">&lt;property name=&quot;mapFile&quot;&gt;my-rang-long.txt&lt;/property&gt; </span><br><span class="line">&lt;property name=&quot;defaultNode&quot;&gt;0&lt;/property&gt; </span><br><span class="line">&lt;/function&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#my-rang-long.txt</span><br><span class="line">1-99=0</span><br><span class="line">100-999=1</span><br></pre></td></tr></table></figure><p>然后重启之后，运行下面的语句：</p><blockquote><p>explain SELECT c.customer_name, o.order_no FROM <code>customer</code> c Right JOIN <code>order</code> o ON c.id &#x3D; o.customer_id where c.id &#x3D; ‘1’;</p></blockquote><p>就可以看到只在节点1上运行了该sql语句，同时将两个表join在一起了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat（4）分片规则</title>
      <link href="/post/52778/"/>
      <url>/post/52778/</url>
      
        <content type="html"><![CDATA[<h2 id="1、种类"><a href="#1、种类" class="headerlink" title="1、种类"></a><strong>1、种类</strong></h2><p>有两种，分别是连续分片和离散分片，顾名思义，连续就是数据比较集中，比如1、2、3、4等都在dn1，离散就是数据比较分散，比如1在dn1，2在dn2,3在dn3。</p><table><thead><tr><th><br/></th><th>连续分片</th><th>离散分片</th></tr></thead><tbody><tr><td>优点</td><td>扩容无需迁移数<br/>范围条件查询消耗资源少</td><td>并发访问能力增强 <br/>范围条件查询性能提升</td></tr><tr><td>不足</td><td>存在数据热点的可能性 <br/> 并发访问能力受限于单一或少量DataNode</td><td>数据扩容比较困难，涉及到数据迁移问题<br/> 数据库连接消耗比较多</td></tr></tbody></table><h2 id="2、连续分片"><a href="#2、连续分片" class="headerlink" title="2、连续分片"></a><strong>2、连续分片</strong></h2><h3 id="自定义数字范围分片"><a href="#自定义数字范围分片" class="headerlink" title="自定义数字范围分片"></a><strong>自定义数字范围分片</strong></h3><p>根据数据范围的某个字段的值进行分片，可以参照<code>autopartition-long.txt</code>这个分片规则。</p><p>首先在<code>/conf/</code>文件下创建<code>my-rang-long.txt</code>作为自己的分片规则吗，意思是指定的字段，1-99存放在第一个节点上，100-999存放在2节点上，1000-9999存在3节点上，后续CURD的时候都会根据字段去对应的节点做操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># range start-end ,data node index</span><br><span class="line"># K=1000,M=10000.</span><br><span class="line">1-99=0</span><br><span class="line">100-999=1</span><br><span class="line">1000-9999=2</span><br></pre></td></tr></table></figure><p><font color="red">ATTENTION：</font>这里配置的是3个节点，所以使用该规则必须也要有大于等于3个，否则启动的时候mycat会报下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">WrapperSimpleApp: Encountered an error running main: java.lang.ExceptionInInitializerError</span><br><span class="line">java.lang.ExceptionInInitializerError</span><br><span class="line">at io.mycat.MycatStartup.main(MycatStartup.java:53)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">at java.lang.reflect.Method.invoke(Unknown Source)</span><br><span class="line">at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)</span><br><span class="line">at java.lang.Thread.run(Unknown Source)</span><br><span class="line">Caused by: io.mycat.config.util.ConfigException: Illegal table conf : table [ DN12 ] rule function [ my-rang-long ] partition size : 3 &gt; table datanode size : 2, please make sure table datanode size = function partition size</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.checkRuleSuitTable(XMLSchemaLoader.java:563)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.loadTables(XMLSchemaLoader.java:396)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.loadSchemas(XMLSchemaLoader.java:173)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.load(XMLSchemaLoader.java:122)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.&lt;init&gt;(XMLSchemaLoader.java:83)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.&lt;init&gt;(XMLSchemaLoader.java:87)</span><br><span class="line">at io.mycat.config.ConfigInitializer.&lt;init&gt;(ConfigInitializer.java:76)</span><br><span class="line">at io.mycat.config.MycatConfig.&lt;init&gt;(MycatConfig.java:72)</span><br><span class="line">at io.mycat.MycatServer.&lt;init&gt;(MycatServer.java:170)</span><br><span class="line">at io.mycat.MycatServer.&lt;clinit&gt;(MycatServer.java:116)</span><br><span class="line">... 7 more</span><br></pre></td></tr></table></figure><p>在<code>rule.xml</code>中配置该规则：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;my-rang&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>my-rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;my-rang-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>my-rang-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">ATTENTION：</font>这里的<code>&lt;tableRule&gt;</code>和<code>&lt;function&gt;</code>标签有顺序关系，所有的<code>&lt;tableRule&gt;</code>都必须在<code>&lt;function&gt;</code>之前，否则会报下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ExceptionInInitializerError</span><br><span class="line">at io.mycat.MycatStartup.main(MycatStartup.java:53)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">at java.lang.reflect.Method.invoke(Unknown Source)</span><br><span class="line">at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)</span><br><span class="line">at java.lang.Thread.run(Unknown Source)</span><br><span class="line">Caused by: io.mycat.config.util.ConfigException: org.xml.sax.SAXParseException; lineNumber: 147; columnNumber: 14; 元素类型为 &quot;mycat:rule&quot; 的内容必须匹配 &quot;(tableRule*,function*)&quot;。</span><br><span class="line">at io.mycat.config.loader.xml.XMLRuleLoader.load(XMLRuleLoader.java:95)</span><br><span class="line">at io.mycat.config.loader.xml.XMLRuleLoader.&lt;init&gt;(XMLRuleLoader.java:64)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.&lt;init&gt;(XMLSchemaLoader.java:74)</span><br><span class="line">at io.mycat.config.loader.xml.XMLSchemaLoader.&lt;init&gt;(XMLSchemaLoader.java:87)</span><br><span class="line">at io.mycat.config.ConfigInitializer.&lt;init&gt;(ConfigInitializer.java:76)</span><br><span class="line">at io.mycat.config.MycatConfig.&lt;init&gt;(MycatConfig.java:72)</span><br><span class="line">at io.mycat.MycatServer.&lt;init&gt;(MycatServer.java:170)</span><br><span class="line">at io.mycat.MycatServer.&lt;clinit&gt;(MycatServer.java:116)</span><br><span class="line">... 7 more</span><br><span class="line">Caused by: org.xml.sax.SAXParseException; lineNumber: 147; columnNumber: 14; 元素类型为 &quot;mycat:rule&quot; 的内容必须匹配 &quot;(tableRule*,function*)&quot;。</span><br><span class="line">at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.handleEndElement(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.endElement(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanEndElement(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(Unknown Source)</span><br><span class="line">at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(Unknown Source)</span><br><span class="line">at javax.xml.parsers.DocumentBuilder.parse(Unknown Source)</span><br><span class="line">at io.mycat.config.util.ConfigUtil.getDocument(ConfigUtil.java:115)</span><br><span class="line">at io.mycat.config.loader.xml.XMLRuleLoader.load(XMLRuleLoader.java:86)</span><br><span class="line">... 14 more</span><br></pre></td></tr></table></figure><p>最后在<code>schema.xml</code>使用该规则：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;dn12&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;my-rang&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>重启服务，可以看出只在dn1这个节点进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from dn12 where `id`=1;</span><br><span class="line">+-----------+---------------------------------------------+</span><br><span class="line">| DATA_NODE | SQL                                         |</span><br><span class="line">+-----------+---------------------------------------------+</span><br><span class="line">| dn1       | SELECT * FROM dn12 WHERE `id` = 1 LIMIT 100 |</span><br><span class="line">+-----------+---------------------------------------------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></table></figure><h3 id="按日期（天）分片"><a href="#按日期（天）分片" class="headerlink" title="按日期（天）分片"></a><strong>按日期（天）分片</strong></h3><p>从开始日期算起，按照天数来分片<br>例如，从2014-01-01，每10天一个分片<br>注意事项：需要提前将分片规划好，建好，否则有可能日期超出实际配置分片数</p><p>配置方法同上，此时我在数据库中date类型设置的类型为date，故没有时分秒，但是正常情况下应该是timestamp吧。这个就不知道了，后续在做研究。<br>这种配置情况下，2018-12-31对应的就是第1分片，往后的每一天都是下一个分片，2019-01-01为第2个分片，所以使用这种分片方式需要注意有足够的分片。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>date<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-date<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--日期格式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2018-12-31<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--开始日期--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!--每分片天数--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;test_date&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain SELECT * FROM test_date where date = &#x27;2019-01-01&#x27;;</span><br><span class="line">+-----------+-------------------------------------------------------------+</span><br><span class="line">| DATA_NODE | SQL                                                         |</span><br><span class="line">+-----------+-------------------------------------------------------------+</span><br><span class="line">| dn2       | SELECT * FROM test_date WHERE date = &#x27;2019-01-01&#x27; LIMIT 100 |</span><br><span class="line">+-----------+-------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果分派数量不足：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test_date where date = &#x27;2019-01-10&#x27;;</span><br><span class="line">ERROR 1064 (HY000): Can&#x27;t find a valid data node for specified node index :TEST_DATE -&gt; DATE -&gt; 2019-01-10 -&gt; Index : 10</span><br></pre></td></tr></table></figure><h3 id="按单月小时分片"><a href="#按单月小时分片" class="headerlink" title="按单月小时分片"></a><strong>按单月小时分片</strong></h3><p>最小粒度是小时，可以一天最多24个分片，最少1个分片，一个月完后下月从头开始循环。<br>注意事项：每个月月尾，需要手工清理数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>24<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自然月分片"><a href="#自然月分片" class="headerlink" title="自然月分片"></a><strong>自然月分片</strong></h3><p>每个自然月一个分片<br>注意事项：需要提前将分片数规划好，建好，否则有可能日期超出实际配置分片数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2014-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、离散分片"><a href="#3、离散分片" class="headerlink" title="3、离散分片"></a><strong>3、离散分片</strong></h2><h3 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a><strong>枚举分片</strong></h3><p>通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省份或区县来做保存，而全国省份区县固定的<br>配置文件：当字段值为10000时，操作在dn1上进行，当字段值为10010时，在dn2上操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10000=0</span><br><span class="line">10010=1</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;my-hash-int&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="程序指定分区的分片"><a href="#程序指定分区的分片" class="headerlink" title="程序指定分区的分片"></a><strong>程序指定分区的分片</strong></h3><p>此规则是在运行阶段有应用自主决定路由到那个分片。此方法为直接根据字符子串（必须是数字）计算分区号（由应用传递参数，显式指定分区号）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionDirectBySubString&quot;</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;startIndex&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="comment">&lt;!-- zero-based --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span>    <span class="comment">&lt;!-- 分区数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultPartition&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如id&#x3D;05-100000002在此配置中代表根据id中从startIndex&#x3D;0，开始，截取siz&#x3D;2位数字即05，05就是获取的分区，如果没传默认分配到defaultPartition</p><h3 id="十进制求模分片"><a href="#十进制求模分片" class="headerlink" title="十进制求模分片"></a><strong>十进制求模分片</strong></h3><p>规则为对分片字段十进制取模运算。数据分布最均匀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符串hash分片"><a href="#字符串hash分片" class="headerlink" title="字符串hash分片"></a><strong>字符串hash分片</strong></h3><p>此规则是截取字符串中的int数值hash分片</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByString&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">length</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- zero-based --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashSlice&quot;</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>length代表字符串hash求模基数，count分区数，其中length*count&#x3D;1024<br>hashSlice hash预算位，即根据子字符串中int值 hash运算，可以理解为substring（start，end），start为0则只表示0<br>例1：值“45abc”，hash预算位0:2 ，取其中45进行计算<br>例2：值“aaaabbb2345”，hash预算位-4:0 ，取其中2345进行计算</p><h3 id="一致性Hash分片"><a href="#一致性Hash分片" class="headerlink" title="一致性Hash分片"></a><strong>一致性Hash分片</strong></h3><p>此规则优点在于扩容时迁移数据量比较少，前提分片节点比较多，虚拟节点分配多些。<br>虚拟节点少的缺点是会造成数据分布不够均匀<br>如果实际分片数量比较少，迁移量会比较多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、综合类分片规则"><a href="#4、综合类分片规则" class="headerlink" title="4、综合类分片规则"></a><strong>4、综合类分片规则</strong></h2><h3 id="范围求模分片"><a href="#范围求模分片" class="headerlink" title="范围求模分片"></a><strong>范围求模分片</strong></h3><p>先进行范围分片计算出分片组，组内再求模<br>优点可以避免扩容时的数据迁移，又可以一定程度上避免范围分片的热点问题<br>分片组内使用求模可以保证组内数据比较均匀，分片组之间是范围分片可以兼顾范围查询。<br>最好事先规划好分片的数量，数据扩容时按分片组扩容，则原有分片组的数据不需要迁移。由于分片组内数据比较均匀，所以分片组内可以避免热点数据问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-mod&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeMod&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-range-mod.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>21<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>partition-range-mod.txt</code>以下配置一个范围代表一个分片组，&#x3D;号后面的数字代表该分片组所拥有的分片的数量。0-200M&#x3D;5 代表有5个分片节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0-200=5</span><br><span class="line">201-400=1</span><br><span class="line">401-600=4</span><br><span class="line">601-800=4</span><br><span class="line">801-1000=6</span><br></pre></td></tr></table></figure><h3 id="日期范围hash分片"><a href="#日期范围hash分片" class="headerlink" title="日期范围hash分片"></a><strong>日期范围hash分片</strong></h3><p>思想与范围求模一致，当由于日期在取模会有数据集中问题，所以改成hash方法。要求日期格式尽量精确些，不然达不到局部均匀的目的<br>sPartionDay代表多少天分一个分片<br>groupPartionSize代表分片组的大小</p><p>如下配置，则分别对应的是1-6分片，7-12分片等等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-date-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeDateHash&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2018-12-31<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;groupPartionSize&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="取模范围约束分片"><a href="#取模范围约束分片" class="headerlink" title="取模范围约束分片"></a><strong>取模范围约束分片</strong></h3><p>取模运算与范围约束的结合，主要为了后续数据迁移做准备，即可以自主决定取模后数据的节点分布。<br>patternValue 即求模基数，defaoultNode 默认节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>partition-pattern.txt</code>1-32 即代表id%256后分布的范围，如果hash结果在0-32则在dn1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0-32=0</span><br><span class="line">33-64=1</span><br><span class="line">65-96=2</span><br><span class="line">97-128=3</span><br><span class="line">129-160=4</span><br><span class="line">161-192=5</span><br><span class="line">193-224=6</span><br><span class="line">225-256=7</span><br></pre></td></tr></table></figure><h3 id="ASCII码求模范围约束分片"><a href="#ASCII码求模范围约束分片" class="headerlink" title="ASCII码求模范围约束分片"></a><strong>ASCII码求模范围约束分片</strong></h3><p>此种规则类似于取模范围约束，此规则支持数据符号字母取模,patternValue 即求模基数，<br>prefixLength ASCII 截取的位数,此种方式类似求模范围只不过采取的是将列,获取前prefixLength位列所有ASCII码的和<br>进行求模sum%patternValue。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefixLength&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：prefixLength&#x3D;5，值为ascii123456，则取(ascii的值和)%256</p><h3 id="固定分片hash（二进制）"><a href="#固定分片hash（二进制）" class="headerlink" title="固定分片hash（二进制）"></a><strong>固定分片hash（二进制）</strong></h3><p>本条规则类似于十进制的求模运算，区别在于是二进制的操作,是取id的二进制低10位，<br>即id二进制&amp;1111111111。实际效果与求模范围类似。此算法根据二进制则可能会分到连续的分片</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,512<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>partitionCount 分片个数列表，partitionLength 分片范围列表分区长度:默认为最大2^n&#x3D;1024 ,即最大支持1024分区<br>约束 :count,length两个数组的长度必须是一致的。1024 &#x3D; sum((count[i]*length[i])). count和length两个向量的点积恒等于1024<br>本例的分区策略：希望将数据水平分成3份，前两份各占25%，第三份占50%。（故本例非均匀分区）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> |&lt;————————————————————1024————————————————————&gt;|</span><br><span class="line"> |&lt;———256———&gt;|&lt;———256————&gt;|&lt;————————512————————&gt;|</span><br><span class="line"> | partition0| partition1 |   partition2        |</span><br><span class="line"> |   共2份,故count[0]=2   | 共1份，故count[1]=1  |</span><br><span class="line">int[] count = new int[] &#123; 2, 1 &#125;;</span><br><span class="line">int[] length = new int[] &#123; 256, 512 &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat（3）监控</title>
      <link href="/post/9930/"/>
      <url>/post/9930/</url>
      
        <content type="html"><![CDATA[<h2 id="1、日志平台监控"><a href="#1、日志平台监控" class="headerlink" title="1、日志平台监控"></a><strong>1、日志平台监控</strong></h2><p>关于log4j.xml的配置可以自行百度，这里不做详解。<br>最初的启动日志应该是长这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">2018-12-20 23:37:50.232  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDBPool.&lt;init&gt;(PhysicalDBPool.java:101)) - total resouces of dataHost localhost1 is :3</span><br><span class="line">2018-12-20 23:37:50.237  INFO [WrapperSimpleAppMain] (io.mycat.cache.CacheService.createLayeredPool(CacheService.java:125)) - create layer cache pool TableID2DataNodeCache of type encache ,default cache size 10000 ,default expire seconds18000</span><br><span class="line">2018-12-20 23:37:50.238  INFO [WrapperSimpleAppMain] (io.mycat.cache.DefaultLayedCachePool.createChildCache(DefaultLayedCachePool.java:80)) - create child Cache: TESTDB_ORDERS for layered cache TableID2DataNodeCache, size 50000, expire seconds 18000</span><br><span class="line">2018-12-20 23:37:50.320  INFO [WrapperSimpleAppMain] (io.mycat.config.classloader.DynaClassLoader.&lt;init&gt;(DynaClassLoader.java:34)) - dyna class load from .\catlet,and auto check for class file modified every 60 seconds</span><br><span class="line"># mycat 准备就绪启动</span><br><span class="line">2018-12-20 23:37:50.338  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:317)) - MyCat is ready to startup ...</span><br><span class="line"># 启动的线程数，默认是CPU的个数，和线程池大小，可以在server.xml文件中配置</span><br><span class="line">2018-12-20 23:37:50.338  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:329)) - Startup processors ...,total processors:12,aio thread pool size:24</span><br><span class="line"># socket的缓存池大小</span><br><span class="line"> each process allocated socket buffer pool  bytes ,a page size:2097152  a page&#x27;s chunk number(PageSize/ChunkSize) is:512  buffer page&#x27;s number is:240</span><br><span class="line"># 系统的配置，包括自己配置的和默认的配置，均可以在server.xml文件中修改</span><br><span class="line">2018-12-20 23:37:50.339  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:330)) - sysconfig params:SystemConfig [processorBufferLocalPercent=100, frontSocketSoRcvbuf=1048576, frontSocketSoSndbuf=4194304, backSocketSoRcvbuf=4194304, backSocketSoSndbuf=1048576, frontSocketNoDelay=1, backSocketNoDelay=1, maxStringLiteralLength=65535, frontWriteQueueSize=2048, bindIp=0.0.0.0, serverPort=8066, managerPort=9066, charset=utf8, processors=12, processorExecutor=24, timerExecutor=2, managerExecutor=2, idleTimeout=1800000, catletClassCheckSeconds=60, sqlExecuteTimeout=300, processorCheckPeriod=1000, dataNodeIdleCheckPeriod=300000, dataNodeHeartbeatPeriod=10000, clusterHeartbeatUser=_HEARTBEAT_USER_, clusterHeartbeatPass=_HEARTBEAT_PASS_, clusterHeartbeatPeriod=5000, clusterHeartbeatTimeout=10000, clusterHeartbeatRetry=10, txIsolation=3, parserCommentVersion=50148, sqlRecordCount=10, bufferPoolPageSize=2097152, bufferPoolChunkSize=4096, bufferPoolPageNumber=240, maxResultSet=524288, bigResultSizeSqlCount=10, bufferUsagePercent=80, flowControlRejectStrategy=0, clearBigSqLResultSetMapMs=600000, defaultMaxLimit=100, sequnceHandlerType=2, sqlInterceptor=io.mycat.server.interceptor.impl.DefaultSqlInterceptor, sqlInterceptorType=select, sqlInterceptorFile=D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat/logs/sql.txt, mutiNodeLimitType=0, mutiNodePatchSize=100, defaultSqlParser=druidparser, usingAIO=0, packetHeaderSize=4, maxPacketSize=16777216, mycatNodeId=1]</span><br><span class="line">2018-12-20 23:37:50.555  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:53)) - useOffHeapForMerge = 1</span><br><span class="line">2018-12-20 23:37:50.555  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:54)) - memoryPageSize = 64k</span><br><span class="line">2018-12-20 23:37:50.555  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:55)) - spillsFileBufferSize = 1k</span><br><span class="line">2018-12-20 23:37:50.555  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:56)) - useStreamOutput = 0</span><br><span class="line">2018-12-20 23:37:50.555  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:57)) - systemReserveMemorySize = 384m</span><br><span class="line">2018-12-20 23:37:50.563  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:58)) - totalNetWorkBufferSize = 480MB</span><br><span class="line">2018-12-20 23:37:50.563  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:59)) - dataNodeSortedTempDir = D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat</span><br><span class="line">2018-12-20 23:37:50.565  INFO [WrapperSimpleAppMain] (io.mycat.memory.MyCatMemory.&lt;init&gt;(MyCatMemory.java:122)) - mycat.memory.offHeap.size: 761MB</span><br><span class="line">2018-12-20 23:37:50.569  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:437)) - using nio network handler </span><br><span class="line"># mycat 管理的端口号</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:453)) - $_MyCatManager is started and listening on 9066</span><br><span class="line"># mycat 服务的端口号</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:457)) - $_MyCatServer is started and listening on 8066</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:459)) - ===============================================</span><br><span class="line"># 开始初始化数据节点</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:463)) - Initialize dataHost ...</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:467)) - init datahost: localhost1  to use datasource index:1</span><br><span class="line"># 初始化物理数据库连接池，其中连接数10即为minCon配置的最小连接数</span><br><span class="line">2018-12-20 23:37:50.586  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDBPool.initSource(PhysicalDBPool.java:303)) - init backend myqsl source ,create connections total 10 for hostS1 index :1</span><br><span class="line"># 创建对各个物理数据库的连接，数量为配置的minCon=10</span><br><span class="line">2018-12-20 23:37:50.587  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db3</span><br><span class="line">2018-12-20 23:37:50.588  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db2</span><br><span class="line">2018-12-20 23:37:50.588  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db1</span><br><span class="line">2018-12-20 23:37:50.588  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db3</span><br><span class="line">2018-12-20 23:37:50.588  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db2</span><br><span class="line">2018-12-20 23:37:50.588  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db1</span><br><span class="line">2018-12-20 23:37:50.589  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db3</span><br><span class="line">2018-12-20 23:37:50.589  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db2</span><br><span class="line">2018-12-20 23:37:50.589  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db1</span><br><span class="line">2018-12-20 23:37:50.589  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostS1 of schema db3</span><br><span class="line"># 创建连接成功的一些信息，同样是minCon</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-7-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=7, lastTime=1545320270608, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=695, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-5-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=5, lastTime=1545320270608, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=691, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-2-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=2, lastTime=1545320270608, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=699, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-8-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=8, lastTime=1545320270608, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=694, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-6-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=6, lastTime=1545320270608, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=692, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-10-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=10, lastTime=1545320270608, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=700, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-9-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=9, lastTime=1545320270608, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=698, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-3-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=3, lastTime=1545320270608, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=697, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-1-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=1, lastTime=1545320270608, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=693, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.608  INFO [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.GetConnectionHandler.connectionAcquired(GetConnectionHandler.java:67)) - connected successfuly MySQLConnection [id=4, lastTime=1545320270608, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=696, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line"># 初始化结果，完成10个，成功了10个，目标是10个</span><br><span class="line">2018-12-20 23:37:50.689  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDBPool.initSource(PhysicalDBPool.java:328)) - init result :finished 10 success 10 target count:10</span><br><span class="line"># 初始化成功</span><br><span class="line">2018-12-20 23:37:50.689  INFO [WrapperSimpleAppMain] (io.mycat.backend.datasource.PhysicalDBPool.init(PhysicalDBPool.java:274)) - localhost1 index:1 init success</span><br><span class="line">2018-12-20 23:37:50.691  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:501)) - ===============================================</span><br><span class="line"># 往后就是连接池的自动管理，就是连接池的自动开关增加减少</span><br><span class="line">2018-12-20 23:37:50.691  INFO [Timer0] (io.mycat.backend.datasource.PhysicalDatasource.createByIdleLitte(PhysicalDatasource.java:390)) - create connections ,because idle connection not enough ,cur is 0, minCon is 10 for hostS2</span><br><span class="line">2018-12-20 23:37:50.691  INFO [WrapperSimpleAppMain] (io.mycat.MycatServer.startup(MycatServer.java:502)) - Perform XA recovery log ...</span><br><span class="line">2018-12-20 23:37:50.707  INFO [Timer1] (io.mycat.backend.datasource.PhysicalDatasource.getConnection(PhysicalDatasource.java:529)) - no ilde connection in pool,create new connection for hostM1 of schema db3</span><br><span class="line">2018-12-20 23:37:50.710  INFO [$_NIOREACTOR-1-RW] (io.mycat.backend.mysql.nio.handler.NewConnectionRespHandler.connectionAcquired(NewConnectionRespHandler.java:44)) - connectionAcquired MySQLConnection [id=13, lastTime=1545320270710, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=true, threadId=703, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.710  INFO [$_NIOREACTOR-0-RW] (io.mycat.backend.mysql.nio.handler.NewConnectionRespHandler.connectionAcquired(NewConnectionRespHandler.java:44)) - connectionAcquired MySQLConnection [id=12, lastTime=1545320270710, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=true, threadId=701, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-20 23:37:50.710  INFO [$_NIOREACTOR-11-RW] (io.mycat.backend.mysql.nio.handler.NewConnectionRespHandler.connectionAcquired(NewConnectionRespHandler.java:44)) - connectionAcquired MySQLConnection [id=11, lastTime=1545320270710, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=true, threadId=702, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要看到更多日志信息，可以把log4j.xml中把日志的输出级别修改为debug级别。日志系统设定为每分钟读取一次，所以修改完之后，不用重启mycat即可生效。<br>比如执行之前的sql语句<code>CREATE TABLE </code>company<code> (</code>id<code> INT (11) NOT NULL,</code>name<code> VARCHAR (100),</code>sharding_id<code> INT (11) NOT NULL,PRIMARY KEY (</code>id<code>))</code>，就会得到下面的日志:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">2018-12-21 00:04:38.941 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.net.FrontendConnection.query(FrontendConnection.java:289)) - ServerConnection [id=2, schema=testdb, host=0:0:0:0:0:0:0:1, user=root,txIsolation=3, autocommit=true, schema=testdb] CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))</span><br><span class="line">2018-12-21 00:04:38.941 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.server.ServerQueryHandler.query(ServerQueryHandler.java:57)) - ServerConnection [id=2, schema=testdb, host=0:0:0:0:0:0:0:1, user=root,txIsolation=3, autocommit=true, schema=testdb]CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))</span><br><span class="line">2018-12-21 00:04:38.941 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.server.NonBlockingSession.execute(NonBlockingSession.java:126)) - ServerConnection [id=2, schema=testdb, host=0:0:0:0:0:0:0:1, user=root,txIsolation=3, autocommit=true, schema=testdb]CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`)), route=&#123;</span><br><span class="line">   1 -&gt; dn1&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;</span><br><span class="line">   2 -&gt; dn2&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;</span><br><span class="line">   3 -&gt; dn3&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;</span><br><span class="line">&#125; rrs </span><br><span class="line">2018-12-21 00:04:38.944 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.&lt;init&gt;(MultiNodeQueryHandler.java:124)) - execute mutinode query CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))</span><br><span class="line">2018-12-21 00:04:38.944 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:193)) - rrs.getRunOnSlave()-null</span><br><span class="line">2018-12-21 00:04:38.944 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:203)) - node.getRunOnSlave()1-null</span><br><span class="line">2018-12-21 00:04:38.944 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:205)) - node.getRunOnSlave()2-null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.MySQLConnection.synAndDoExecute(MySQLConnection.java:451)) - con need syn ,total syn cmd 1 commands SET names utf8mb4;schema change:false con:MySQLConnection [id=2, lastTime=1545321878945, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=736, charset=utf8, txIsolation=3, autocommit=true, attachment=dn1&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-2-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:false from MySQLConnection [id=2, lastTime=1545321878927, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=736, charset=utf8, txIsolation=3, autocommit=true, attachment=dn1&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=io.mycat.backend.mysql.nio.MySQLConnection$StatusSync@3ac61600, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:203)) - node.getRunOnSlave()1-null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:205)) - node.getRunOnSlave()2-null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-6-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:false from MySQLConnection [id=6, lastTime=1545321878927, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=737, charset=utf8, txIsolation=3, autocommit=true, attachment=dn2&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=io.mycat.backend.mysql.nio.MySQLConnection$StatusSync@5c4f2efd, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.945 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null</span><br><span class="line">2018-12-21 00:04:38.946 DEBUG [$_NIOREACTOR-4-RW] (io.mycat.backend.mysql.nio.MySQLConnection.synAndDoExecute(MySQLConnection.java:451)) - con need syn ,total syn cmd 1 commands SET names utf8mb4;schema change:false con:MySQLConnection [id=5, lastTime=1545321878945, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=734, charset=utf8, txIsolation=3, autocommit=true, attachment=dn3&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line"># 在执行玩之后会返回执行状态，并且释放连接</span><br><span class="line">2018-12-21 00:04:38.946 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:false from MySQLConnection [id=5, lastTime=1545321878927, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=734, charset=utf8, txIsolation=3, autocommit=true, attachment=dn3&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=io.mycat.backend.mysql.nio.MySQLConnection$StatusSync@16891750, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.993 DEBUG [$_NIOREACTOR-6-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:true from MySQLConnection [id=6, lastTime=1545321878927, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=737, charset=utf8, txIsolation=3, autocommit=true, attachment=dn2&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.993 DEBUG [$_NIOREACTOR-6-RW] (io.mycat.server.NonBlockingSession.releaseConnection(NonBlockingSession.java:378)) - release connection MySQLConnection [id=6, lastTime=1545321878927, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=737, charset=utf8, txIsolation=3, autocommit=true, attachment=dn2&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.993 DEBUG [$_NIOREACTOR-6-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:595)) - release channel MySQLConnection [id=6, lastTime=1545321878927, user=root, schema=db2, old shema=db2, borrowed=true, fromSlaveDB=false, threadId=737, charset=utf8, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-21 00:04:38.997 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:true from MySQLConnection [id=5, lastTime=1545321878927, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=734, charset=utf8, txIsolation=3, autocommit=true, attachment=dn3&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.997 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.server.NonBlockingSession.releaseConnection(NonBlockingSession.java:378)) - release connection MySQLConnection [id=5, lastTime=1545321878927, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=734, charset=utf8, txIsolation=3, autocommit=true, attachment=dn3&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br><span class="line">2018-12-21 00:04:38.997 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:595)) - release channel MySQLConnection [id=5, lastTime=1545321878927, user=root, schema=db3, old shema=db3, borrowed=true, fromSlaveDB=false, threadId=734, charset=utf8, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span><br><span class="line">2018-12-21 00:04:39.016 DEBUG [$_NIOREACTOR-2-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.okResponse(MultiNodeQueryHandler.java:254)) - received ok response ,executeResponse:true from MySQLConnection [id=2, lastTime=1545321878927, user=root, schema=db1, old shema=db1, borrowed=true, fromSlaveDB=false, threadId=736, charset=utf8, txIsolation=3, autocommit=true, attachment=dn1&#123;CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`))&#125;, respHandler=io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler@f633b4d, host=localhost, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=true]</span><br></pre></td></tr></table></figure><p>mycat的sql执行流程：如附件所示</p><p>sql经过ServerConnection的处理之后，经过MultiNodeQuery，根据sql中的信息，判断是哪个物理数据库处理，然后将得到的结果返回给MultiNodeQuery， 在把结果传至DataMergeService进行合并，排序，分组等相关操作，返回给然后将得到的结果返回给MultiNodeQuery。</p><p>悄悄的说，debug日志打开之后，很多日志还没有研究，后续一边用一边研究吧。</p><h2 id="2、管理系统监控"><a href="#2、管理系统监控" class="headerlink" title="2、管理系统监控"></a><strong>2、管理系统监控</strong></h2><p>进入管理界面：</p><blockquote><p>mysql -uroot -p123456 -P9066</p></blockquote><h3 id="查看所有的命令行工具"><a href="#查看所有的命令行工具" class="headerlink" title="查看所有的命令行工具"></a><strong>查看所有的命令行工具</strong></h3><blockquote><p>show @@help</p></blockquote><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+--------------------------------------------+</span><br><span class="line">| STATEMENT                                | DESCRIPTION                                |</span><br><span class="line">+------------------------------------------+--------------------------------------------+</span><br><span class="line">| show @@time.current                      | Report current timestamp                   |</span><br><span class="line">| show @@time.startup                      | Report startup timestamp                   |</span><br><span class="line">| show @@version                           | Report Mycat Server version                |</span><br><span class="line">| show @@server                            | Report server status                       |</span><br><span class="line">| show @@threadpool                        | Report threadPool status                   |</span><br><span class="line">| show @@database                          | Report databases                           |</span><br><span class="line">| show @@datanode                          | Report dataNodes                           |</span><br><span class="line">| show @@datanode where schema = ?         | Report dataNodes                           |</span><br><span class="line">| show @@datasource                        | Report dataSources                         |</span><br><span class="line">| show @@datasource where dataNode = ?     | Report dataSources                         |</span><br><span class="line">| show @@datasource.synstatus              | Report datasource data synchronous         |</span><br><span class="line">| show @@datasource.syndetail where name=? | Report datasource data synchronous detail  |</span><br><span class="line">| show @@datasource.cluster                | Report datasource galary cluster variables |</span><br><span class="line">| show @@processor                         | Report processor status                    |</span><br><span class="line">| show @@command                           | Report commands status                     |</span><br><span class="line">| show @@connection                        | Report connection status                   |</span><br><span class="line">| show @@cache                             | Report system cache usage                  |</span><br><span class="line">| show @@backend                           | Report backend connection status           |</span><br><span class="line">| show @@session                           | Report front session details               |</span><br><span class="line">| show @@connection.sql                    | Report connection sql                      |</span><br><span class="line">| show @@sql.execute                       | Report execute status                      |</span><br><span class="line">| show @@sql.detail where id = ?           | Report execute detail status               |</span><br><span class="line">| show @@sql                               | Report SQL list                            |</span><br><span class="line">| show @@sql.high                          | Report Hight Frequency SQL                 |</span><br><span class="line">| show @@sql.slow                          | Report slow SQL                            |</span><br><span class="line">| show @@sql.resultset                     | Report BIG RESULTSET SQL                   |</span><br><span class="line">| show @@sql.sum                           | Report  User RW Stat                       |</span><br><span class="line">| show @@sql.sum.user                      | Report  User RW Stat                       |</span><br><span class="line">| show @@sql.sum.table                     | Report  Table RW Stat                      |</span><br><span class="line">| show @@parser                            | Report parser status                       |</span><br><span class="line">| show @@router                            | Report router status                       |</span><br><span class="line">| show @@heartbeat                         | Report heartbeat status                    |</span><br><span class="line">| show @@heartbeat.detail where name=?     | Report heartbeat current detail            |</span><br><span class="line">| show @@slow where schema = ?             | Report schema slow sql                     |</span><br><span class="line">| show @@slow where datanode = ?           | Report datanode slow sql                   |</span><br><span class="line">| show @@sysparam                          | Report system param                        |</span><br><span class="line">| show @@syslog limit=?                    | Report system mycat.log                    |</span><br><span class="line">| show @@white                             | show mycat white host                      |</span><br><span class="line">| show @@white.set=?,?                     | set mycat white host,[ip,user]             |</span><br><span class="line">| show @@directmemory=1 or 2               | show mycat direct memory usage             |</span><br><span class="line">| switch @@datasource name:index           | Switch dataSource                          |</span><br><span class="line">| kill @@connection id1,id2,...            | Kill the specified connections             |</span><br><span class="line">| stop @@heartbeat name:time               | Pause dataNode heartbeat                   |</span><br><span class="line">| reload @@config                          | Reload basic config from file              |</span><br><span class="line">| reload @@config_all                      | Reload all config from file                |</span><br><span class="line">| reload @@route                           | Reload route config from file              |</span><br><span class="line">| reload @@user                            | Reload user config from file               |</span><br><span class="line">| reload @@sqlslow=                        | Set Slow SQL Time(ms)                      |</span><br><span class="line">| reload @@user_stat                       | Reset show @@sql  @@sql.sum @@sql.slow     |</span><br><span class="line">| rollback @@config                        | Rollback all config from memory            |</span><br><span class="line">| rollback @@route                         | Rollback route config from memory          |</span><br><span class="line">| rollback @@user                          | Rollback user config from memory           |</span><br><span class="line">| reload @@sqlstat=open                    | Open real-time sql stat analyzer           |</span><br><span class="line">| reload @@sqlstat=close                   | Close real-time sql stat analyzer          |</span><br><span class="line">| offline                                  | Change MyCat status to OFF                 |</span><br><span class="line">| online                                   | Change MyCat status to ON                  |</span><br><span class="line">| clear @@slow where schema = ?            | Clear slow sql by schema                   |</span><br><span class="line">| clear @@slow where datanode = ?          | Clear slow sql by datanode                 |</span><br><span class="line">+------------------------------------------+--------------------------------------------+</span><br></pre></td></tr></table></figure><p>下面说几个比较重要的：</p><h3 id="查看系统运行情况"><a href="#查看系统运行情况" class="headerlink" title="查看系统运行情况"></a><strong>查看系统运行情况</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@server;</span><br><span class="line">+---------------+-------------+--------------+------------+---------------+---------------+---------+--------+</span><br><span class="line">| 启动多长时间  | 使用的内存  | 总共的内存   | 最大的内存 | 上次加载的时间|               | 字符集  |  状态  |</span><br><span class="line">+---------------+-------------+--------------+------------+---------------+---------------+---------+--------+</span><br><span class="line">| UPTIME        | USED_MEMORY | TOTAL_MEMORY | MAX_MEMORY | RELOAD_TIME   | ROLLBACK_TIME | CHARSET | STATUS |</span><br><span class="line">+---------------+-------------+--------------+------------+---------------+---------------+---------+--------+</span><br><span class="line">| 25m 41s 530ms |   105986784 |   1029177344 | 3817865216 | 1545321725058 |            -1 | gbk     | ON     |</span><br><span class="line">+---------------+-------------+--------------+------------+---------------+---------------+---------+--------+</span><br></pre></td></tr></table></figure><h3 id="查看NIO-Reactor信息"><a href="#查看NIO-Reactor信息" class="headerlink" title="查看NIO Reactor信息"></a><strong>查看NIO Reactor信息</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@processor;</span><br><span class="line">+-------------+--------+---------+-------------+---------+---------+---------------+--------------+------------+----------+----------+----------+</span><br><span class="line">|    名字     |进入流量 | 出去流量 | Reactor数量 |  读队列  | 写队列  |  空闲BUFFER    |   总的BUFFER |   使用占比  | BU_WARNS |前端连接数 |后端连接数 |</span><br><span class="line">+-------------+--------+---------+-------------+---------+---------+---------------+--------------+------------+----------+----------+----------+</span><br><span class="line">| NAME        | NET_IN | NET_OUT | REACT_COUNT | R_QUEUE | W_QUEUE | FREE_BUFFER   | TOTAL_BUFFER | BU_PERCENT | BU_WARNS | FC_COUNT | BC_COUNT |</span><br><span class="line">+-------------+--------+---------+-------------+---------+---------+---------------+--------------+------------+----------+----------+----------+</span><br><span class="line">| Processor0  |   1372 |     506 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor1  |  20701 |    2469 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        3 |</span><br><span class="line">| Processor2  |  26198 |    4264 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        3 |</span><br><span class="line">| Processor3  |    760 |    2787 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        1 |        1 |</span><br><span class="line">| Processor4  |   1118 |   30275 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor5  |   5610 |    1589 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor6  |   4204 |    1247 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor7  |    704 |     258 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor8  |   5810 |    1500 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor9  |    556 |     222 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        1 |</span><br><span class="line">| Processor10 |   5070 |    1320 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">| Processor11 |  10547 |     275 |           0 |       0 |       0 | 2061584302080 |    503316480 |    -409500 |        0 |        0 |        2 |</span><br><span class="line">+-------------+--------+---------+-------------+---------+---------+---------------+--------------+------------+----------+----------+----------+</span><br></pre></td></tr></table></figure><h3 id="查看线程池"><a href="#查看线程池" class="headerlink" title="查看线程池"></a><strong>查看线程池</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show @@threadPool;</span><br><span class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</span><br><span class="line">| NAME             | POOL_SIZE | ACTIVE_COUNT | TASK_QUEUE_SIZE | COMPLETED_TASK | TOTAL_TASK |</span><br><span class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</span><br><span class="line">| Timer            |         2 |            0 |               0 |           5801 |       5801 |</span><br><span class="line">| BusinessExecutor |        24 |            0 |               0 |             27 |         27 |</span><br><span class="line">+------------------+-----------+--------------+-----------------+----------------+------------+</span><br></pre></td></tr></table></figure><h4 id="查看前端连接池信息"><a href="#查看前端连接池信息" class="headerlink" title="查看前端连接池信息"></a><strong>查看前端连接池信息</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@connection;</span><br><span class="line">+------------+------+-----------------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+</span><br><span class="line">| PROCESSOR  | ID   | HOST            | PORT | LOCAL_PORT | USER | SCHEMA | CHARSET | NET_IN | NET_OUT | ALIVE_TIME(S) | RECV_BUFFER | SEND_QUEUE | txlevel | autocommit |</span><br><span class="line">+------------+------+-----------------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+</span><br><span class="line">| Processor3 |    3 | 0:0:0:0:0:0:0:1 | 9066 |       8160 | root | NULL   | gbk:28  |    206 |    2484 |          1011 |        4096 |          0 |         |            |</span><br><span class="line">+------------+------+-----------------+------+------------+------+--------+---------+--------+---------+---------------+-------------+------------+---------+------------+</span><br></pre></td></tr></table></figure><h4 id="查看后台连接池信息"><a href="#查看后台连接池信息" class="headerlink" title="查看后台连接池信息"></a><strong>查看后台连接池信息</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@backend;</span><br><span class="line">+-------------+------+---------+-----------+------+--------+--------+---------+------+--------+----------+------------+--------+----------+---------+------------+</span><br><span class="line">| processor   | id   | mysqlId | host      | port | l_port | net_in | net_out | life | closed | borrowed | SEND_QUEUE | schema | charset  | txlevel | autocommit |</span><br><span class="line">+-------------+------+---------+-----------+------+--------+--------+---------+------+--------+----------+------------+--------+----------+---------+------------+</span><br><span class="line">| Processor0  |   22 |     752 | localhost | 3306 |   8157 |   1499 |     408 | 1113 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor1  |    1 |     732 | localhost | 3306 |   7738 |   3793 |     966 | 2613 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor1  |   23 |     750 | localhost | 3306 |   8155 |    241 |     102 | 1113 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor1  |   13 |     740 | localhost | 3306 |   7746 |  18073 |    1743 | 2613 | false  | false    |          0 | db3    | utf8:45  | 3       | true       |</span><br><span class="line">| Processor2  |   24 |     751 | localhost | 3306 |   8156 |   1425 |     390 | 1113 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor2  |   14 |     742 | localhost | 3306 |   7748 |  29394 |    4817 | 2613 | false  | false    |          0 | db3    | utf8:45  | 3       | true       |</span><br><span class="line">| Processor3  |    3 |     735 | localhost | 3306 |   7744 |    463 |     156 | 2613 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor4  |    4 |     729 | localhost | 3306 |   7735 |    463 |     156 | 2613 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor4  |   25 |     753 | localhost | 3306 |   8385 |   1055 |     300 |  813 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor5  |    5 |     734 | localhost | 3306 |   7740 |   3741 |    1091 | 2613 | false  | false    |          0 | db3    | utf8:45  | 3       | true       |</span><br><span class="line">| Processor5  |   26 |     754 | localhost | 3306 |   8596 |    315 |     120 |  213 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor5  |   15 |     743 | localhost | 3306 |   7832 |   3201 |     822 | 2313 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor6  |   16 |     744 | localhost | 3306 |   7833 |   4459 |    1128 | 2313 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor6  |    6 |     737 | localhost | 3306 |   7741 |    485 |     299 | 2613 | false  | false    |          0 | db2    | utf8:45  | 3       | true       |</span><br><span class="line">| Processor6  |   27 |     755 | localhost | 3306 |   8597 |    315 |     120 |  213 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor7  |   17 |     745 | localhost | 3306 |   7834 |    389 |     138 | 2313 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor8  |   18 |     746 | localhost | 3306 |   7884 |   3349 |     858 | 2013 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor8  |    8 |     731 | localhost | 3306 |   7737 |   3793 |     966 | 2613 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor9  |   19 |     747 | localhost | 3306 |   7885 |    389 |     138 | 2013 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor10 |   20 |     748 | localhost | 3306 |   7952 |   2609 |     678 | 1713 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor10 |   10 |     733 | localhost | 3306 |   7739 |   3793 |     966 | 2613 | false  | false    |          0 | db3    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor11 |   21 |     749 | localhost | 3306 |   7953 |    315 |     120 | 1713 | false  | false    |          0 | db2    | latin1:5 | 3       | true       |</span><br><span class="line">| Processor11 |   11 |     739 | localhost | 3306 |   7745 |  10380 |     191 | 2613 | false  | false    |          0 | db2    | utf8:45  | 3       | true       |</span><br><span class="line">+-------------+------+---------+-----------+------+--------+--------+---------+------+--------+----------+------------+--------+----------+---------+------------+</span><br></pre></td></tr></table></figure><h3 id="查看心跳信息"><a href="#查看心跳信息" class="headerlink" title="查看心跳信息"></a><strong>查看心跳信息</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@heartbeat;</span><br><span class="line">+--------+-------+-----------+------+---------+-------+--------+---------+--------------+---------------------+-------+</span><br><span class="line">| NAME   | TYPE  | HOST      | PORT | RS_CODE | RETRY | STATUS | TIMEOUT | EXECUTE_TIME | LAST_ACTIVE_TIME    | STOP  |</span><br><span class="line">+--------+-------+-----------+------+---------+-------+--------+---------+--------------+---------------------+-------+</span><br><span class="line">| hostM1 | mysql | localhost | 3306 |       1 |     0 | idle   |       0 | 0,0,0        | 2018-12-21 00:46:15 | false |</span><br><span class="line">| hostS1 | mysql | localhost | 3306 |       1 |     0 | idle   |       0 | 0,0,0        | 2018-12-21 00:46:15 | false |</span><br><span class="line">| hostS2 | mysql | localhost | 3306 |       1 |     0 | idle   |       0 | 0,0,0        | 2018-12-21 00:46:15 | false |</span><br><span class="line">+--------+-------+-----------+------+---------+-------+--------+---------+--------------+---------------------+-------+</span><br><span class="line"># 心跳正常RE_CODE=1</span><br></pre></td></tr></table></figure><h3 id="查看系统参数"><a href="#查看系统参数" class="headerlink" title="查看系统参数"></a><strong>查看系统参数</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show @@sysparam;</span><br><span class="line">+-------------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| PARAM_NAME                    | PARAM_VALUE   | PARAM_DESCR                                                                                                                                                                                                                                                   |</span><br><span class="line">+-------------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| processors                    | 12            | 主要用于指定系统可用的线程数，默认值为Runtime.getRuntime().availableProcessors()方法返回的值。主要影响processorBufferPool、processorBufferLocalPercent、processorExecutor属性。NIOProcessor的个数也是由这个属性定义的，所以调优的时候可以适当的调高这个属性。             |</span><br><span class="line">| processorBufferChunk          | 4096B         | 指定每次分配Socket Direct Buffer的大小，默认是4096个字节。这个属性也影响buffer pool的长度。                                                                                                                                                                   |</span><br><span class="line">| processorBufferPool           | 2097152B      | 指定bufferPool计算 比例值。由于每次执行NIO读、写操作都需要使用到buffer，系统初始化的时候会建立一定长度的buffer池来加快读、写的效率，减少建立buffer的时间                                                                                                      |</span><br><span class="line">| processorBufferLocalPercent   | 100           | 就是用来控制分配这个pool的大小用的，但其也并不是一个准确的值，也是一个比例值。这个属性默认值为100。线程缓存百分比 = bufferLocalPercent / processors属性。                                                                                                     |</span><br><span class="line">| processorExecutor             | 24            | 主要用于指定NIOProcessor上共享的businessExecutor固定线程池大小。mycat在需要处理一些异步逻辑的时候会把任务提交到这个线程池中。新版本中这个连接池的使用频率不是很大了，可以设置一个较小的值。                                                                   |</span><br><span class="line">| sequnceHandlerType            | 本地文件方式  | 指定使用Mycat全局序列的类型。                                                                                                                                                                                                                                 |</span><br><span class="line">| Mysql_packetHeaderSize        | 4B            | 指定Mysql协议中的报文头长度。默认4                                                                                                                                                                                                                            |</span><br><span class="line">| Mysql_maxPacketSize           | 16M           | 指定Mysql协议可以携带的数据最大长度。默认16M                                                                                                                                                                                                                  |</span><br><span class="line">| Mysql_idleTimeout             | 30分钟        | 指定连接的空闲超时时间。某连接在发起空闲检查下，发现距离上次使用超过了空闲时间，那么这个连接会被回收，就是被直接的关闭掉。默认30分钟                                                                                                                          |</span><br><span class="line">| Mysql_charset                 | utf8          | 连接的初始化字符集。默认为utf8                                                                                                                                                                                                                                |</span><br><span class="line">| Mysql_txIsolation             | REPEATED_READ | 前端连接的初始化事务隔离级别，只在初始化的时候使用，后续会根据客户端传递过来的属性对后端数据库连接进行同步。默认为REPEATED_READ                                                                                                                               |</span><br><span class="line">| Mysql_sqlExecuteTimeout       | 300秒         | SQL执行超时的时间，Mycat会检查连接上最后一次执行SQL的时间，若超过这个时间则会直接关闭这连接。默认时间为300秒                                                                                                                                                  |</span><br><span class="line">| Mycat_processorCheckPeriod    | 1秒           | 清理NIOProcessor上前后端空闲、超时和关闭连接的间隔时间。默认是1秒                                                                                                                                                                                             |</span><br><span class="line">| Mycat_dataNodeIdleCheckPeriod | 300秒         | 对后端连接进行空闲、超时检查的时间间隔，默认是300秒                                                                                                                                                                                                           |</span><br><span class="line">| Mycat_dataNodeHeartbeatPeriod | 10秒          | 对后端所有读、写库发起心跳的间隔时间，默认是10秒                                                                                                                                                                                                              |</span><br><span class="line">| Mycat_bindIp                  | 0.0.0.0       | mycat服务监听的IP地址，默认值为0.0.0.0                                                                                                                                                                                                                        |</span><br><span class="line">| Mycat_serverPort              | 8066          | mycat的使用端口，默认值为8066                                                                                                                                                                                                                                 |</span><br><span class="line">| Mycat_managerPort             | 9066          | mycat的管理端口，默认值为9066                                                                                                                                                                                                                                 |</span><br><span class="line">+-------------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat（2）配置文件详解</title>
      <link href="/post/512/"/>
      <url>/post/512/</url>
      
        <content type="html"><![CDATA[<p>mycat比较重要的几个配置文件分别是<code>server.xml</code>、<code>schema.xml</code>、<code>rule.xml</code><br>配置文件修改，需要重启Mycat或者通过9066端口reload</p><h2 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a><strong>schema.xml</strong></h2><p>这个文件主要是配置一些数据库的信息，dataNode这个中间的（配置？节点？），把虚拟库和物理库之间的关系连接在一起，是的物理库可以随意增加而对虚拟库不产生影响。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库配置，与server.xml中的数据库对应 schema 数据库设置，此数据库为逻辑数据库，name与sever.xml和sechma对应 schema： name 逻辑数据库名，与server.xml中的schema对应 checkSQLschema 数据库前缀相关设置，默认和推荐都是false，如果开启会拦截SQL；例：select * from testdb.company 会被拦截为 select * from company sqlMaxLimit select时默认的limit，避免查询全表，如果是非拆分数据库，则该字段无效 dataNode 若schema配置了dataNode，则下面dataNode则无效，且只能配置一个节点。 table: name 逻辑表表名，强烈建议与物理表同名 dataNode 表存储到哪些节点，多节点用逗号分隔，节点为下文dataNode设置的name primaryKey 该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就会发送查询语句到所有配置的DN上，如果使用该属性配置真实表的主键，难么MyCat会缓存主键与具体DN的信息。 那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句给具体的DN，但是尽管配置该属性，如果缓存并没有命中的话，还是会发送语句给具体的DN，来获得数据。 autoIncrement 是否自增，insert的时候，mycat判断字段是否自增，默认是false rule 分片规则名，配置在rule.xml文件中 type 该属性定义了逻辑表的类型，目前逻辑表只有“全局表”和”普通表”两种类型。全局表定义type=”global”，不定义的就是普通表。 ruleRequired 该属性用于指定表是否绑定分片规则，如果配置为 true，但没有配置具体 rule 的话 ，程序会报错。 needAddLimit 是否自动添加limit，默认是开启状态。关闭请谨慎。 childTable： 解决多表join，在这里直接关联，减少join的复杂度，为table的子节点，可以继续增加子节点childTable childTable 标签用于定义 E-R 分片的子表。通过标签上的属性与父表进行关联。 name 表名 primaryKey 主键 joinKey join的本表属性名 parentKey join的另一个表属性名 needAddLimit 是否自动添加limit，默认是开启状态。关闭请谨慎。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;dot_base_info&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;dot_business&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;dot_team&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;dot_rank&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 分片配置 dataNode 分片信息，也就是分库的相关配置 dataNode name 节点名，与table中的dataNode对应 dataHost 物理数据库名，与datahost中的name对应 database 物理数据库中的数据库名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dataNodeLocalhost&quot;</span> <span class="attr">database</span>=<span class="string">&quot;people_post_match&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dataNodeLocalhost&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db02&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- datahost物理数据库，与dataNode中dataHost对应 dataHost name 物理数据库名，与dataNode中的dataHost对应 balance 负载均衡的方式（1：读写分离） 0 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。 1 全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。</span></span><br><span class="line"><span class="comment">                2           所有读操作都随机的在writeHost、readhost上分发。</span></span><br><span class="line"><span class="comment">                3           所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力</span></span><br><span class="line"><span class="comment">            writeType       写入方式</span></span><br><span class="line"><span class="comment">                0           所有的操作发送到配置的第一个writehost</span></span><br><span class="line"><span class="comment">                1           随机发送到配置的所有writehost</span></span><br><span class="line"><span class="comment">                2           不执行写操作</span></span><br><span class="line"><span class="comment">            dbType          数据库类型，目前支持二进制的 mysql 协议，还有其他使用 JDBC 连接的数据库。例如：mongodb、oracle、spark 等.</span></span><br><span class="line"><span class="comment">            heartbeat       心跳检测语句，注意语句结尾的分号</span></span><br><span class="line"><span class="comment">            maxCon          最大连接数，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。</span></span><br><span class="line"><span class="comment">            minCon          初始化连接数</span></span><br><span class="line"><span class="comment">            dbDriver        指定连接后端数据库使用的 Driver，目前可选的值有 native 和 JDBC。使用 native 的话，因为这个值执行的是二进制的 mysql 协议，所以可以使用 mysql 和 maridb。其他类型的数据库则需要使用 JDBC 驱动来支持。</span></span><br><span class="line"><span class="comment">            switchType      切换类型</span></span><br><span class="line"><span class="comment">                -1          表示不自动切换</span></span><br><span class="line"><span class="comment">                1           默认值，表示自动切换</span></span><br><span class="line"><span class="comment">                2           基于MySQL主从同步的状态决定是否切换,心跳语句为show slave status</span></span><br><span class="line"><span class="comment">                3           基于MySQL galary cluster的切换机制（适合集群），心跳语句为show status like &#x27;wsrep%&#x27;</span></span><br><span class="line"><span class="comment">            slaveThreshold  从节点个数上限 </span></span><br><span class="line"><span class="comment">writeHost/readHost</span></span><br><span class="line"><span class="comment">host用于标识不同实例，一般 writeHost 我们使用*M1，readHost 我们用*S1</span></span><br><span class="line"><span class="comment">url后端实例链接地址。Native：地址：端口 JDBC：jdbc的url</span></span><br><span class="line"><span class="comment">user用户名</span></span><br><span class="line"><span class="comment">password密码</span></span><br><span class="line"><span class="comment">weight权重 配置在 readhost 中作为读节点的权重</span></span><br><span class="line"><span class="comment">usingDecrypt是否对密码加密，默认0。具体加密方法看官方文档</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dataNodeLocalhost&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a><strong>server.xml</strong></h2><p>主要有<code>user</code>和<code>system</code>。其中<code>user</code>配置mysql的用户信息，<code>system</code>配置mycat的值系统调优的关键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 通过添加_MYCAT_OP_TIME字段来进行一致性检测，为BIGINT类型 1为开启全加班一致性检测、0为关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用来指定Mycat全局序列类型，0为本地文件，1为数据库方式，2为时间戳列方式，默认使用本地文件方式，文件方式主要用于测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 子查询中存在关联查询的情况下,检查关联字段中是否有分片字段 .默认 false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subqueryRelationshipCheck&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 1为开启mysql压缩协议--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置模拟的MySQL版本号--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;fakeMySQLVersion&quot;&gt;5.6.20&lt;/property&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 线程池相关配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定每次分配socker direct buffer 的值，默认是4096字节 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;4096&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置系统可用的线程数量，默认值为Runtime.getRuntime().availableProcessors() processorBufferPool、processorBufferLocalPercent、processorExecutor属性。NIOProcessor的个数也是由这个属性定义的，所以调优的时候可以适当的调高这个属性。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定NIOProcessor上共享的businessExecutor固定线程池大小 可以设置一个较小的值--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena | type 2 NettyBufferPool --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;processorBufferPoolType&quot;&gt;0&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建共享buffer需要占用的总空间大小。默认bufferChunkSize(4096) * processors属性 * 1000；BufferPool的总长度 = bufferPool / bufferChunk --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;processorBufferPool&quot;&gt;409600&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 二级共享buffer是processorBufferPool的百分比，这里设置的是百分比--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;processorBufferLocalPercent&quot;&gt;100&lt;/property&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- TCP 参数配置，mycat在每次建立前后端连接时候，都会使用这些参数初始化TCP属性，详细可以查看java.net文档 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;frontSocketSoRcvbuf&quot;&gt;1024*1024/property&gt; --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;frontSocketSoSndbuf&quot;&gt;4*1024*1024/property&gt; --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;frontSocketNoDelay&quot;&gt;1/property&gt; --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;backSocketSoRcvbuf&quot;&gt;4*1024*1024/property&gt; --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;backSocketSoSndbuf&quot;&gt;1024*1024/property&gt; --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;backSocketNoDelay&quot;&gt;1/property&gt;  --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql相关配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果为 true的话 严格遵守隔离级别,不会在仅仅只有select语句的时候在事务中切换连接--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;strictTxIsolation&quot;&gt;false&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前端连接的初始化事务隔离级别，只在初始化的时候使用，后续会根据客户端传递过来的属性对后端数据库连接进行同步。默认为 REPEATED_READ，设置值为数字默认 3。 READ_UNCOMMITTED = 1; READ_COMMITTED = 2; REPEATED_READ = 3; SERIALIZABLE = 4; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;txIsolation&quot;&gt;3&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 字符集--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;charset&quot;&gt;utf8&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 Mysql 协议中的报文头长度。默认 4。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;packetHeaderSize&quot;&gt;4&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 Mysql 协议可以携带的数据最大长度。默认 16M。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;maxPacketSize&quot;&gt;16M&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定连接的空闲时间超时长度，如果某个连接空闲时间超过该值，则将连接关闭并回收，单位为毫秒，默认值为30分钟--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL 执行超时的时间，Mycat 会检查连接上最后一次执行 SQL 的时间，若超过这个时间则会直接关闭这连接。默认时间为 300 秒，单位秒。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;sqlExecuteTimeout&quot;&gt;300&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 周期间隔相关属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 清理 NIOProcessor 上前后端空闲、超时和关闭连接的间隔时间。默认是 1 秒，单位毫秒 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;processorCheckPeriod&quot;&gt;1000&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对后端连接进行空闲、超时检查的时间间隔，默认是 300 秒，单位毫秒。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;dataNodeIdleCheckPeriod&quot;&gt;300000&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对后端所有读、写库发起心跳的间隔时间，默认是 10 秒，单位毫秒。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;dataNodeHeartbeatPeriod&quot;&gt;10000&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 服务相关属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义mycat使用的端口，默认值为8066--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义mycat管理的端口，默认值为9066 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mycat服务监听的ip地址，默认为0.0.0.0--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt; --&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认是65535 64K 用于sql解析时最大文本长度 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 配置是否启用非堆内存跨分片结果集，1为开启，0为关闭，mycat1.6开始支持该属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 单位为m--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 单位为k--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 单位为m--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 是否采用zookeeper协调切换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- XA Recovery Log日志路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;XARecoveryLogBaseDir&quot;&gt;./&lt;/property&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- XA Recovery Log日志名称 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;XARecoveryLogBaseName&quot;&gt;tmlog&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个属性用来指定默认的解析器。目前的可用的取值有：druidparser和 fdbparser。使用的时候可以选择其中的一种，目前一般都使用druidparser --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;defaultSqlParser&quot;&gt;druidparser&lt;/property&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--白名单可以使用通配符%或着*--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--例如&lt;host host=&quot;127.0.0.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--例如&lt;host host=&quot;127.0.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--例如&lt;host host=&quot;127.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--例如&lt;host host=&quot;1*7.*&quot; user=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这些配置情况下对于127.0.0.1都能以root账户登录--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;firewall&gt;</span></span><br><span class="line"><span class="comment">           &lt;whitehost&gt;</span></span><br><span class="line"><span class="comment">                &lt;host host=&quot;1*7.0.0.*&quot; user=&quot;root&quot;/&gt;</span></span><br><span class="line"><span class="comment">           &lt;/whitehost&gt;</span></span><br><span class="line"><span class="comment">           &lt;blacklist check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">           &lt;/blacklist&gt;</span></span><br><span class="line"><span class="comment">        &lt;/firewall&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- name 登录mycat用户名 password 登录mycat密码 schemas 数据库名，这里回合schema.xml中的而配置关联，多个用逗号分开 readOnly 配置是否允许只读 benchmark 定义限制前端整体的连接数，如果其值为0，或者不设置，则表示不限制连接数量 usingDecrrypt 设置是否开启密码加密功能，默认为0不开启加密，为1则表示开启加密 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">&lt;/schema&gt;</span></span><br><span class="line"><span class="comment">&lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven相关</title>
      <link href="/post/7412/"/>
      <url>/post/7412/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven-冷知识："><a href="#Maven-冷知识：" class="headerlink" title="Maven 冷知识："></a><strong>Maven 冷知识：</strong></h1><h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a><strong>1、</strong></h2><blockquote><p>Could not find goal ‘create’ in plugin org.apache.maven.plugins:maven-archetype-plugin:3.0.0 among available goals crawl, create-from-project, generate, help, integration-test, jar, update-local-catalog -&gt; [Help 1]</p></blockquote><p>在maven3.0.5以上版本舍弃了create，使用generate生成项目</p><p>使用<code>mvn archetype:generate</code>生成maven项目</p><h2 id="2、范围scope"><a href="#2、范围scope" class="headerlink" title="2、范围scope"></a><strong>2、范围scope</strong></h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a><strong>test</strong></h3><p>当一个依赖的范围是test的时候，说明它在Compiler插件运行compile目标的时候是不可用的。它只有在运行compiler:testCompile和surefire:test目标的时候才会被加入到classpath中。</p><h3 id="provided"><a href="#provided" class="headerlink" title="provided"></a><strong>provided</strong></h3><p>provided范围告诉Maven一个依赖在编译的时候需要，但是它不应该被捆绑在构建的输出中。当你开发web应用的时候provided范围变得十分有用，你需要通过Servlet API来编译你的代码，但是你不希望Servlet API的JAR文件包含在你web应用的WEB-INF&#x2F;lib目录中。</p><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a><strong>compile</strong></h3><p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a><strong>runtime</strong></h3><p>runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。</p><h3 id="system"><a href="#system" class="headerlink" title="system"></a><strong>system</strong></h3><p>system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven也不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注意该范围是不推荐使用。</p><h2 id="3、报错"><a href="#3、报错" class="headerlink" title="3、报错"></a><strong>3、报错</strong></h2><h3 id="①java-lang-NoClassDefFoundError-org-x2F-apache-x2F-maven-x2F-doxia-x2F-siterenderer-x2F-DocumentContent"><a href="#①java-lang-NoClassDefFoundError-org-x2F-apache-x2F-maven-x2F-doxia-x2F-siterenderer-x2F-DocumentContent" class="headerlink" title="①java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;maven&#x2F;doxia&#x2F;siterenderer&#x2F;DocumentContent"></a>①java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;maven&#x2F;doxia&#x2F;siterenderer&#x2F;DocumentContent</h3><p>执行<code>mvn site</code>的时候报上面的错<br>原因：<br><code>maven-site-plugin</code>版本过低或者没有<br>解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.doxia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>doxia-site-renderer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a><strong>名词解释</strong></h2><table><thead><tr><th>英文</th><th>英文释义</th><th>中文释义</th></tr></thead><tbody><tr><td>POM</td><td>project object Model</td><td>项目对象模型</td></tr><tr><td>groupId</td><td></td><td>团体，公司，小组，组织，项目，或者其它团体。团体标识的约定是，它以创建这个项目的组织名称的逆向域名(reverse domain name)开头。来自Sonatype的项目有一个以com.sonatype开头的groupId，而Apache Software的项目有以org.apache开头的groupId。</td></tr><tr><td>artifactId</td><td></td><td>在groupId下的表示一个单独项目的唯一标识符。</td></tr><tr><td>version</td><td></td><td>一个项目的特定版本。发布的项目有一个固定的版本标识来指向该项目的某一个特定的版本。而正在开发中的项目可以用一个特殊的标识，这种标识给版本加上一个“SNAPSHOT”的标记。</td></tr></tbody></table><hr><h2 id="4、Maven生命周期"><a href="#4、Maven生命周期" class="headerlink" title="4、Maven生命周期"></a><strong>4、Maven生命周期</strong></h2><p><img src="https://img.ncfl.tech/202305012226855.jpg"></p><table><thead><tr><th>生命周期阶段</th><th>描述</th></tr></thead><tbody><tr><td>validate</td><td>验证项目是否正确，以及所有为了完整构建必要的信息是否可用</td></tr><tr><td>generate-sources</td><td>生成所有需要包含在编译过程中的源代码</td></tr><tr><td>process-sources</td><td>处理源代码，比如过滤一些值——–过滤配置文件，配置文件的输出路径等</td></tr><tr><td>generate-resources</td><td>生成所有需要包含在打包过程中的资源文件</td></tr><tr><td>process-resources</td><td>复制并处理资源文件至目标目录，准备打包</td></tr><tr><td>compile</td><td>编译项目的源代码</td></tr><tr><td>process-classes</td><td>后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）</td></tr><tr><td>generate-test-sources</td><td>生成所有包含在测试编译过程中的测试源码</td></tr><tr><td>process-test-sources</td><td>处理测试源码，比如过滤一些值</td></tr><tr><td>generate-test-resources</td><td>生成测试需要的资源文件</td></tr><tr><td>process-test-resources</td><td>复制并处理测试资源文件至测试目标目录</td></tr><tr><td>test-compile</td><td>编译测试源码至测试目标目录</td></tr><tr><td>test</td><td>使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布</td></tr><tr><td>prepare-package</td><td>在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本</td></tr><tr><td>package</td><td>将编译好的代码打包成可分发的格式，如JAR，WAR，或者EAR</td></tr><tr><td>pre-integration-test</td><td>执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境</td></tr><tr><td>integration-test</td><td>如果有必要的话，处理包并发布至集成测试可以运行的环境</td></tr><tr><td>post-integration-test</td><td>执行一些在集成测试运行之后需要的动作。如清理集成测试环境。</td></tr><tr><td>verify</td><td>执行所有检查，验证包是有效的，符合质量规范</td></tr><tr><td>install</td><td>安装包至本地仓库，以备本地的其它项目作为依赖使用</td></tr><tr><td>deploy</td><td>复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）</td></tr></tbody></table><h2 id="5、maven插件简介"><a href="#5、maven插件简介" class="headerlink" title="5、maven插件简介"></a><strong>5、maven插件简介</strong></h2><h3 id="1、maven-surefire-plugin"><a href="#1、maven-surefire-plugin" class="headerlink" title="1、maven-surefire-plugin"></a><strong>1、maven-surefire-plugin</strong></h3><p>maven执行测试环节的时候，会生成测试报告。报告地址为surefire-reports目录下。<br>maven运行的时候如果Test不通过，则会停止运行，添加这个插件之后，可以忽略错误，继续运行，方法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不在pom文件中配置，在运行的时候<code>mvn test -Dmaven.test.failure.ignore=true</code></p><p>跳过测试用例的一些方法：<br>(1)基于<code>maven-surefire-plugin</code>插件，pom文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)基于<code>maven-surefire-plugin</code>插件，运行的时候添加<code>mvn install -Dmaven.test.skip=true</code><br>(3)运行的时候添加<code>mvn install -DskipTests</code></p><h3 id="2、maven中使用jetty和tomcat插件"><a href="#2、maven中使用jetty和tomcat插件" class="headerlink" title="2、maven中使用jetty和tomcat插件"></a><strong>2、maven中使用jetty和tomcat插件</strong></h3><h3 id="jetty"><a href="#jetty" class="headerlink" title="jetty"></a><strong>jetty</strong></h3><p>使用jetty插件，版本号可有可无，若无版本号，默认采用最新版，原因见   LATEST 和 RELEASE 版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jetty相关信息配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>1<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpConnector</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">httpConnector</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">webApp</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样也可以使用下面的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于二者的区别及对应的配置信息后续在做研究。</p><p>常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn jetty:deploy    #部署一个web war包</span><br><span class="line">mvn jetty:reload    #重新加载web war包</span><br><span class="line">mvn jetty:start         #启动jetty</span><br><span class="line">mvn jetty:stop          #停止jetty</span><br><span class="line">mvn jetty:undeploy      #停止一个war包</span><br><span class="line">mvn jetty:run        #启动嵌入式jetty ，并运行当前项目</span><br></pre></td></tr></table></figure><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a><strong>tomcat</strong></h3><p>与jetty相似，这里列举一下就好了，不做展开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/wp<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat6<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;port&gt;9090&lt;/port&gt;</span><br><span class="line">        &lt;path&gt;/mgr&lt;/path&gt;</span><br><span class="line">        &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</span><br><span class="line">        &lt;finalName&gt;mgr&lt;/finalName&gt;</span><br><span class="line">        &lt;server&gt;tomcat7&lt;/server&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>注意：使用tomcat涉及到<code>javax-servlet-api</code>这个包的需要<code>provided</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、maven打包文件命名"><a href="#6、maven打包文件命名" class="headerlink" title="6、maven打包文件命名"></a><strong>6、maven打包文件命名</strong></h2><p>父类和自身的版本号必须有一个，否则打包失败。<br>优先级 <code>finalName</code> &gt; <code>自身</code> &gt; <code>父类</code></p><p>无自己的版本号，采用父类版本号，如下，则<code>simple-webapp-1-SNAPSHOT.war</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>hhhh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有自己的版本号，采用自身版本号，如下，则<code>simple-webapp-1.0.0.war</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>hhhh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若build中有<code>finalName</code>，如下，则<code>simple-webapp.war</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>simple-webapp<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、maven分析依赖"><a href="#7、maven分析依赖" class="headerlink" title="7、maven分析依赖"></a><strong>7、maven分析依赖</strong></h2><blockquote><p>mvn dependency:analyze</p></blockquote><p>dependency:analyze如何知道什么类和依赖是你项目的字节码直接引用的？Dependency插件使用ObjectWeb ASM工具包来分析字节码。Dependency插件使用ASM来遍历当前项目中的所有类，构建一个所有其它被引用的类的列表。之后它遍历所有的依赖，直接依赖和传递性依赖，然后标记所有在直接依赖中发现的类。任何没有在直接依赖中找到的类会在传递性依赖中被发现，然后，“使用的，但未声明的依赖”列表就产生了。<br/><br>相反的，未使用的，但声明的依赖列表就相对比较难验证了，而且该列表没有“使用的，但未声明的依赖”有用。一种情况，一些依赖只在运行时或测试时使用，它们不会在字节码中被发现。你能在输出中很明显的看到它们的存在，例如，JUnit就在这个列表中，但是它是需要的，因为它被用来做单元测试。你也会在simple-web模块中注意到Velocity和Servlet API依赖出现在这个列表中，它们也是需要的，因为，虽然项目的类中没有任何对这些依赖的直接引用，但在运行的时候它们是必要的。<br/><br>小心移除那些未使用，但声明的依赖，除非你拥有很好的测试覆盖率，否则你很可能引入了一个运行时错误。</p><h2 id="8、maven的超级POM"><a href="#8、maven的超级POM" class="headerlink" title="8、maven的超级POM"></a><strong>8、maven的超级POM</strong></h2><p>超级POM的路径为<code>\lib\maven-model-builder-3.5.4.jar</code>中的<code>\org\apache\maven\model\pom-4.0.0.xml</code></p><p>所有的pom文件都是继承自这个文件，看一下这个文件就会知道很多东西</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 默认的仓库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 默认的插件库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的编译文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的class文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的打包文件名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的测试文件class的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的源码路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的脚本文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的测试文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认的资源文件路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认的测试资源文件路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> These plugins will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2-beta-5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的测试报告生成路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> The release profile will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>release-profile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>performRelease<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">updateReleaseInfo</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updateReleaseInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- END SNIPPET: superpom --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、maven项目版本"><a href="#8、maven项目版本" class="headerlink" title="8、maven项目版本"></a><strong>8、maven项目版本</strong></h2><p>版本格式如下：,限定版本用来标识里程碑构建：alpha和beta发布，限定版本通过连字符与主版本，次版本或增量版本隔离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;major version&gt;.&lt;minor version&gt;.&lt;incremental version&gt;-&lt;qualifier&gt;</span><br><span class="line">&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;-&lt;限定版本&gt;</span><br></pre></td></tr></table></figure><p>maven比较版本号的时候，使用的是字符串的不计较，如<code>1.2.3-alpha-2</code>和<code>1.2.3-alpha-10</code>，正常来说应该是版本alpha-10新于版本alpha-2，但是由于maven是采用字符串比较，所以在maven中版本alpha-2新于版本alpha-10，所以取名的时候应该是<code>alpha-02</code>和<code>alpha-10</code></p><h3 id="SNAPSHOT版本"><a href="#SNAPSHOT版本" class="headerlink" title="SNAPSHOT版本"></a><strong>SNAPSHOT版本</strong></h3><p>Maven版本可以包含一个字符串字面量来表示项目正处于活动的开发状态。如果一个版本包含字符串“SNAPSHOT”，Maven就会在安装或发布这个组件的时候将该符号展开为一个日期和时间值，转换为UTC（协调世界时）。例如，如果你的项目有个版本为“1.0-SNAPSHOT”并且你将这个项目的构件部署到了一个Maven仓库，如果你在UTC2008年2月7号下午11:08部署了这个版本，Maven就会将这个版本展开成“1.0-20080207-230803-1”。换句话说，当你发布一个snapshot，你没有发布一个软件模块，你只是发布了一个特定时间的快照版本。</p><p>作为一个默认设置，Maven不会从远程仓库检查SNAPSHOT版本，要依赖于SNAPSHOT版本，用户必须在POM中使用repository和pluginRepository元素显式的开启下载snapshot的功能。</p><h3 id="LATEST-和-RELEASE-版本"><a href="#LATEST-和-RELEASE-版本" class="headerlink" title="LATEST 和 RELEASE 版本"></a><strong>LATEST 和 RELEASE 版本</strong></h3><p>LATEST是指某个特定构件最新的发布版或者快照版(snapshot)，最近被部署到某个特定仓库的构件。RELEASE是指仓库中最后的一个非快照版本。</p><p>非核心插件，或者说没有在超级POM中指定版本的插件仍然会使用LATEST版本去从仓库获取构件。</p><h2 id="9、传递依赖"><a href="#9、传递依赖" class="headerlink" title="9、传递依赖"></a><strong>9、传递依赖</strong></h2><table><thead><tr><th>直接依赖</th><th>传递依赖</th><th>传递依赖</th><th>传递依赖</th><th>传递依赖</th></tr></thead><tbody><tr><td></td><td>compile</td><td>provided</td><td>runtime</td><td>test</td></tr><tr><td>compile</td><td>compile</td><td>-</td><td>runtime</td><td>-</td></tr><tr><td>provided</td><td>provided</td><td>provided</td><td>provided</td><td>-</td></tr><tr><td>runtime</td><td>runtime</td><td>-</td><td>runtime</td><td>-</td></tr><tr><td>test</td><td>test</td><td>-</td><td>test</td><td>-</td></tr></tbody></table><p>移除传递依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.mavenbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.mavenbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、assembly"><a href="#10、assembly" class="headerlink" title="10、assembly"></a><strong>10、assembly</strong></h2><p>这是一个用来打包的插件，<code>descriptorRef</code>中主要有<code>bin</code> <code>jar-with-dependencies</code> <code>project</code> <code>src</code>四种描述，<code>jar-with-dependencies</code>构建的是jar包，若jar包需要被运行，则需要指定<code>archive</code>，内容为需要运行的main方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>create-executable-jar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  <span class="comment">&lt;!--绑定到package生命周期阶段上--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!--只运行一次--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                        src</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.sonatype.mavenbook.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>四个值生成的文件分别如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">learning-ncfl-1.0.0-bin.tar.bz2</span><br><span class="line">learning-ncfl-1.0.0-bin.tar.gz</span><br><span class="line">learning-ncfl-1.0.0-bin.zip</span><br><span class="line">learning-ncfl-1.0.0-jar-with-dependencies.jar</span><br><span class="line">learning-ncfl-1.0.0-project.tar.bz2</span><br><span class="line">learning-ncfl-1.0.0-project.tar.gz</span><br><span class="line">learning-ncfl-1.0.0-project.zip</span><br><span class="line">learning-ncfl-1.0.0-src.tar.bz2</span><br><span class="line">learning-ncfl-1.0.0-src.tar.gz</span><br><span class="line">learning-ncfl-1.0.0-src.zip</span><br></pre></td></tr></table></figure><h3 id="使用assembly-xml来构建项目"><a href="#使用assembly-xml来构建项目" class="headerlink" title="使用assembly.xml来构建项目"></a>使用assembly.xml来构建项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包的文件名，可以为空，一般使用-进行单词的分割 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>bundle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包的文件类型，可以是jar,zip,tar,bzip2,tar.gz,tar.bz2,rar,war,ear,sar,dir，甚至可以自定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 打包的文件中包括哪些文件，如何命名及其相对位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 需要打包的文件路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>target/my-app-1.0.jar<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包之后存放位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包之后的文件名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">destName</span>&gt;</span>my-app.jar<span class="tag">&lt;/<span class="name">destName</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 读写权限，与linux相同，r:4 w:2 x:1 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 与files元素类似,fileSets描述一组文件，如果想要将所包含文件中的表达式替换成属性值，可以将filtering标记设置成true。表达式可以用$&#123;&#125;标记或者@@标记（@project.groupId）来表示。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 包含的路径，“**”表示匹配一个或者多个目录，“*”表示匹配文件名的任一部分，“？”表示匹配文件名中的任意单个字符。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 除去的路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>start.sh<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useDefaultExcludes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultExcludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directoryMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">directoryMode</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认不打包的文件或文件夹，为.svn，.cvs等，默认值为true --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">userDefaultExclludes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">userDefaultExclludes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件的换行字元，默认值为keep，还可以为unix（unix的换行）、lf（换行字符）、dos（MS-DOS风格的换行）、crlf（回车后加一个换行符）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lineEnding</span>&gt;</span>keep<span class="tag">&lt;/<span class="name">lineEnding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 包含的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除当前项目的构件，默认是false，建议是true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">userProjectArtifact</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组合所有匹配依赖的拆解内容至归档的根目录,默认是false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包的级别，指定的级别生成在对应的目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>org.sonatype.mavenbook<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自定义每个输出文件的文件名，默认值content-zh-0.6-SNAPSHOT$&#123;dashClassifier?&#125;.$&#123;artifact.extension&#125; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputFileNameMapping</span>&gt;</span>$&#123;module.artifactId&#125;.$&#123;module.extension&#125;<span class="tag">&lt;/<span class="name">outputFileNameMapping</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除的依赖，支持三种格式的匹配（groupId:artifactId、groupId:artifactId:type[:classifier]、groupId:artifactId:type[:classifier]:version），支持通配符* --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*:zip<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*:zip<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>true<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unpackOptions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/LICENSE*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">unpackOptions</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">useStrictFiltering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useStrictFiltering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectAttachments</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectAttachments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useTransitiveDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useTransitiveDependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useTransitiveFiltering</span>&gt;</span>fasle<span class="tag">&lt;/<span class="name">useTransitiveFiltering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directoryMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">directoryMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 通常情况下这么配置就完事了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 模块集合，一般不使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">moduleSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否包含子模块，默认值true，此处设置为false是因为自定义了source和excludes--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSubModules</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeSubModules</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处的excludes和includes不支持*通配 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    com.mycompany.application:secret-sauce</span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectoryMapping</span>&gt;</span>$&#123;module.basedir.name&#125;<span class="tag">&lt;/<span class="name">outputDirectoryMapping</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 子模块的目录中应用相同的文件模式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludeSubModuleDirectories</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeSubModuleDirectories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/target<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 包含javadoc --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">binaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attachmentClassifier</span>&gt;</span>javadoc<span class="tag">&lt;/<span class="name">attachmentClassifier</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includeDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeDependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>apidoc-jars<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencySet</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">binaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">moduleSets</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 依赖集合，一般不使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当这个标记为true的时候，只有从Maven中央仓库下载的元数据会被包含进来，默认值为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeMetadata</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeMetadata</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupVersionAlignments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupVersionAlignment</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;/<span class="name">groupVersionAlignment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">groupVersionAlignments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 是否包含根目录，默认值true --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">baseDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">baseDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最佳实践方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>war-fragment<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>WEB-INF/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/web.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;assemble&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;descriptors&gt;</span><br><span class="line">                    &lt;descriptor&gt;src/main/resources/assembly/assembly.xml&lt;/descriptor&gt;</span><br><span class="line">                &lt;/descriptors&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h2 id="11、settings-xml详解"><a href="#11、settings-xml详解" class="headerlink" title="11、settings.xml详解"></a><strong>11、settings.xml详解</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 本地仓库的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\apache-maven-3.5.4-bin\apache-maven-3.5.4-bin\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要让Maven使用文件/.m2/plugin-registry.xml来管理插件版本，则设为true。默认为false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">usePluginRegistry</span>&gt;</span>false<span class="tag">&lt;/<span class="name">usePluginRegistry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果构建系统需要在离线模式下运行，则为true，默认为false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该元素包含一个pluginGroup元素列表，每个子元素包含了一个groupId。当使用某个插件，并且没有在命令行为其提供groupId的时候，Maven就会使用该列表。默认情况下该列表包含了org.apache.maven.plugins。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 私服的安全证书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 私钥文件地址 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;usr.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 密语？ --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件的读取权限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件夹的读取权限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 其他的配置信息，是啥？--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 镜像地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 镜像的id，唯一标识 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>planetmirror.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 镜像的名字 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>PlanetMirror Australia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 镜像的url --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://downloads.planetmirror.com/pub/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 被镜像的服务器的id，不懂，可以使用*通配 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 代理，用来干嘛的额？ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- true则激活代理，若有一组代理，则这个可以选择激活哪一个 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 禁用该代理，黑名单，可以所使用&quot;|&quot;或者&quot;,&quot;进行分割 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 激活此profile的条件，也可以在activeProfiles标签中显性激活 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 默认运行此profile与否 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- jdk版本号，当jdk版本满足条件则运行此profile --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 操作系统信息，当操作系统满足条件则运行此profile --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 满足下面的要求，则改profile被激活 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 若该文件存在或者不存在，则激活此profile --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/1.txt<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/1.txt<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 若该profile激活，属性$&#123;user.install&#125;就可以在POM中被访问 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">user.install</span>&gt;</span>test<span class="tag">&lt;/<span class="name">user.install</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 是否可用 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always，daily（默认，每日），interval:X（X是以分钟为单位的时间间隔），或者never--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 当Maven将构件部署到仓库中时，它也会部署对应的校验和文件。当没有校验和文件，或者该文件不正确时，你的选项有ignore，fail，或者warn --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- maven仓库的布局，可以是default（默认）还是legacy（遗留），maven之后为default --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepositorie</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 是否可用 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always，daily（默认，每日），interval:X（X是以分钟为单位的时间间隔），或者never--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 当Maven将构件部署到仓库中时，它也会部署对应的校验和文件。当没有校验和文件，或者该文件不正确时，你的选项有ignore，fail，或者warn --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- maven仓库的布局，可以是default（默认）还是legacy（遗留），maven之后为default --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepositorie</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 显性激活对应的profile --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>sf-nexus-repos<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12、私有maven库nexus"><a href="#12、私有maven库nexus" class="headerlink" title="12、私有maven库nexus"></a><strong>12、私有maven库nexus</strong></h2><p>nexus下载地址：<a href="https://www.sonatype.com/nexus-repository-oss">https://www.sonatype.com/nexus-repository-oss</a>。当前最新版本为<code>nexus-3.15.2-01</code><br>OSS是免费版的，PRO是付费版的，二者有啥区别没有去研究。</p><p>我这里使用的是windows版本的，因为只是测试用的。<br>下面为把nexus安装位windows的服务，需要管理员权限。</p><blockquote><p>nexus.exe &#x2F;install  #安装<br>nexus.exe &#x2F;start  #开始<br>nexus.exe &#x2F;stop  #结束<br>nexus.exe &#x2F;uninstall  #卸载</p></blockquote><p>若不安装则可以使用运行nexus，可能等待时间会比较久</p><blockquote><p>nexus.exe &#x2F;run</p></blockquote><p>访问<code>localhost:8088</code>(我修改了端口)即可进入到nexus的界面，默认的用户名密码是<code>admin/admin123</code><br><img src="https://img.ncfl.tech/202305012228839.png" alt="11.png"></p><p>创建一个私有库：</p><p><img src="https://img.ncfl.tech/202305012229070.png" alt="12.png"><br><img src="https://img.ncfl.tech/202305012230299.png" alt="13.png"></p><p>修改<code>settings.xml</code>文件如下，详情可以看上文：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\apache-maven-3.5.4-bin\apache-maven-3.5.4-bin\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>central repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8088/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--地址是nexus中repository（Releases/Snapshots）中对应的地址--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8088/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在pom文件中增加如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8088/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8088/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在项目中使用<code>mvn deploy</code>就可以把对应的项目上传至自己的私服。</p><h2 id="13、自定义插件"><a href="#13、自定义插件" class="headerlink" title="13、自定义插件"></a><strong>13、自定义插件</strong></h2><p>新建一个项目：<br><img src="https://img.ncfl.tech/202305012230197.png" alt="14.png"></p><p>该项目及其简单，就只有一个类<code>MyMojo</code>继承自<code>AbstractMojo</code>，实现了其<code>execute</code>方法，这便是自定义插件的执行方法，重写其excute方法即可生成自定义插件。</p><p>追加引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重写之后的<code>MyMojo</code>方法如下，这里采用的是注解的方法生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mojo(name = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMojo</span> <span class="keyword">extends</span> <span class="title class_">AbstractMojo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameter(property = &quot;test&quot;, defaultValue = &quot;123213213&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hhhhh;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(hhhhh);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后运行<code>mvn install</code>将改插件放置在本地仓库或者使用<code>mvn deploy</code>放置与私有库中。</p><p>在需要的项目中引用该插件，运行<code>mvn test:hello</code>，其中<code>test</code>为maven插件的名称，即<code>test-maven-plugin</code>中的test，<code>hello</code>为<code>@Mojo(name = &quot;hello&quot;)</code>中的<code>hello</code>。若有参数，则可以使用<code>mvn test:hello -Dtest=&quot;11111111&quot;</code>对参数进行赋值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单而实用的一些东西"><a href="#简单而实用的一些东西" class="headerlink" title="简单而实用的一些东西"></a><strong>简单而实用的一些东西</strong></h2><h3 id="maven可以使用-来引用一些系统的东西，类似引用自定义的properties"><a href="#maven可以使用-来引用一些系统的东西，类似引用自定义的properties" class="headerlink" title="maven可以使用${}来引用一些系统的东西，类似引用自定义的properties"></a>maven可以使用<code>$&#123;&#125;</code>来引用一些系统的东西，类似引用自定义的<code>properties</code></h3><ul><li>env           环境标量</li><li>project       系统相关配置</li><li>settings      settings.xml文件中的属性</li><li>java          java的系统属性</li></ul><h3 id="dependency-下的-optianal-声明为true的时候，说明该依赖不传递。即是不传递给下一个引用该包的项目"><a href="#dependency-下的-optianal-声明为true的时候，说明该依赖不传递。即是不传递给下一个引用该包的项目" class="headerlink" title="dependency 下的 optianal 声明为true的时候，说明该依赖不传递。即是不传递给下一个引用该包的项目"></a>dependency 下的 optianal 声明为true的时候，说明该依赖不传递。即是不传递给下一个引用该包的项目</h3><h3 id="版本号的引用可以使用-来说明版本号的范围，当有冲突的时候，使用声明的版本号。如-1-0-有冲突时使用1-0版本"><a href="#版本号的引用可以使用-来说明版本号的范围，当有冲突的时候，使用声明的版本号。如-1-0-有冲突时使用1-0版本" class="headerlink" title="版本号的引用可以使用() [] (] [)来说明版本号的范围，当有冲突的时候，使用声明的版本号。如(1.0,]有冲突时使用1.0版本"></a>版本号的引用可以使用<code>()</code> <code>[]</code> <code>(]</code> <code>[)</code>来说明版本号的范围，当有冲突的时候，使用声明的版本号。如<code>(1.0,]</code>有冲突时使用1.0版本</h3><h3 id="多模块项目"><a href="#多模块项目" class="headerlink" title="多模块项目"></a>多模块项目</h3><p>可以通过relativePath来指定父项目的pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../a-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了parent元素，一个POM就只需要定义一个artifactId。但这不是强制的，project-a可以有一个不同的groupId和version，但如果不提供值，Maven就会使用在父POM中指定的值。同时会继承以下这些东西。<br>    • 定义符（groupId和artifactId中至少有一个必须被覆盖）<br>    • 依赖<br>    • 开发者和贡献者<br>    • 插件列表<br>    • 报告列表<br>    • 插件执行 （id匹配的执行会被合并）<br>    • 插件配置</p><h3 id="过滤配置文件"><a href="#过滤配置文件" class="headerlink" title="过滤配置文件"></a>过滤配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/filters/default.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>不同环境对应不用的profile，运行示例<code>mvn apckage -pdev</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">debug</span>&gt;</span>false<span class="tag">&lt;/<span class="name">debug</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">optimize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optimize</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列出所有的profile</p><blockquote><p>mvn help:active-profiles</p></blockquote><h2 id="一些奇奇怪怪的东西"><a href="#一些奇奇怪怪的东西" class="headerlink" title="一些奇奇怪怪的东西"></a><strong>一些奇奇怪怪的东西</strong></h2><h3 id="WARNING-Using-platform-encoding-GBK-actually-to-copy-filtered-resources-i-e-build-is-platform-dependent"><a href="#WARNING-Using-platform-encoding-GBK-actually-to-copy-filtered-resources-i-e-build-is-platform-dependent" class="headerlink" title="[WARNING]  Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!"></a><strong><font color="red">[WARNING] </font> Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</strong></h3><p>解决方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="WARNING-The-artifact-org-apache-commons-commons-io-jar-1-3-2-has-been-relocated-to-commons-io-commons-io-jar-1-3-2"><a href="#WARNING-The-artifact-org-apache-commons-commons-io-jar-1-3-2-has-been-relocated-to-commons-io-commons-io-jar-1-3-2" class="headerlink" title="[WARNING] The artifact org.apache.commons:commons-io:jar:1.3.2 has been relocated to commons-io:commons-io:jar:1.3.2"></a><strong><font color="red">[WARNING] </font>The artifact org.apache.commons:commons-io:jar:1.3.2 has been relocated to commons-io:commons-io:jar:1.3.2</strong></h3><p>解决方法：<br>将pom文件中的依赖 的groupId有org.apache.commons改为commons-io</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>                                  =======&gt;              <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>     </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>       =======&gt;                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         =======&gt;                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>                    =======&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>                                 =======&gt;              <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>             </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat（1）安装和使用</title>
      <link href="/post/60241/"/>
      <url>/post/60241/</url>
      
        <content type="html"><![CDATA[<p>默认已经知道mycat是用来的干嘛的</p><h2 id="mycat的一些链接"><a href="#mycat的一些链接" class="headerlink" title="mycat的一些链接"></a><strong>mycat的一些链接</strong></h2><p>mycat在GitHub上的托管地址：<a href="https://github.com/MyCATApache/Mycat-Server">https://github.com/MyCATApache/Mycat-Server</a><br>mycat1.6之后的下载地址：<a href="http://dl.mycat.io/">http://dl.mycat.io/</a></p><h2 id="一、mycat在window上的安装"><a href="#一、mycat在window上的安装" class="headerlink" title="一、mycat在window上的安装"></a><strong>一、mycat在window上的安装</strong></h2><p>因为是用来学习的，下载太高版本也看不懂，我这里下载的是1.6.5，这篇博文的时候mycat的最新版本1.7，然后2.0正在开发。（话说1.8,1.9版本呢）</p><p>mycat在win上运行分为两种，一种是需要安装服务的，就是在服务管理窗口同意管理服务的那个服务，另一种是不需要安装服务的，直接运行mycat，我在本地上是安装服务的，我觉得这样方便一点，而且经过比较，不知道为什么安装服务，运行起来会比较流畅。</p><h3 id="不安装服务"><a href="#不安装服务" class="headerlink" title="不安装服务"></a><strong>不安装服务</strong></h3><p>在<code>\mycat\bin</code>这个目录下直接运行<code>startup_nowrap.bat</code>即可运行mycat，可以得到下面的输出内容，说明mycat运行成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;REM check JAVA_HOME &amp; java</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;set &quot;JAVA_CMD=D:\software\java\jdk/bin/java&quot;</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;if &quot;D:\software\java\jdk&quot; == &quot;&quot; goto noJavaHome</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;if exist &quot;D:\software\java\jdk\bin\java.exe&quot; goto mainEntry</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;REM set HOME_DIR</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;set &quot;CURR_DIR=D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&quot;</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;cd ..</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat&gt;set &quot;MYCAT_HOME=D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat&quot;</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat&gt;cd D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin</span><br><span class="line"></span><br><span class="line">D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat\bin&gt;&quot;D:\software\java\jdk/bin/java&quot; -server -Xms1G -Xmx2G -XX:MaxPermSize=64M  -XX:+AggressiveOpts -XX:MaxDirectMemorySize=1G -DMYCAT_HOME=D:\program\mycat\Mycat-server-1.6.5-release-20180122220033-win\mycat -cp &quot;..\conf;..\lib\*&quot; io.mycat.MycatStartup</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=64M; support was removed in 8.0</span><br><span class="line">MyCAT Server startup successfully. see logs in logs/mycat.log</span><br></pre></td></tr></table></figure><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a><strong>安装服务</strong></h3><p>使用管理员权限运行cmd，如果不是使用管理员运行，权限不够，无法创建服务，也无法运行</p><blockquote><p>cd &#x2F;mycat&#x2F;bin<br>安装mycat<br>.&#x2F;mycat.bat install<br>运行mycat<br>.&#x2F;mycat.bat start<br>停止mycat服务<br>.&#x2F;mycat.bat stop<br>重启mycat<br>.&#x2F;mycat.bat restart</p></blockquote><p>当然已经安装了服务，自然可以在服务窗口界面运行mycat</p><h2 id="二、mycat的简单使用"><a href="#二、mycat的简单使用" class="headerlink" title="二、mycat的简单使用"></a><strong>二、mycat的简单使用</strong></h2><p>在使用之前，需要在mysql中创建三个数据库：db1,db2,db3，因为默认的配置文件映射的就是这三个数据库。</p><blockquote><p>create database db1;<br>create database db2;<br>create database db3;</p></blockquote><p>schema.xml的这个配置导致我们需要执行这一步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot;/&gt;</span><br><span class="line">&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost1&quot; database=&quot;db2&quot;/&gt;</span><br><span class="line">&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;localhost1&quot; database=&quot;db3&quot;/&gt;</span><br></pre></td></tr></table></figure><p>进入<code>conf/</code>文件中，编辑<code>schema.xml</code>，关于这个文件会下一篇文章中进一步讲解。<br>把下面的这些内容修改成自己数据库的URL和用户名密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">&lt;writeHost host=&quot;hostM1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;root&quot;&gt;</span><br><span class="line">&lt;readHost host=&quot;hostS2&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;root&quot;/&gt;</span><br><span class="line">&lt;/writeHost&gt;</span><br><span class="line">&lt;writeHost host=&quot;hostS1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;root&quot;/&gt;</span><br><span class="line">&lt;/dataHost&gt;</span><br></pre></td></tr></table></figure><p>然后重启一下mycat</p><p>在cmd中输入下面内容，如果mysql指令不存在或者找不到，自行百度，一般来说只要在环境变量中增加mysql的位置就可以了。<br>这里不建议使用客户端访问mycat，理论上的话应该也是可以的，但是我本地测试的时候使用客户端访问是有一点问题的。<br>mycat服务的默认的端口是8066，然后默认的用户名密码是root&#x2F;123456，因为我们这次没有做任何的修改，所以这次也是用这些信息进行登录。</p><blockquote><p>mysql -uroot -p123456 -P8066</p></blockquote><p>正常情况下会得到下面的输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Server version: 5.6.29-mycat-1.6.5-release-20180122220033 MyCat Server (OpenCloundDB)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><p>正常mysql输出的内容长下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 446</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Server version: 5.7.24-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><p>看上面的内容，感觉可mysql登录的输出的内容没差，其实却是差不多，只差了Server Version，一个是mycat，一个是mysql，这就是mycat的优势，几乎可以让使用mycat的无感知的使用mycat，仿佛是在直接使用mysql一样。</p><p>在mycat上创建<code>company</code>表，为什么是<code>company</code>呢，因为配置文件中有这么一句话<code>&lt;table name=&quot;company&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2,dn3&quot;/&gt;</code>相关配置信息，可以查看下一篇文章。</p><blockquote><p>use TESTDB;<br>CREATE TABLE <code>company</code> (<code>id</code> INT (11) NOT NULL,<code>name</code> VARCHAR (100),<code>sharding_id</code> INT (11) NOT NULL,PRIMARY KEY (<code>id</code>));<br>看看创建这个表的时候执行了那些东西<br>explain CREATE TABLE <code>company</code> (<code>id</code> INT (11) NOT NULL,<code>name</code> VARCHAR (100),<code>sharding_id</code> INT (11) NOT NULL,PRIMARY KEY (<code>id</code>));</p></blockquote><p>如下：说明这个创建语句在三个数据库都执行了，因为company配置的是global，就是全局表。在mycat的中，全局表就是说有一些表，一般情况下变化不大，而且数据量不大，于是就在每个数据节点中维护这么一个表，方便后续的join查询。然后因为需要在所有的所有节点的都维护，所以创建的时候需要在每个节点上都创建这么一个表，同时更新的时候，也是几个表一起更新。但是查询的时候，默认只在其中之一的一个数据节点查询然后返回，不会去每个节点都查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| DATA_NODE | SQL                                                                                                                     |</span><br><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| dn1       | CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`)) |</span><br><span class="line">| dn2       | CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`)) |</span><br><span class="line">| dn3       | CREATE TABLE `company` (`id` INT (11) NOT NULL,`name` VARCHAR (100),`sharding_id` INT (11) NOT NULL,PRIMARY KEY (`id`)) |</span><br><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>不管怎么说，mycat到这里算是启动成功了，而且大概知道可能应该八成是这么用的</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka的安装和使用</title>
      <link href="/post/15271/"/>
      <url>/post/15271/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装启动kafka"><a href="#1、安装启动kafka" class="headerlink" title="1、安装启动kafka"></a><strong>1、安装启动kafka</strong></h2><p>kafka几乎是开箱即用的。<br>下载地址：<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p><p>根据需要，修改配置文件<code>server.properties</code><br>主要修改zookeeper的地址和logs地址，如果zookeeper在本地，则可以不做任何修改。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="attr">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="attr">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kafka-logs</span></span><br><span class="line"><span class="attr">num.partitions</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transaction.state.log.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transaction.state.log.min.isr</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="attr">log.segment.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="attr">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br><span class="line"><span class="attr">zookeeper.connection.timeout.ms</span>=<span class="string">6000</span></span><br><span class="line"><span class="attr">group.initial.rebalance.delay.ms</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><p>启动kafka：</p><blockquote><p>.&#x2F;bin&#x2F;kafka-server-start.sh .&#x2F;config&#x2F;server.properties</p></blockquote><p>后台运行kafka</p><blockquote><p>.&#x2F;bin&#x2F;kafka-server-start.sh .&#x2F;config&#x2F;server.properties 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>.&#x2F;bin&#x2F;kafka-server-start.sh .&#x2F;config&#x2F;server.properties &amp;<br>.&#x2F;bin&#x2F;kafka-server-start.sh -daemon .&#x2F;config&#x2F;server.properties </p></blockquote><h2 id="2、命令行"><a href="#2、命令行" class="headerlink" title="2、命令行"></a><strong>2、命令行</strong></h2><h3 id="主题信息"><a href="#主题信息" class="headerlink" title="主题信息"></a>主题信息</h3><p>列出topic</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181 –list</p></blockquote><p>创建topic</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic Demo1 [–if-not-exists]</p></blockquote><p>描述topic</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –describe –zookeeper localhost:2181 –topic Demo1</p></blockquote><p>修改topic</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –alter –zookeeper localhost:2181 –partitions 11 –topic Demo1</p></blockquote><p>删除topic</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –alter –zookeeper localhost:2181 –partitions 11 –topic Demo1</p></blockquote><p>控制台生产者</p><blockquote><p>.&#x2F;bin&#x2F;kafka-console-producer.sh –broker-list localhost:9092 –topic Demo1</p></blockquote><p>控制台消费者</p><blockquote><p>.&#x2F;bin&#x2F;kafka-console-consumer.sh –bootstrap-server localhost:9092 –from-beginning –topic Demo1</p></blockquote><p>增加分区</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181&#x2F;kafka –alter –topic topic-config –partitions 3 [–if-exists]</p></blockquote><p>列出集群中所有的主题</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181 –list</p></blockquote><p>列出集群中所有的主题和所有详细信息</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181 –describe</p></blockquote><p>列出集群中不同步副本的分区</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181 –describe –under-replicated-partitions</p></blockquote><p>列出集群中不可用的分区，即是无首领的分区</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –zookeeper localhost:2181 –describe –unavailable-partitions</p></blockquote><p>生产者和消费者同时启动着的时候，在producer上发送消息就会被consumer接收到。</p><h3 id="消费者信息："><a href="#消费者信息：" class="headerlink" title="消费者信息："></a>消费者信息：</h3><p>查看消费群组列表</p><blockquote><p>.&#x2F;bin&#x2F;kafka-consumer-groups.sh –bootstrap-server ip:9092 –list</p></blockquote><p>查看具体的某个消费群组的具体信息</p><blockquote><p>.&#x2F;bin&#x2F;kafka-consumer-groups.sh –bootstrap-server ip:9092 –descirbe –group group1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TOPIC               正在被读取的主题名</span><br><span class="line">PARTITION           正在被读取的分区ID</span><br><span class="line">CURRENT-OFFSET      消费者最近提交的偏移量，即是消费者在分区的偏移量</span><br><span class="line">LOG-END-OFFSET      当前高水位偏移量， 也就是最近一个被读取消息的偏移量，同时也是最近一个被提交到集群的偏移量</span><br><span class="line">LAG                 消费者的CURRENT-OFFSET和broker的LOG-END-OFFSET 之间的差距</span><br><span class="line">CONSUMER-ID         消费者ID</span><br><span class="line">HOST                消费者的ip地址</span><br><span class="line">CLIENT-ID           client-id</span><br></pre></td></tr></table></figure><h3 id="动态配置变更："><a href="#动态配置变更：" class="headerlink" title="动态配置变更："></a>动态配置变更：</h3><p>主题配置信息变更</p><blockquote><p>kafka-configs.sh –zookeeper localhost:2181 –alert –entity-type topics –entity-name <topic-name> –add-config <key>&#x3D;<value> [,key&#x3D;value…]</p></blockquote><p>其中<code>key</code> <code>value</code>可配置项如下：</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td>cleanup.policy</td><td>如果被设置为 compact,只有最新包含了指定key的消息会被保留下来(压缩日志),其他的被丢弃掉</td></tr><tr><td>compression.type</td><td>broker在将消息批次写入磁盘时所使用的压缩类型,日前支持“gzip”、“ snappy”和“lz4</td></tr><tr><td>delete.retention.ms</td><td>被标识为待删除的数据能够保留多久,以ms为单位。该参数只对压缩日志类型的主题有效</td></tr><tr><td>file.delete.delay.ms</td><td>从磁盘上删除日志片段和索引之前可以等待多长时间,以ms为单位</td></tr><tr><td>flush.messages</td><td>需要收到多少个消息才能将它们刷新到磁盘</td></tr><tr><td>flush.ms</td><td>在将消息刷新到磁盘之前可以等待多长时间,以ms为单位</td></tr><tr><td>inde.interval.by</td><td>日志片段的两个索引之间能够容纳的消息字节数</td></tr><tr><td>max.message.by</td><td>最大消息字节数</td></tr><tr><td>message.format.version</td><td>broker将消息写入磁盘时所使用的消息格式,必须是有效的AP版本号(比如“0.100”)</td></tr><tr><td>message.timestamp.difference.max.ms</td><td>消息自带的时间戳和 broker收到消息时的时间戳之间最大的差值,以ms为单位。该参数只在messsage. timestamp.type被设为 Create-time时有效</td></tr><tr><td>message.timestamp.type</td><td>在将消息写入磁盘时使用哪一种时间戳。目前支持两种值,其中CreateTime指客户端指定的时间戳,而 Log Append Time指消息被写入分区时的时间戳</td></tr><tr><td>min.cleanable.dirty.ratio</td><td>日志压缩器压缩分区的频率,使用未压缩日志片段数与总日志分段数之间的比例来表示。该参数只对压缩日志类型的主题有效</td></tr><tr><td>min.insync.replicas</td><td>可用分区的最少同步副本</td></tr><tr><td>preallocate</td><td>如果被设为true,需要为新的日志片段预分配空间</td></tr><tr><td>retention.bytes</td><td>主题能够保留的消息量,以字节为单位</td></tr><tr><td>retention.ms</td><td>主题需要保留消息多长时间,以ms为单位</td></tr><tr><td>egment.bytes</td><td>日志片段的消息字节数</td></tr><tr><td>segmentindex.bytes</td><td>单个日志片段的最大索引字节数</td></tr><tr><td>segment.jitter.ms</td><td>滚动日志片断时,在 segment.ns基础上增加的随机毫秒数日志片段多长时间滚动一次,以ms为单位</td></tr><tr><td>unclean.leader.election.enable</td><td>如果被设为true,不彻底的首领选择无效</td></tr></tbody></table><p>查看被覆盖的配置</p><blockquote><p>kafka-configs.sh –zookeeper localhost:2181 –alert –entity-type topics –entity-name <topic-name> </p></blockquote><p>移除被覆盖的配置</p><blockquote><p>kafka-configs.sh –zookeeper localhost:2181 –alert –entity-type topics –entity-name <topic-name> –delete-config retention.ms</p></blockquote><h3 id="解析日志文件："><a href="#解析日志文件：" class="headerlink" title="解析日志文件："></a>解析日志文件：</h3><p>解析日志文件</p><blockquote><p>.&#x2F;bin&#x2F;kafka-run-class.sh kafka.tools.DumpLogSegment –files 00000000000052368601.log</p></blockquote><p>解析日志文件，并打印数据内容</p><blockquote><p>.&#x2F;bin&#x2F;kafka-run-class.sh kafka.tools.DumpLogSegment –files 00000000000052368601.log –print-data-log</p></blockquote><p>解析索引文件</p><blockquote><p>.&#x2F;bin&#x2F;kafka-run-class.sh kafka.tools.DumpLogSegment –files 00000000000052368601.index</p></blockquote><p>解析索引文件，并检查无用索引</p><blockquote><p>.&#x2F;bin&#x2F;kafka-run-class.sh kafka.tools.DumpLogSegment –files 00000000000052368601.index –index-sanity-check</p></blockquote><p>解析索引文件，并检查索引匹配度，但是不打印所有的索引</p><blockquote><p>.&#x2F;bin&#x2F;kafka-run-class.sh kafka.tools.DumpLogSegment –files 00000000000052368601.index –verity-index-only</p></blockquote><h3 id="控制台生产者消费者"><a href="#控制台生产者消费者" class="headerlink" title="控制台生产者消费者"></a>控制台生产者消费者</h3><p>黑白名单</p><blockquote><p>kafka-console-consumer.sh –zookeeper localhost:2181 –whitelist 正则表达式<br>kafka-console-consumer.sh –zookeeper localhost:2181 –blacklist 正则表达式<br>kafka-console-consumer.sh –zookeeper localhost:2181 –topic <topic-name></p></blockquote><p>读取偏移量(表示我run不起来)</p><blockquote><p>kafka-console-consumer.sh –zookeeper localhost:2181 –topic __consumer_offsets –formatter ‘Kafka.coordinator.GroupMetadataManager$OffsetsMessageFormatter’ –max-messages 1</p></blockquote><h2 id="3、配置项详解"><a href="#3、配置项详解" class="headerlink" title="3、配置项详解"></a><strong>3、配置项详解</strong></h2><p>下面只是部分配置，并不是全部配置，kafka版本差异，配置的关键字有差别。但是其实很多时候都可以使用默认的配置的。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个broker的标识符，默认值为0，在集群中需要保证唯一性</span></span><br><span class="line"><span class="attr">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 监听的服务，建议是PLAINTEXT://your.host.name:9092，名字://ip:port  ############如果是阿里云，这里配置的是内网ip############</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://localhost:9092</span></span><br><span class="line"><span class="comment"># 推荐给生产者消费者监听的服务，如果未设置，则采用listener所设置的，如果均为设置，则抛出 java.net.InetAddress.getCanonicalHostName()异常，############如果是阿里云，这里配置的是外网ip############</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://your.host.name:9092</span></span><br><span class="line"><span class="comment"># 监听的安全协议，默认配置如下，详情见说明书</span></span><br><span class="line"><span class="comment">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span></span><br><span class="line"><span class="comment"># 收发请求时所使用到的网络线程数</span></span><br><span class="line"><span class="attr">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 处理请求时所使用到的线程数，包括IO时使用的线程数，与num.recovery.threads.per.data.dir和log.dirs有关</span></span><br><span class="line"><span class="attr">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 发送缓存区大小，默认10k</span></span><br><span class="line"><span class="attr">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 接受缓存区大小，默认10k</span></span><br><span class="line"><span class="attr">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment"># 接受的请求的最大值100M</span></span><br><span class="line"><span class="attr">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment"># 数据的路径，多路径使用逗号分隔，配置多个，则尽可能的把同一分区的数据保存在同一路径下</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">\logs</span></span><br><span class="line"><span class="comment"># 在恢复数据的时候，每个log.dirs所使用的线程数，增加这里的线程数可以增加并发操作，加快数据的恢复</span></span><br><span class="line"><span class="attr">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 新创建的topic包含的分数数量，默认是1</span></span><br><span class="line"><span class="attr">num.partitions</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">transaction.state.log.replication.factor</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">transaction.state.log.min.isr</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 把数据从缓存再到硬盘之前，所允许接收到的最大的消息数目</span></span><br><span class="line"><span class="comment">#log.flush.interval.messages=10000</span></span><br><span class="line"><span class="comment"># 把数据从缓存再到硬盘之前，所允许数据保留的时间</span></span><br><span class="line"><span class="comment">#log.flush.interval.ms=1000</span></span><br><span class="line"><span class="comment"># kafka数据保留的时间，默认是168，即一周,作用级别是日志级别</span></span><br><span class="line"><span class="attr">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment"># 每个分区数据的最大容量，默认是1G，作用级别是日志级别</span></span><br><span class="line"><span class="attr">log.retention.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment"># 日志片段大小，日志文件大小，log.dirs指向的日志，当日志大小达到配置值时，当前日志片段就会被关闭，一个新的日志片段就会被打开，默认是1G，一旦日志片段被关闭就还是等待过期</span></span><br><span class="line"><span class="attr">log.segment.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment"># 日志片段检查是否可以被删除的时间间隔</span></span><br><span class="line"><span class="attr">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment"># zookeeper地址，多zookeeper地址使用分号分隔，完整的格式为hostname:port/path，其中path可选，指的是集群的chroot地址，未指定默认使用根路径，不存在则在启动时自动创建</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br><span class="line"><span class="comment"># zookeeper连接的超时时间</span></span><br><span class="line"><span class="attr">zookeeper.connection.timeout.ms</span>=<span class="string">6000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">group.initial.rebalance.delay.ms</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 监听的端口号，使用1024以下的端口号需要root权限才能启动</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">9092</span></span><br><span class="line"><span class="comment"># 默认自动创建主题（生产者或者消费者读写数据的时候，如果主题不存在）默认是true</span></span><br><span class="line"><span class="attr">auto.create.topics.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 日志片段持续的时间，默认不配置，即不会根据时间开启新的日志片段</span></span><br><span class="line"><span class="attr">log.segment.hours</span> =<span class="string">168</span></span><br><span class="line"><span class="comment"># 当个消息压缩后的最大值，默认是1M</span></span><br><span class="line"><span class="attr">message.max.bytes</span>=<span class="string">1000000</span></span><br><span class="line"><span class="comment"># 主题级别的复制系数，默认为3，即复制的分区副本数量</span></span><br><span class="line"><span class="attr">default.replication.factor</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 不完全的首领选举，默认为true。当首领副本不可用，且所有的副本均不同步时，也从不同步的副本中选举首领。</span></span><br><span class="line"><span class="attr">unclean.leader.election</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 最少同步副本。只有消息被写入这么多个副本才能算是写入成功。</span></span><br><span class="line"><span class="attr">min.insync.replicas</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><h2 id="4、kafka伪集群搭建"><a href="#4、kafka伪集群搭建" class="headerlink" title="4、kafka伪集群搭建"></a><strong>4、kafka伪集群搭建</strong></h2><p>kafka集群的搭建和zookeeper集群的搭建没有关系。kafka集群可以使用单点的zookeeper，也可以使用集群的zookeeper。</p><h3 id="集群的搭建"><a href="#集群的搭建" class="headerlink" title="集群的搭建"></a>集群的搭建</h3><p>这里在一台linux服务器上搭建3台kafka集群为例：<br>第一台kafka配置文件(<code>server.properties</code>)，这里大部分使用的是默认的配置，可以参照上文中的含义，建议不要直接替换，而是将对应的配置项修改为对应的值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kafka集群中broker的唯一标识，多个broker需要不同的值</span></span><br><span class="line"><span class="attr">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 这里使用的是阿里云的服务器，这里配置为阿里云内网ip，如果在本机，可以直接使用127.0.0.1或者localhost</span></span><br><span class="line"><span class="comment"># 这里的配置项也可以拆分开host.name port等多个</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://内网ip:9092</span></span><br><span class="line"><span class="comment"># 这里使用的是阿里云的服务器，这里配置的是阿里云的公网IP，如果在本机，这里的配置项可以不配置。</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT:/外网ip:9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/my/kafka/kafka-logs</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br><span class="line"><span class="attr">default.replication.factor</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure><p>第二台(<code>server-1.properties</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://内网ip:9093</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://外网ip:9093</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/my/kafka/kafka-logs-1</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br><span class="line"><span class="attr">default.replication.factor</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure><p>第三台(<code>server-2.properties</code>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://内网ip:9094</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://外网ip:9094</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/my/kafka/kafka-logs-2</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br><span class="line"><span class="attr">default.replication.factor</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure><p>然后分别启动三台kafka的broker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-server-start.sh --daemon ./config/server.properties</span><br><span class="line">./bin/kafka-server-start.sh --daemon ./config/server-1.properties</span><br><span class="line">./bin/kafka-server-start.sh --daemon ./config/server-2.properties</span><br></pre></td></tr></table></figure><p>如果本机启动kafka的内存不足，可以修改<code>kafka-server-start.sh</code>中的配置项，会java的应该都看的懂，这里不介绍。</p><h3 id="检查集群是否搭建起来"><a href="#检查集群是否搭建起来" class="headerlink" title="检查集群是否搭建起来"></a>检查集群是否搭建起来</h3><p>方法一：在zookeeper上查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打开zookeeper的客户端</span><br><span class="line">./zkCli.sh</span><br><span class="line"># 查看brokers下启动了多少个节点</span><br><span class="line"># 得到结果[0,1,2]，分别为每个broker.id</span><br><span class="line">ls /brokers/ids</span><br><span class="line"># 查看brokers下有多少主题，得到的就是集群下所有的主题</span><br><span class="line">ls /brokers/topics</span><br></pre></td></tr></table></figure><p>方法二：使用kafka查看<br>按照我们现在启动kafka的配置，应该会给每个主题创建三个副本，所以我们创建一个主题来试试。<br>这里不适用<code>kafka-topics.sh</code>这个命令来创建主题，因为这么命令主题是要显式申明多少分区和副本的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用生产者创建主题，创建之后需要往主题里面写一点数据，要不然主题是不会创建的</span><br><span class="line">./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class="line"># 查看主题的信息，得到的结果</span><br><span class="line"># Topic:testPartitionCount:1ReplicationFactor:3 Configs:</span><br><span class="line">#Topic: testPartition: 0Leader: 0Replicas: [0,1,2]Isr: [0,1,2]</span><br><span class="line">./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</span><br><span class="line"># 也可以去对应的目录看是否有对应的文件夹存在(log.dirs)</span><br></pre></td></tr></table></figure><p>方法三：使用kafka监控平台进行查看（kafka-manager）</p><h2 id="5、分区副本的增删移动"><a href="#5、分区副本的增删移动" class="headerlink" title="5、分区副本的增删移动"></a><strong>5、分区副本的增删移动</strong></h2><p>kafka的分区暂时不支持分区的删除，删除分区会一并删除分区的数据，导致数据的不一致性</p><h3 id="增加分区"><a href="#增加分区" class="headerlink" title="增加分区"></a>增加分区</h3><blockquote><p> bin&#x2F;kafka-topics.sh –zookeeper localhost:2181&#x2F;kafka –alter –topic topic-config –partitions 3</p></blockquote><h3 id="副本的增删"><a href="#副本的增删" class="headerlink" title="副本的增删"></a>副本的增删</h3><p>创建文件<code>reassign.json</code>如下，下面文件表示对test这个主题的操作，同时这个主题有两个分区（partition），为0和1，json文件的含义为把test主题0分区的副本移动到1,2这两个节点上，把分区1的副本移动到3,4节点上，replicas的长度也表示副本的个数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;partitions&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;topic&quot;:&quot;test&quot;,</span><br><span class="line">            &quot;partiton&quot;:0,</span><br><span class="line">            &quot;replicas&quot;:[1,2]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;topic&quot;:&quot;test&quot;,</span><br><span class="line">            &quot;partiton&quot;:1,</span><br><span class="line">            &quot;replicas&quot;:[3,4]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行json文件</span><br><span class="line">kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file reassign.json --execute</span><br><span class="line"># 查看执行情况</span><br><span class="line">kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file reassign.json --verify</span><br></pre></td></tr></table></figure><p>被删除的分区在文件夹中对应过的目录会被命名为类似<code>test-154844454sadf5as4d511f5d4g1dfsg65fd4s-delete</code>，这个文件夹不会被立马删除，但是也会被很快删除，基本上只要保证数据一致性之后这个文件夹就会被删除。</p><h3 id="手动删除副本"><a href="#手动删除副本" class="headerlink" title="手动删除副本"></a><strong>手动删除副本</strong></h3><p>(1 ）关闭集群里所有的broker。</br><br>(2）删除Zookeeper 路径&#x2F;brokers&#x2F;topics&#x2F;ffOPICNAME ，注意要先删除节点下的子节点。</br><br>(3）删除每个broker 的分区目录，这些目录的名字可能是TOPICNAME-NUM ，其中NUM 是指分区的ID 。</br><br>(4）重启所有的broker 。</br></p><h2 id="6、消费者再均衡"><a href="#6、消费者再均衡" class="headerlink" title="6、消费者再均衡"></a><strong>6、消费者再均衡</strong></h2><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a><strong>触发条件</strong></h3><ul><li>消费者崩溃并确认死亡之后出发再均衡</li><li>消费者自杀，即消费者调用了close方法</li><li>新的消费者加入群组</li></ul><h3 id="7、记录offset"><a href="#7、记录offset" class="headerlink" title="7、记录offset"></a><strong>7、记录offset</strong></h3><p>消费者在消费数据的同时，往<code>__consumer_offsets-x</code>这个主题内写数据，记录每个分区的偏移量</p><h2 id="kafka主题删除"><a href="#kafka主题删除" class="headerlink" title="kafka主题删除"></a><strong>kafka主题删除</strong></h2><h3 id="删除某个主题"><a href="#删除某个主题" class="headerlink" title="删除某个主题"></a>删除某个主题</h3><p>配置文件中需要配置<code>delete.topic.enable=true</code>，默认为true</p><blockquote><p>.&#x2F;bin&#x2F;kafka-topics.sh –alter –zookeeper localhost:2181 –partitions 11 –topic 主题名</p></blockquote><h3 id="清空kafka"><a href="#清空kafka" class="headerlink" title="清空kafka"></a>清空kafka</h3><p>第一步：停用kafka<br>第二步：清空kafka数据目录下的所有文件（可在配置文件的<code>log.dirs</code>查看）<br>第三步：清空主题在zookeeper上的注册。(包括但不限于cluster,controller,brokers,admin,isr_change_notification,log_dir_event_notification,controller_epoch,conusumer,lastest_produce _id_block,config)</p><h2 id="8、监控平台-kafka-manager"><a href="#8、监控平台-kafka-manager" class="headerlink" title="8、监控平台 kafka-manager"></a><strong>8、监控平台 kafka-manager</strong></h2><p><code>kafka-manager</code>使用<code>scala</code>写的，相关的操作可以参考github<a href="https://github.com/yahoo/kafka-manager">https://github.com/yahoo/kafka-manager</a></p><p>首先需要安装<code>sbt</code></p><blockquote><p>curl <a href="https://bintray.com/sbt/rpm/rpm">https://bintray.com/sbt/rpm/rpm</a> &gt; bintray-sbt-rpm.repo<br>mv bintray-sbt-rpm.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;<br>yum install sbt</p></blockquote><p>然后从github上下载源码自己编译打包：</p><blockquote><p>git clone git:&#x2F;&#x2F;github.com&#x2F;yahoo&#x2F;kafka-manager.git<br>cd kafka-manager<br>sbt clean dist<br>cd target&#x2F;universal<br>unzip kafka-manager-1.3.3.21.zip<br>vim kafka-manager-1.3.0.4&#x2F;conf&#x2F;application.conf<br>替换<code>kafka-manager.zkhosts=$&#123;?ZK_HOSTS&#125;</code>zookeeper的路径</p></blockquote><p>启动<code>kafka-manager</code></p><blockquote><p>.&#x2F;bin&#x2F;kafka-manager<br>.&#x2F;bin&#x2F;kafka-manager -Dhttp.port&#x3D;8888<br>nohup .&#x2F;bin&#x2F;kafka-manager &amp;</p></blockquote><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><strong>Tips</strong></h2><h3 id="额"><a href="#额" class="headerlink" title="额"></a>额</h3><p>1、一个主题可以包含多个分区，kafka无法保证整个主题的顺序，但是可以保证分区的顺序。</br><br>2、对主题的键生成散列值，由散列值计算消息对应的分区。</br><br>3、每个分区只能被一个消费者消费。</br><br>4、一个独立的kafka服务器被称之为broker，单个broker可以轻松处理数千个分区以及每秒百万级的消息量。</br><br>5、集群中，不同broker的相同主题的多个分区中，会有一个分区被选举出来，成为分区的首领。此处涉及到分区赋值。</br><br>6、kafka可以保留数据一段时间，或者指定大小的消息。可以配置消息淘汰算法。</br><br>7、kafka希望有自己的zookeeper，因为kafka对zookeeper的延迟和超时教敏感</br><br>8、Java中kafkaProduer的默认是自动重试的，重试很多次之后才会抛异常。</br><br>9、kafka的键可以指定消息到主题的哪个分区，意味着同一个键的消息可以保存在同一个分区。根据键散列值指定分区，由此可定，分区数目是不可以改变的，扩展性不好</br><br>10、最安全退出consumer的方法是调用<code>consumer.wakeup();</code>方法</br><br>11、kafka使用zookeeper的临时节点来选举控制器，并在节点加入集群或者退出集群的时候通知控制器。控制器负责在节点加入或者退出时进行分区首领的选举</br></p><h3 id="额额"><a href="#额额" class="headerlink" title="额额"></a>额额</h3><p>元数据请求：元数据缓存，每个broker上都存储这个主题对应的分区，即对应的分区的分区首领。每次请求之前都会经过这个元数据缓存，从而知道消息应该从哪个分区写入或者消费。从而避免了在分区副本上进行操作。</br><br>零复制技术，直接从文件缓存中把消息发送出去，kafka本身并没有对消息进行这个层明的缓存。<br>未被复制到分区副本的消息是不会被消费者读取的，只有完成了副本的备份，消费者消费才能获取到数据。</br><br>分区的复制和数据的存储———《kafka权威指南》P81<br>彻底清除一个键：给broker发送一个包含改键且值为null的消息，清理线程便会清理掉该键</p>]]></content>
      
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disconf稍微高级应用</title>
      <link href="/post/33434/"/>
      <url>/post/33434/</url>
      
        <content type="html"><![CDATA[<p>本文中所有的笔记均是参考disconf官方文档（<a href="https://disconf.readthedocs.io/zh_CN/latest/tutorial-client/index.html">https://disconf.readthedocs.io/zh_CN&#x2F;latest&#x2F;tutorial-client&#x2F;index.html</a>，加上个人的一些想法得出。（偷偷的说，官方文档错误的东西太多了。。。）</p><h2 id="1、配置项加载"><a href="#1、配置项加载" class="headerlink" title="1、配置项加载"></a><strong>1、配置项加载</strong></h2><p>配置项的使用配置文件的使用方法基本上是相同的，在配置文件的基础上修改就行了。因为配置项没有对应的配置文件，所以spring的配置文件不用修改。</p><p>在<code>disconf-web</code>中添加一个为<code>discountRate</code>的配置项，然后数值为数字</p><p><img src="https://img.ncfl.tech/202304292217635.png"></p><p>添加对应的disconf映射类，注意放在扫描包的类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coefficients</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;discountRate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double discount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisconfItem(key = KEY)</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getDiscount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> discount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDiscount</span><span class="params">(Double discount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话启动服务并可以把disconf的这个配置项的值注入到<code>discount</code>这个属性中。</p><h2 id="2、自动加载"><a href="#2、自动加载" class="headerlink" title="2、自动加载"></a><strong>2、自动加载</strong></h2><p>采用下面的配置，即是在初级使用中应用到的配置。在<code>disconf-web</code>上修改配置信息的时候，本地程序只要启动了，便会自动拉取最新的配置文件，而且实时的，改完本地立马生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用disconf必须添加以下配置 配置更改会自动reload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.DisconfMgrBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scanPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.XX&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.DisconfMgrBeanSecond&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/test.json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreResourceNotFound&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertiesArray&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;configproperties_disconf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种配置情况，官方文档上说有这些好处：</p><ul><li>优点：<ul><li>支持任意类型的配置文件</li><li>对于.properties配置文件，配置更新时，自动注入reload</li><li>无代码侵入</li><li>适合于旧项目的迁移</li></ul></li><li>缺点：<ul><li>需要在xml定义 java bean</li><li>非.properties配置更新时无法自动注入java bean里，你可以写回调函数来支持自动注入。</li></ul></li></ul><p>优缺点这里我自己补充一点，首先这种方式减少了代码的注入，直接更新配置文件即可，不用自己写逻辑或者重启服务来更新配置，但是这种配置方式也有不好的地方，假设redis1挂了，想通过修改配置文件转移到redis2中，但是由于disconf值更新文件，并不能完成上述的功能，还是只能重启服务（当然这个例子不好吗，毕竟redis一般是集群）。</p><p>官方文档上说这种配置的自动reload智能是properties文件，但是经过测试，json文件和配置项同样可以生效。</p><h2 id="3、回调函数"><a href="#3、回调函数" class="headerlink" title="3、回调函数"></a><strong>3、回调函数</strong></h2><p>上面说到的是自动加载配置文件，如采用下面的配置方法，并不会自动加载配置文件，不同点在于<code>PropertyPlaceholderConfigurer</code>这个类，一个是采用百度自己写的的，一个是采用spring框架的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用托管方式的disconf配置(无代码侵入, 配置更改不会自动reload)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreResourceNotFound&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertiesArray&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;configproperties_no_reloadable_disconf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果采用这种配置方法的话，便需要些回调函数，来手动加载配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DisconfUpdateService(classes = &#123;JedisConfig.class&#125;, itemKeys = &#123;Coefficients.KEY&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisServiceUpdateCallback</span> <span class="keyword">implements</span> <span class="title class_">IDisconfUpdate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SimpleRedisServiceUpdateCallback.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisConfig jedisConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Coefficients coefficients;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reload</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;disconf file change.host change:&#123;&#125;, port change:&#123;&#125;&quot;</span>, jedisConfig.getHost(), jedisConfig.getPort());</span><br><span class="line">        logger.info(<span class="string">&quot;disconf item change.&#123;&#125;&quot;</span>, coefficients.getDiscount());</span><br><span class="line">        logger.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>classes = &#123;JedisConfig.class&#125;</code>中的是配置文件映射的类，<code>itemKeys = &#123;Coefficients.KEY&#125;</code>中的是配置项映射的类。这样配置之后，<code>disconf-web</code>上的配置修改之后，便会执行reload中的方法，在这里便可以进行一些操作，完成前一种方式中无法做到的事情。</p><h2 id="4、conclusion"><a href="#4、conclusion" class="headerlink" title="4、conclusion"></a><strong>4、conclusion</strong></h2><p>额，个人是建议两种配置方式一起使用，但是还是主要看业务场景有没有需要。<br>然后还有一些更高级的应用，比如下载器agent，与jenkins结合（其实最主要是jenkins没有装。。。。）等更高级的应用，感觉暂时用不到，学了也会忘，就没有继续认真看了，等有需要的时候在回来看看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> disconf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disconf初级使用</title>
      <link href="/post/11902/"/>
      <url>/post/11902/</url>
      
        <content type="html"><![CDATA[<p>主要的流程还是按照dsiconf官方文档来的（<a href="https://disconf.readthedocs.io/zh_CN/latest/tutorial-client/src/Tutorial1.html#">https://disconf.readthedocs.io/zh_CN&#x2F;latest&#x2F;tutorial-client&#x2F;src&#x2F;Tutorial1.html#</a>），但是上面很多东西都没有讲清楚，这里的以redis的配置文件为例来使用disconf：</p><h2 id="1、创建disconf远程配置"><a href="#1、创建disconf远程配置" class="headerlink" title="1、创建disconf远程配置"></a><strong>1、创建disconf远程配置</strong></h2><p>新建一个APP，在APP下新建一个配置文件：<br><img src="https://img.catqu.com/images/2018/10/27/bd3adcb5d631758443ccc7c9e7287980.png"></p><p><img src="https://img.catqu.com/images/2018/10/27/68625be0837725e2cd1c5dd3fa3b9614.png"></p><h2 id="redisConfig-java"><a href="#redisConfig-java" class="headerlink" title="redisConfig.java"></a><strong>redisConfig.java</strong></h2><p>这里就是直接把这个类交给disconf来管理，disconf在从远程拉取文件之后，便会把文件中的内容直接注入到对应的字段中。到时候需要的时候只需从中取值就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baidu.disconf.client.common.annotations.DisconfFile;</span><br><span class="line"><span class="keyword">import</span> com.baidu.disconf.client.common.annotations.DisconfFileItem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DisconfFile(filename = &quot;redis.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisconfFileItem(name = &quot;redis.host&quot;, associateField = &quot;host&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisconfFileItem(name = &quot;redis.port&quot;, associateField = &quot;port&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、pom-xml"><a href="#3、pom-xml" class="headerlink" title="3、pom.xml"></a><strong>3、pom.xml</strong></h2><p>pom文件中需要添加disconf所需要的相关包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.disconf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disconf-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为本次使用到了redis，所以需要引入redis的相关包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、disconf-properties"><a href="#4、disconf-properties" class="headerlink" title="4、disconf.properties"></a><strong>4、disconf.properties</strong></h2><p>这里的前缀<code>disconf.</code>可有可无，并不影响使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 是否使用远程配置文件</span><br><span class="line"># true(默认)会从远程获取配置 false则直接获取本地配置</span><br><span class="line">disconf.enable.remote.conf=true</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 配置服务器的 HOST,用逗号分隔  127.0.0.1:8000,127.0.0.1:8000</span><br><span class="line">#</span><br><span class="line">disconf.conf_server_host=XX.XX.XX.XX:8081</span><br><span class="line"></span><br><span class="line"># 版本, 请采用 X_X_X_X 格式</span><br><span class="line">disconf.version=1_0_0</span><br><span class="line"></span><br><span class="line"># APP 请采用 产品线_服务名 格式</span><br><span class="line">disconf.app=Test</span><br><span class="line"></span><br><span class="line"># 环境</span><br><span class="line">disconf.env=rd</span><br><span class="line"></span><br><span class="line"># debug</span><br><span class="line">disconf.debug=true</span><br><span class="line"></span><br><span class="line"># 忽略哪些分布式配置，用逗号分隔</span><br><span class="line">disconf.ignore=</span><br><span class="line"></span><br><span class="line"># 获取远程配置 重试次数，默认是3次</span><br><span class="line">disconf.conf_server_url_retry_times=3</span><br><span class="line"># 获取远程配置 重试时休眠时间，默认是5秒</span><br><span class="line">disconf.conf_server_url_retry_sleep_seconds=0</span><br><span class="line"></span><br><span class="line"># 用户自定义的下载路径</span><br><span class="line"># disconf.user_define_download_dir=./config</span><br></pre></td></tr></table></figure><h3 id="这里说一下我遇到的坑："><a href="#这里说一下我遇到的坑：" class="headerlink" title="这里说一下我遇到的坑："></a>这里说一下我遇到的坑：</h3><p>1、disconf.properties 需要存在在资源文件resources的根目录，即是<code>src\main\resources\disconf.properties</code>这个目录，要不然启动的时候项目汇报找不到<code>conf_server_host</code>的错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: settings: disconf.conf_server_host cannot find</span><br><span class="line">at com.baidu.disconf.client.config.inner.DisInnerConfigHelper.verifyUserConfig(DisInnerConfigHelper.java:44)</span><br><span class="line">at com.baidu.disconf.client.config.ConfigMgr.init(ConfigMgr.java:43)</span><br><span class="line">at com.baidu.disconf.client.DisconfMgr.firstScan(DisconfMgr.java:83)</span><br><span class="line">at com.baidu.disconf.client.DisconfMgrBean.postProcessBeanDefinitionRegistry(DisconfMgrBean.java:75)</span><br><span class="line">at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:272)</span><br><span class="line">at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:92)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93)</span><br><span class="line">at com.alibaba.dubbo.container.spring.SpringContainer.start(SpringContainer.java:50)</span><br><span class="line">at com.alibaba.dubbo.container.Main.main(Main.java:80)</span><br><span class="line">at com.sf.DemoProvider.main(DemoProvider.java:7)</span><br></pre></td></tr></table></figure><p>2、disconf.conf_server_host&#x3D;XX.XX.XX.XX:8081 这里的配置对应的端口既可以是tomcat的端口，也可以是nginx的端口，只要对应的端口没有被防火墙等东西拦截。因为二者都获取到disconf的文件，可以去查看tomcat的启动日志，可以看到disconf这个服务有对应的这些端口，然后项目中也是根据这些端口的来获取配置文件等东西的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">2018-10-26 11:18:31,396 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/account/signin],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.auth.UserController.signin(com.baidu.disconf.web.service.sign.form.SigninForm,javax.servlet.http.HttpServletRequest)</span><br><span class="line">2018-10-26 11:18:31,399 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/account/signout],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.auth.UserController.signout(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2018-10-26 11:18:31,400 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/account/password],methods=[PUT]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.auth.UserController.password(com.baidu.disconf.web.service.user.form.PasswordModifyForm,javax.servlet.http.HttpServletRequest)</span><br><span class="line">2018-10-26 11:18:31,402 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/account/session],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.auth.UserController.get()</span><br><span class="line">2018-10-26 11:18:31,416 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/&#123;configId&#125;],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigReadController.getConfig(long)</span><br><span class="line">2018-10-26 11:18:31,418 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigReadController.getConfigList(com.baidu.disconf.web.service.config.form.ConfListForm)</span><br><span class="line">2018-10-26 11:18:31,420 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/versionlist],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigReadController.getVersionList(com.baidu.disconf.web.service.config.form.VersionListForm)</span><br><span class="line">2018-10-26 11:18:31,420 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/simple/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigReadController.getSimpleConfigList(com.baidu.disconf.web.service.config.form.ConfListForm)</span><br><span class="line">2018-10-26 11:18:31,422 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/zk/&#123;configId&#125;],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigReadController.getZkInfo(long)</span><br><span class="line">2018-10-26 11:18:31,423 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/download/&#123;configId&#125;],methods=[GET]&#125;&quot; onto public org.springframework.http.HttpEntity&lt;byte[]&gt; com.baidu.disconf.web.web.config.controller.ConfigReadController.downloadDspBill(long)</span><br><span class="line">2018-10-26 11:18:31,425 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/downloadfilebatch],methods=[GET]&#125;&quot; onto public org.springframework.http.HttpEntity&lt;byte[]&gt; com.baidu.disconf.web.web.config.controller.ConfigReadController.download2(com.baidu.disconf.web.service.config.form.ConfListForm)</span><br><span class="line">2018-10-26 11:18:31,435 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/file],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigNewController.updateFile(com.baidu.disconf.web.service.config.form.ConfNewForm,org.springframework.web.multipart.MultipartFile)</span><br><span class="line">2018-10-26 11:18:31,436 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/filetext],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigNewController.updateFileWithText(com.baidu.disconf.web.service.config.form.ConfNewForm,java.lang.String,java.lang.String)</span><br><span class="line">2018-10-26 11:18:31,436 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/item],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigNewController.newItem(com.baidu.disconf.web.service.config.form.ConfNewItemForm)</span><br><span class="line">2018-10-26 11:18:31,444 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/item/&#123;configId&#125;],methods=[PUT]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigUpdateController.updateItem(long,java.lang.String)</span><br><span class="line">2018-10-26 11:18:31,454 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/file/&#123;configId&#125;],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigUpdateController.updateFile(long,org.springframework.web.multipart.MultipartFile)</span><br><span class="line">2018-10-26 11:18:31,454 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/filetext/&#123;configId&#125;],methods=[PUT]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigUpdateController.updateFileWithText(long,java.lang.String)</span><br><span class="line">2018-10-26 11:18:31,455 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/web/config/&#123;configId&#125;],methods=[DELETE]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigUpdateController.delete(long)</span><br><span class="line">2018-10-26 11:18:31,465 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/config/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigFetcherController.getList(com.baidu.disconf.web.service.config.form.ConfForm)</span><br><span class="line">2018-10-26 11:18:31,466 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/config/simple/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.config.controller.ConfigFetcherController.getSimpleList(com.baidu.disconf.web.service.config.form.ConfForm)</span><br><span class="line">2018-10-26 11:18:31,466 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/config/item],methods=[GET]&#125;&quot; onto public com.baidu.disconf.core.common.json.ValueVo com.baidu.disconf.web.web.config.controller.ConfigFetcherController.getItem(com.baidu.disconf.web.service.config.form.ConfForm)</span><br><span class="line">2018-10-26 11:18:31,468 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/config/file],methods=[GET]&#125;&quot; onto public org.springframework.http.HttpEntity&lt;byte[]&gt; com.baidu.disconf.web.web.config.controller.ConfigFetcherController.getFile(com.baidu.disconf.web.service.config.form.ConfForm)</span><br><span class="line">2018-10-26 11:18:31,469 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/env/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.env.controller.EnvController.list()</span><br><span class="line">2018-10-26 11:18:31,473 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/app/list],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.app.controller.AppController.list()</span><br><span class="line">2018-10-26 11:18:31,474 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/app],methods=[POST]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.app.controller.AppController.create(com.baidu.disconf.web.service.app.form.AppNewForm)</span><br><span class="line">2018-10-26 11:18:31,479 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/zoo/hosts],methods=[GET]&#125;&quot; onto public com.baidu.disconf.core.common.json.ValueVo com.baidu.disconf.web.web.zookeeper.controller.ZooController.getHosts()</span><br><span class="line">2018-10-26 11:18:31,480 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/zoo/prefix],methods=[GET]&#125;&quot; onto public com.baidu.disconf.core.common.json.ValueVo com.baidu.disconf.web.web.zookeeper.controller.ZooController.getPrefixUrl()</span><br><span class="line">2018-10-26 11:18:31,481 [localhost-startStop-1] INFO  annotation.RequestMappingHandlerMapping (AbstractHandlerMethodMapping.java:217)     - Mapped &quot;&#123;[/api/zoo/zkdeploy],methods=[GET]&#125;&quot; onto public com.baidu.dsp.common.vo.JsonObjectBase com.baidu.disconf.web.web.zookeeper.controller.ZooController.getZkDeployInfo(com.baidu.disconf.web.service.zookeeper.form.ZkDeployForm)</span><br></pre></td></tr></table></figure><p>3、重试次数配置：disconf.conf_server_url_retry_times&#x3D;3 这个配置项不能为0，如果为0的话项目启动会报下面的错误，这个问题我找了超级久：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[ERROR][2018-10-27 20:28:24 131][com.baidu.disconf.client.watch.WatchFactory]-[cannot get watch module]</span><br><span class="line">java.lang.Exception: cannot get: RemoteUrl [url=/api/zoo/hosts, serverList=[XX.XX.XX.XX:8081], urls=[http://XX.XX.XX.XX:8081/api/zoo/hosts]]</span><br><span class="line">at com.baidu.disconf.core.common.restful.impl.RestfulMgrImpl.getJsonData(RestfulMgrImpl.java:75)</span><br><span class="line">at com.baidu.disconf.client.fetcher.impl.FetcherMgrImpl.getValueFromServer(FetcherMgrImpl.java:76)</span><br><span class="line">at com.baidu.disconf.client.watch.WatchFactory.getWatchMgr(WatchFactory.java:43)</span><br><span class="line">at com.baidu.disconf.client.core.DisconfCoreFactory.getDisconfCoreMgr(DisconfCoreFactory.java:32)</span><br><span class="line">at com.baidu.disconf.client.DisconfMgr.firstScan(DisconfMgr.java:97)</span><br><span class="line">at com.baidu.disconf.client.DisconfMgrBean.postProcessBeanDefinitionRegistry(DisconfMgrBean.java:75)</span><br><span class="line">at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:272)</span><br><span class="line">at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:92)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93)</span><br><span class="line">at com.alibaba.dubbo.container.spring.SpringContainer.start(SpringContainer.java:50)</span><br><span class="line">at com.alibaba.dubbo.container.Main.main(Main.java:80)</span><br><span class="line">at com.sf.DemoProvider.main(DemoProvider.java:7)</span><br></pre></td></tr></table></figure><p>但是这里有一个自己的疑问：为什么不用用户名密码认证，这样的话，真的安全吗？待我后续看一下。</p><h2 id="5、spring配置文件"><a href="#5、spring配置文件" class="headerlink" title="5、spring配置文件"></a><strong>5、spring配置文件</strong></h2><p>在spring的配置文件中添加下面的东西，注意一个配置项都不能少，少一个都run不起来：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用disconf必须添加以下配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.DisconfMgrBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scanPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.XX&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.DisconfMgrBeanSecond&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreResourceNotFound&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertiesArray&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;configproperties_disconf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后启动项目，便可以看到项目从远程的disconf上把刚刚添加的redis.properties文件拉取下来的，长下面这样：</p><p><img src="https://img.catqu.com/images/2018/10/27/e1cf51274a2ee01f6d2872fc25ea2ae7.png"></p><p>然后也把配置项中相关属性的值注入到刚刚<code>redisConfig.java</code>的属性中。disconf的官方文档是使用下面的方面来表明属性已经注入了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisService</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SimpleRedisService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分布式配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisConfig jedisConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(jedisConfig.getHost(), jedisConfig.getPort());</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, jedis);</span><br><span class="line">        jedis.set(<span class="string">&quot;kaishi&quot;</span>, <span class="string">&quot;jiehsu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> disconf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disconf安装笔记</title>
      <link href="/post/53214/"/>
      <url>/post/53214/</url>
      
        <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><strong>1、概述</strong></h2><p>首先：我这里安装的是disconf    ，界面好像和之前见到的不是很一样（不过我也没有安装过之前的版本）。</p><p>主界面如下：<br><img src="https://img.ncfl.tech/202304292213706.png"></p><p>然后登陆之后的界面长这样，环境(local、rd、qa、online)依次（本地、开发、测试、生产）。（反正和我见到的不是很一样，不知道之前看过的是被定制化了还是老版本就是长那样的）<br><img src="https://img.ncfl.tech/202304292214189.png"></p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a><strong>2、安装</strong></h2><p>这里的安装教程主要是参考<a href="https://disconf.readthedocs.io/zh_CN/latest/install/src/02.html">https://disconf.readthedocs.io/zh_CN&#x2F;latest&#x2F;install&#x2F;src&#x2F;02.html</a>这个网站的，这个网站应该算是disconf的官方文档的，但是好像更新不是很经常，有不少错误。然后之所以要做一下笔记，主要是有一些东西和官方给的不一样，而且官方觉得我是天才，其实我啥也不懂，所以很多东西需要自己去搞定的。</p><h3 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h3><p>在安装disconf之前需要实现准备安装一些东西，如下：</p><ul><li>zookeeper</li><li>redis</li><li>nginx</li><li>mysql</li><li>tomcat</li><li>maven</li><li>git</li></ul><p>鉴于这些东西安装比较简单，可以自行安装。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>创建三个目录分别用于存放配置文件、源码、war（当然也可以不创建，到时候编译打包之前指定好路径就行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir resource</span><br><span class="line">mkdir src</span><br><span class="line">mkdir war</span><br></pre></td></tr></table></figure><br/>从github上把disconf源码拉下来，这里的方式就很多了，可以用`git clone`，也可以下载到本地然后上传到linux，随意都可以。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">git clone https://github.com/knightliao/disconf.git</span><br></pre></td></tr></table></figure><br/>迁移配置文件，把源代码中`/disconf-web/profile/rd/`路径下的所有文件复制到刚刚创建的`resource`文件夹中，并重命名`application-demo.properties`为`application.properties`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r src/disconf/disconf-web/profile/rd/ resource/</span><br><span class="line">cd resource</span><br><span class="line">mv application-demo.properties application.properties</span><br></pre></td></tr></table></figure>修改之后目录下应该有这些文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root  419 Oct 17 18:15 application.properties  </span><br><span class="line">-rw-r--r-- 1 root root   93 Oct 17 18:18 dump.rdb   </span><br><span class="line">-rw-r--r-- 1 root root  369 Oct 17 18:17 jdbc-mysql.properties  </span><br><span class="line">-rw-r--r-- 1 root root  764 Oct 17 18:15 log4j.properties      </span><br><span class="line">-rw-r--r-- 1 root root 2229 Oct 17 18:15 logback.xml        </span><br><span class="line">-rw-r--r-- 1 root root  499 Oct 17 18:20 redis-config.properties </span><br><span class="line">-rw-r--r-- 1 root root  101 Oct 17 18:21 zoo.properties    </span><br></pre></td></tr></table></figure><br/>#### 修改对应的配置文件：<p>个人建议，所有涉及到的IP最好都写成IP，不要写成<code>127.0.0.1</code>或者<code>localhost</code></br><br><code>applocation.properties</code>文件长这样，可以根据需要进行修改，反正也应该都看得懂：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#                                      </span><br><span class="line"># \u670d\u52a1\u5668\u7684domain          </span><br><span class="line">#                                                                                                            </span><br><span class="line">domain=disconf.com                                                                                                                  </span><br><span class="line">#                               </span><br><span class="line"># \u90ae\u7bb1\u8bbe\u7f6e         </span><br><span class="line">#                                                                                                  </span><br><span class="line">EMAIL_MONITOR_ON = true      </span><br><span class="line">EMAIL_HOST = smtp.163.com      </span><br><span class="line">EMAIL_HOST_PASSWORD = password   </span><br><span class="line">EMAIL_HOST_USER = sender@163.com   </span><br><span class="line">EMAIL_PORT = 25                     </span><br><span class="line">DEFAULT_FROM_EMAIL = disconf@163.com   </span><br><span class="line"></span><br><span class="line">#                       </span><br><span class="line"># \u5b9a\u65f6\u6821\u9a8c\u4e2d\u5fc3\u7684\u914d\u7f6e\u4e0e\u6240\u6709\u5ba2\u6237\u7aef\u914d\u7f6e\u7684\u4e00\u81f4\u6027     </span><br><span class="line">#    </span><br><span class="line">CHECK_CONSISTENCY_ON= true      </span><br></pre></td></tr></table></figure><p><code>jdbc-mysql.properties</code>长这样，对应修改一下mysql的数据IP，端口，用户名，密码即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver                       </span><br><span class="line">jdbc.db_0.url=jdbc:mysql://XX.XX.XX.XX:3306/disconf?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;rewriteBatchedStatements=false    </span><br><span class="line">jdbc.db_0.username=root                        </span><br><span class="line">jdbc.db_0.password=XXXXX                  </span><br><span class="line">jdbc.maxPoolSize=20                 </span><br><span class="line">jdbc.minPoolSize=10                 </span><br><span class="line">jdbc.initialPoolSize=10             </span><br><span class="line">jdbc.idleConnectionTestPeriod=1200   </span><br><span class="line">jdbc.maxIdleTime=3600</span><br></pre></td></tr></table></figure><p><code>redis-config.properties</code>这个文件长这样，如果是redis集群，则可配置多个redis，如果只有一个redis，也需要配置两个，两个配置成一样的即可，若只配置一个，则会报错。我安装的redis没有设置密码，故没有改动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">redis.group1.retry.times=2     </span><br><span class="line"></span><br><span class="line">redis.group1.client1.name=BeidouRedis1 </span><br><span class="line">redis.group1.client1.host=XX.XX.XX.XX   </span><br><span class="line">redis.group1.client1.port=6379         </span><br><span class="line">redis.group1.client1.timeout=5000      </span><br><span class="line">redis.group1.client1.password=foobared</span><br><span class="line"></span><br><span class="line">redis.group1.client2.name=BeidouRedis2    </span><br><span class="line">redis.group1.client2.host=XX.XX.XX.XX     </span><br><span class="line">redis.group1.client2.port=6379         </span><br><span class="line">redis.group1.client2.timeout=5000     </span><br><span class="line">redis.group1.client2.password=foobared   </span><br><span class="line"></span><br><span class="line">redis.evictor.delayCheckSeconds=300     </span><br><span class="line">redis.evictor.checkPeriodSeconds=30    </span><br><span class="line">redis.evictor.failedTimesToBeTickOut=6     </span><br></pre></td></tr></table></figure><p><code>zoo.properties</code>长这样，修改一些zookeeper对应的IP和端口即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hosts=XX.XX.XX.XX:2181                </span><br><span class="line"># zookeeper\u7684\u524D\u7F00\u8DEF\u5F84\u540D  </span><br><span class="line">zookeeper_url_prefix=/disconf</span><br></pre></td></tr></table></figure><br/>#### 修改环境变量：在`/etc/profile`中添加下面的东西，对应的disconf的路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ONLINE_CONFIG_PATH=/X..X/disconf/resource  </span><br><span class="line">export WAR_ROOT_PATH=/X..X/disconf/war </span><br></pre></td></tr></table></figure>如果linux上的java环境是jdk1.8及其以上，需要修改`src/disconf/disconf-web`下的`pom.xml`文件，在`<profiles>...</profiles>`标签中添加下面的东西，注意把`<version>2.9</version>`加上，之前没有加上版本号，无法正常编译项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;doclint-java8-disable&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;jdk&gt;[1.8,)&lt;/jdk&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9&lt;/version&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">&lt;id&gt;attach-javadocs&lt;/id&gt;</span><br><span class="line">&lt;goals&gt;</span><br><span class="line">&lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">&lt;/goals&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/execution&gt;</span><br><span class="line">&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure><br/>#### 构建项目：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src/disconf/disconf-web</span><br><span class="line">sh deploy/deploy.sh</span><br></pre></td></tr></table></figure>必须在`disconf-web`根目录下运行，否则会报下面的错误：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**********************************************    </span><br><span class="line">copy online config  /my/disconf/resource          </span><br><span class="line">**********************************************     </span><br><span class="line">Removing src/main/online-resources/*               </span><br><span class="line">**********************************************    </span><br><span class="line">It&#x27;s going to Generate the output for war        </span><br><span class="line">**********************************************    </span><br><span class="line">**********************************************    </span><br><span class="line">It&#x27;s going to got war package                    </span><br><span class="line">**********************************************     </span><br><span class="line">sh: deploy/build_java.sh: No such file or directory     </span><br></pre></td></tr></table></figure><br/>至此，disconf的安装算是完成的差不多了，可以看到在`war`文件中出现了下面这些文件和文件夹：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root      419 Oct 17 18:15 application.properties   </span><br><span class="line">-rw-r--r-- 1 root root 37042181 Oct 18 23:42 disconf-web.war         </span><br><span class="line">-rw-r--r-- 1 root root       93 Oct 17 18:18 dump.rdb </span><br><span class="line">drwxr-xr-x 4 root root     4096 Oct 18 22:52 html     </span><br><span class="line">-rw-r--r-- 1 root root      369 Oct 17 18:17 jdbc-mysql.properties   </span><br><span class="line">-rw-r--r-- 1 root root      186 Oct 17 18:12 jpaas_control    </span><br><span class="line">-rw-r--r-- 1 root root      764 Oct 17 18:15 log4j.properties  </span><br><span class="line">-rw-r--r-- 1 root root     2229 Oct 17 18:15 logback.xml    </span><br><span class="line">drwxr-xr-x 3 root root     4096 Oct 18 22:52 META-INF    </span><br><span class="line">-rw-r--r-- 1 root root      499 Oct 17 18:20 redis-config.properties  </span><br><span class="line">-rw-r--r-- 1 root root       49 Oct 17 18:12 Release        </span><br><span class="line">drwxr-x--- 2 root root     4096 Oct 19 00:10 tmp      </span><br><span class="line">drwxr-xr-x 4 root root     4096 Oct 18 22:51 WEB-INF    </span><br><span class="line">-rw-r--r-- 1 root root      101 Oct 17 18:21 zoo.properties      </span><br></pre></td></tr></table></figure>### 初始化数据库进入到`src/disconf/disconf-web/sql`路径下，按照`readme.md`中的指引，初始化数据库，对应的sql文件在同级目录下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了方便大家开发，统一了所有SQL，请先后执行：       </span><br><span class="line"></span><br><span class="line">- 0-init_table.sql        create db,tables   </span><br><span class="line">- 1-init_data.sql         create data      </span><br><span class="line">- 201512/20151225.sql     patch          </span><br><span class="line">- 20160701/20160701.sql   patch </span><br></pre></td></tr></table></figure>### 其他配置#### tomcat配置进入到已安装好的tomcat的目录下，找到`server.xml`文件，在`<Host>...</Host>`中添加里面内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=&quot;&quot; docBase=&quot;/XX..XX/disconf-rd/war&quot;&gt;&lt;/Context&gt;</span><br></pre></td></tr></table></figure>#### nginx配置找到已安装好的nginx目录，在`nginx.conf`中添加下面内容（这里的 host 设置成 disconf.com （可以自定义），但它 必须与 application.properties 里的domain一样。）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">upstream disconf &#123;</span><br><span class="line">    server 127.0.0.1:8080;                      #Tomcat的IP和端口号</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   8081;                              #nginx监听的端口号</span><br><span class="line">    server_name disconf.com;                    #可自行定义，但必须与application.properties中的domain属性的值一样</span><br><span class="line">    access_log /XX..XX/logs/disconf/access.log;</span><br><span class="line">    error_log /XX..XX/logs/disconf/error.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /XX..XX/disconf/war/html;          #html所在的路径</span><br><span class="line">        if ($query_string) &#123;</span><br><span class="line">            expires max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/(api|export) &#123;</span><br><span class="line">        proxy_pass_header Server;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Scheme $scheme;</span><br><span class="line">        proxy_pass http://disconf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后启动所有的服务（zookeeper，redis，Tomcat，nginx），访问`http://IP:8081`即可出现一开始的界面。可以使用`用户名:admin 密码:admin`进行登录。<h2 id="可能出现的报错："><a href="#可能出现的报错：" class="headerlink" title="可能出现的报错："></a>可能出现的报错：</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a><strong>问题1</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">2018-12-26 17:55:05,799 [Task-Thread-for-com.mchange.v2.async.ThreadPerTaskAsynchronousRunner@28b922e5] WARN  resourcepool.BasicResourcePool (BasicResourcePool.java:1841)     - com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask@10737de1 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: </span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line">at sun.reflect.GeneratedConstructorAccessor31.newInstance(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:406)</span><br><span class="line">at com.mysql.jdbc.Util.getInstance(Util.java:381)</span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:984)</span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3491)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3423)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:910)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.secureAuth411(MysqlIO.java:3923)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1273)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2031)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:718)</span><br><span class="line">at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:46)</span><br><span class="line">at sun.reflect.GeneratedConstructorAccessor28.newInstance(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:406)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:302)</span><br><span class="line">at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:282)</span><br><span class="line">at com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:134)</span><br><span class="line">at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:182)</span><br><span class="line">at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:171)</span><br><span class="line">at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:137)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1014)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool.access$800(BasicResourcePool.java:32)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask.run(BasicResourcePool.java:1810)</span><br><span class="line">at com.mchange.v2.async.ThreadPerTaskAsynchronousRunner$TaskThread.run(ThreadPerTaskAsynchronousRunner.java:255)</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a><strong>问题2</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2018-12-26 18:00:26,484 [Task-Thread-for-com.mchange.v2.async.ThreadPerTaskAsynchronousRunner@53ff2503] WARN  resourcepool.BasicResourcePool (BasicResourcePool.java:1841)     - com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask@7de3eb02 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: </span><br><span class="line">java.sql.SQLException: Unknown system variable &#x27;tx_isolation&#x27;</span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3491)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3423)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1936)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2060)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2536)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2465)</span><br><span class="line">at com.mysql.jdbc.StatementImpl.executeQuery(StatementImpl.java:1383)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.getTransactionIsolation(ConnectionImpl.java:3117)</span><br><span class="line">at com.mchange.v2.c3p0.impl.NewPooledConnection.&lt;init&gt;(NewPooledConnection.java:107)</span><br><span class="line">at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:198)</span><br><span class="line">at com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:171)</span><br><span class="line">at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:137)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1014)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool.access$800(BasicResourcePool.java:32)</span><br><span class="line">at com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask.run(BasicResourcePool.java:1810)</span><br><span class="line">at com.mchange.v2.async.ThreadPerTaskAsynchronousRunner$TaskThread.run(ThreadPerTaskAsynchronousRunner.java:255)</span><br></pre></td></tr></table></figure><p>原因：<br><code>mysql-connector-java</code>版本过低<br>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> disconf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis安装使用</title>
      <link href="/post/27910/"/>
      <url>/post/27910/</url>
      
        <content type="html"><![CDATA[<h2 id="1、redis安装"><a href="#1、redis安装" class="headerlink" title="1、redis安装"></a><strong>1、redis安装</strong></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址：<a href="http://redis.io/download">http://redis.io/download</a>，目前最新的版本是4.0.11</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class="line">tar -zxf redis-4.0.11.tar.gz</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>redis-4.0.11的配置文件为<code>redis.conf</code></p><br/>修改为后台运行：`daemonize no` 修改为 `daemonize yes`<br/>修改为可被外网访问：注释`bind 127.0.0.1``protected-mode yes` 修改为 `protected-mode no`<h3 id="运行redis"><a href="#运行redis" class="headerlink" title="运行redis"></a>运行redis</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">./redis-server ./../redis.conf</span><br></pre></td></tr></table></figure><h2 id="2、java调用redis"><a href="#2、java调用redis" class="headerlink" title="2、java调用redis"></a><strong>2、java调用redis</strong></h2><p>redis API 文档<a href="http://www.php.cn/manual/view/36447.html">http://www.php.cn/manual/view/36447.html</a><br>引入maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    testStr();</span><br><span class="line">    testList();</span><br><span class="line">    testSet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">    jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    <span class="comment">//查看服务是否运行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;服务正在运行: &quot;</span> + jedis.ping());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// -----添加数据----------</span></span><br><span class="line">    <span class="comment">// 向key--&gt;name中放入了value--&gt;xinxin</span></span><br><span class="line">    jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;bhz&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行结果：xinxin</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接</span></span><br><span class="line">    jedis.append(<span class="string">&quot;name&quot;</span>, <span class="string">&quot; is my lover&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除某个键</span></span><br><span class="line">    jedis.del(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    <span class="comment">// 设置多个键值对</span></span><br><span class="line">    jedis.mset(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;bhz&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;27&quot;</span>, <span class="string">&quot;qq&quot;</span>, <span class="string">&quot;174754613&quot;</span>);</span><br><span class="line">    <span class="comment">// 进行加1操作</span></span><br><span class="line">    jedis.incr(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;-&quot;</span> + jedis.get(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;-&quot;</span> + jedis.get(<span class="string">&quot;qq&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 开始前，先移除所有的内容</span></span><br><span class="line">    jedis.del(<span class="string">&quot;java framework&quot;</span>);</span><br><span class="line">    System.out.println(jedis.lrange(<span class="string">&quot;java framework&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 先向key java framework中存放三条数据</span></span><br><span class="line">    jedis.lpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;spring&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;struts&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;hibernate&quot;</span>);</span><br><span class="line">    <span class="comment">// 再取出所有数据jedis.lrange是按范围取出，</span></span><br><span class="line">    <span class="comment">// 第一个是key，第二个是起始位置，第三个是结束位置，jedis.llen获取长度 -1表示取得所有</span></span><br><span class="line">    System.out.println(jedis.lrange(<span class="string">&quot;java framework&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    jedis.del(<span class="string">&quot;java framework&quot;</span>);</span><br><span class="line">    jedis.rpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;spring&quot;</span>);</span><br><span class="line">    jedis.rpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;struts&quot;</span>);</span><br><span class="line">    jedis.rpush(<span class="string">&quot;java framework&quot;</span>, <span class="string">&quot;hibernate&quot;</span>);</span><br><span class="line">    System.out.println(jedis.lrange(<span class="string">&quot;java framework&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    jedis.sadd(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;liuling&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;xinxin&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;ling&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;zhangxinxin&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="comment">// 移除noname</span></span><br><span class="line">    jedis.srem(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;who&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取所有加入的value</span></span><br><span class="line">    System.out.println(jedis.smembers(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    <span class="comment">// 判断 who</span></span><br><span class="line">    System.out.println(jedis.sismember(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;who&quot;</span>));</span><br><span class="line">    <span class="comment">// 是否是user集合的元素</span></span><br><span class="line">    System.out.println(jedis.srandmember(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    <span class="comment">// 返回集合的元素个数</span></span><br><span class="line">    System.out.println(jedis.scard(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Spring-redis"><a href="#3、Spring-redis" class="headerlink" title="3、Spring + redis"></a><strong>3、Spring + redis</strong></h2><p>再次之前需要保证正常的Spring可以运行，且此处不适用Springboot（因为不知道怎么在SpringBoot上加配置文件）</p><h3 id="增加对应的maven"><a href="#增加对应的maven" class="headerlink" title="增加对应的maven"></a>增加对应的maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="redis-properties"><a href="#redis-properties" class="headerlink" title="redis.properties"></a>redis.properties</h3><p>项目路径下添加<code>redis.properties</code>,<code>redis.properties</code>配置如下，本人比较喜欢尽量简化配置，故在配置中并没有添加太多其他的配置项，只是最简单的ip和端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis.host = 107.175.XX.XX</span><br><span class="line">redis.port = 6379</span><br></pre></td></tr></table></figure><h3 id="spring-context-redis-xml"><a href="#spring-context-redis-xml" class="headerlink" title="spring-context-redis.xml"></a>spring-context-redis.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入对应的redis.properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:META-INF/spring/redis.properties&quot;</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用Jedis连接池的工厂类，传入IP和端口号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hostName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;redis.host&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;redis.port&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis的序列化工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisConnectionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;keySerializer&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;stringRedisSerializer&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashKeySerializer&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;stringRedisSerializer&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、java-redis哨兵模式"><a href="#3、java-redis哨兵模式" class="headerlink" title="3、java redis哨兵模式"></a><strong>3、java redis哨兵模式</strong></h2><p>使用的哨兵的ip，默认的端口号是26379，java会根据哨兵，自动寻找主数据库节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; sentinels = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    sentinels.add(<span class="string">&quot;47.100.14.240:26379&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">clusterName</span> <span class="operator">=</span> <span class="string">&quot;mymaster&quot;</span>;</span><br><span class="line">    <span class="type">JedisSentinelPool</span> <span class="variable">redisSentinelJedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(clusterName, sentinels);</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> redisSentinelJedisPool.getResource();</span><br><span class="line">    jedis.set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">    redisSentinelJedisPool.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a><strong>报错</strong></h2><p>MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.</p><p>原因：<br>因为强制把redis快照关闭了导致不能持久化的问题</p><p>解决方法：<br>修改<code>redis.conf</code>中的<code>stop-writes-on-bgsave-error</code>为<code>no</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-writes-on-bgsave-error no</span><br></pre></td></tr></table></figure><h2 id="奇奇怪怪的知识点"><a href="#奇奇怪怪的知识点" class="headerlink" title="奇奇怪怪的知识点"></a><strong>奇奇怪怪的知识点</strong></h2><h3 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a><strong>redis事务</strong></h3><p>参考<a href="https://www.jianshu.com/p/c9f5718e58f0">https://www.jianshu.com/p/c9f5718e58f0</a></br><br>redis开始事务之后，如果对redis操作完了，只会解绑连接，不会做close的操作，因为redis并不知道事务是否已经执行完。</br><br>在spring中要使用Redis注解式事务，首先要设置RedisTemplate的enableTransactionSupport属性为true，然后配置spring的事务，所有使用这个template的redis操作都必须走注解式事务，要不然会导致连接一直占用，不关闭。</br><br>但是通常情况下，redis一般只做缓存，对数据要求不会很高，所以比较少开启事务，一般只是setter和getter。如果要求一致性很高，建议使用数据库的唯一索引做。</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk8函数式编程</title>
      <link href="/post/63007/"/>
      <url>/post/63007/</url>
      
        <content type="html"><![CDATA[<p>##jdk8的函数式编程主要有<code>supplier</code> <code>Consumer</code> <code>Function </code> <code>Predicate</code>和 <code>Operator</code>五种，分别对这五种进行测试如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFunctionInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(TestFunctionInterface.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testFunction(<span class="number">1</span>);</span><br><span class="line">        testIntFunction(<span class="number">1</span>);</span><br><span class="line">        testLongFunction(<span class="number">1</span>);</span><br><span class="line">        testDoubleFunction(<span class="number">1</span>);</span><br><span class="line">        testIntToLongFunction(<span class="number">1</span>);</span><br><span class="line">        testIntToDoubleFunction(<span class="number">1</span>);</span><br><span class="line">        testLongToIntFunction(<span class="number">1</span>);</span><br><span class="line">        testLongToDoubleFunction(<span class="number">1</span>);</span><br><span class="line">        testDoubleToIntFunction(<span class="number">1</span>);</span><br><span class="line">        testDoubleToLongFunction(<span class="number">1</span>);</span><br><span class="line">        testToIntFunction(<span class="number">1</span>);</span><br><span class="line">        testToLongFunction(<span class="number">1</span>);</span><br><span class="line">        testToDoubleFunction(<span class="number">1</span>);</span><br><span class="line">        testBiFunction(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testToIntBiFunction(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testToLongBiFunction(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testToDoubleBiFunction(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        testConsumer(<span class="number">1</span>);</span><br><span class="line">        testIntConsumer(<span class="number">1</span>);</span><br><span class="line">        testLongConsumer(<span class="number">1</span>);</span><br><span class="line">        testDoubleConsumer(<span class="number">1</span>);</span><br><span class="line">        testBiConsumer(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testObjIntConsumer(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testObjLongConsumer(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testObjDoubleConsumer(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        testBinaryOperator(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testIntBinaryOperator(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testLongBinaryOperator(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testDoubleBinaryOperator(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        testUnaryOperator(<span class="number">1</span>);</span><br><span class="line">        testIntUnaryOperator(<span class="number">1</span>);</span><br><span class="line">        testLongUnaryOperator(<span class="number">1</span>);</span><br><span class="line">        testDoubleUnaryOperator(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        testPredicate(<span class="number">1</span>);</span><br><span class="line">        testIntPredicate(<span class="number">1</span>);</span><br><span class="line">        testLongPredicate(<span class="number">1</span>);</span><br><span class="line">        testDoublePredicate(<span class="number">1</span>);</span><br><span class="line">        testBiPredicate(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        testSupplier();</span><br><span class="line">        testIntSupplier();</span><br><span class="line">        testLongSupplier();</span><br><span class="line">        testDoubleSupplier();</span><br><span class="line">        testBooleanSupplier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Function////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，返回一个结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testFunction*************&quot;</span>);</span><br><span class="line">        Function&lt;Integer, Integer&gt; function = x -&gt; x + <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, function.apply(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个int类型输入参数，返回一个结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">IntFunction</span> <span class="variable">intFunction</span> <span class="operator">=</span> x -&gt; x + <span class="number">100</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intFunction.apply(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 接受一个long类型输入参数，返回一个结果 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongFunction</span><span class="params">(<span class="type">long</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">LongFunction</span> <span class="variable">longFunction</span> <span class="operator">=</span> x -&gt; x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longFunction.apply(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个double类型输入参数，返回一个结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleFunction</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleFunction</span> <span class="variable">df</span> <span class="operator">=</span> x -&gt; x + <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, df.apply(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个int类型输入，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntToLongFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntToLongFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">IntToLongFunction</span> <span class="variable">intToLongFunction</span> <span class="operator">=</span> x -&gt; (<span class="type">long</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intToLongFunction.applyAsLong(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个int类型输入，返回一个double类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntToDoubleFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntToDoubleFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">IntToDoubleFunction</span> <span class="variable">intToDoubleFunction</span> <span class="operator">=</span> x -&gt; (<span class="type">double</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intToDoubleFunction.applyAsDouble(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个long类型输入，返回一个int类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongToIntFunction</span><span class="params">(<span class="type">long</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongToIntFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">LongToIntFunction</span> <span class="variable">longToIntFunction</span> <span class="operator">=</span> x -&gt; (<span class="type">int</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longToIntFunction.applyAsInt(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个long类型输入，返回一个double类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongToDoubleFunction</span><span class="params">(<span class="type">long</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongToDoubleFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">LongToDoubleFunction</span> <span class="variable">longToDoubleFunction</span> <span class="operator">=</span> x -&gt; (<span class="type">double</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longToDoubleFunction.applyAsDouble(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个double类型输入，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleToLongFunction</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleToLongFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleToLongFunction</span> <span class="variable">dtifl</span> <span class="operator">=</span> x -&gt; (<span class="type">long</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, dtifl.applyAsLong(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个double类型输入，返回一个int类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleToIntFunction</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleToIntFunction*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleToIntFunction</span> <span class="variable">dtif</span> <span class="operator">=</span> x -&gt; (<span class="type">int</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, dtif.applyAsInt(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，返回一个int类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToIntFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToIntFunction*************&quot;</span>);</span><br><span class="line">        ToIntFunction&lt;Integer&gt; toIntFunction = x -&gt; (<span class="type">int</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toIntFunction.applyAsInt(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToLongFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToLongFunction*************&quot;</span>);</span><br><span class="line">        ToLongFunction&lt;Integer&gt; toLongFunction = Integer::longValue;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toLongFunction.applyAsLong(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，返回一个double类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToDoubleFunction</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToDoubleFunction*************&quot;</span>);</span><br><span class="line">        ToDoubleFunction&lt;Integer&gt; toDoubleFunction = x -&gt; (<span class="type">double</span>) x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toDoubleFunction.applyAsDouble(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代表了一个接受两个输入参数的方法，并且返回一个结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBiFunction</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testBiFunction*************&quot;</span>);</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; fun = (s1, s2) -&gt; s1 + s2;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, fun.apply(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个输入参数，返回一个int类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToIntBiFunction</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToIntBiFunction*************&quot;</span>);</span><br><span class="line">        ToIntBiFunction&lt;Integer, Integer&gt; toIntBiFunction = (x, y) -&gt; x + y;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toIntBiFunction.applyAsInt(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个输入参数，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToLongBiFunction</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToLongBiFunction*************&quot;</span>);</span><br><span class="line">        ToLongBiFunction&lt;Integer, Integer&gt; toLongBiFunction = (x, y) -&gt; x.longValue() + y.longValue();</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toLongBiFunction.applyAsLong(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个输入参数，返回一个double类型结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToDoubleBiFunction</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testToDoubleBiFunction*************&quot;</span>);</span><br><span class="line">        ToDoubleBiFunction&lt;Integer, Integer&gt; toDoubleBiFunction = (x, y) -&gt; (<span class="type">double</span>) x + (<span class="type">double</span>) y;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, toDoubleBiFunction.applyAsDouble(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Consumer////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testConsumer</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testConsumer*************&quot;</span>);</span><br><span class="line">        Consumer&lt;Integer&gt; consumer = x -&gt; logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">        consumer.accept(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个int类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntConsumer</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntConsumer*************&quot;</span>);</span><br><span class="line">        <span class="type">IntConsumer</span> <span class="variable">intConsumer</span> <span class="operator">=</span> x -&gt; logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">        intConsumer.accept(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个long类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongConsumer</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongConsumer*************&quot;</span>);</span><br><span class="line">        <span class="type">LongConsumer</span> <span class="variable">longConsumer</span> <span class="operator">=</span> x -&gt; logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">        longConsumer.accept(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个double类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleConsumer</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleConsumer*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleConsumer</span> <span class="variable">dc</span> <span class="operator">=</span> x -&gt; logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">        dc.accept(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个输入参数作，无返回任何值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBiConsumer</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testBiConsumer*************&quot;</span>);</span><br><span class="line">        BiConsumer&lt;Integer, Integer&gt; biConsumer = (x, y) -&gt; logger.info(<span class="string">&quot;&#123;&#125;-----&#123;&#125;&quot;</span>, x, y);</span><br><span class="line">        biConsumer.accept(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个object类型和一个int类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testObjIntConsumer</span><span class="params">(Object a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testObjIntConsumer*************&quot;</span>);</span><br><span class="line">        ObjIntConsumer&lt;Object&gt; objIntConsumer = (x, y) -&gt; logger.info(<span class="string">&quot;obj:&#123;&#125;------int:&#123;&#125;&quot;</span>, x, y);</span><br><span class="line">        objIntConsumer.accept(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个object类型和一个long类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testObjLongConsumer</span><span class="params">(Object a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testObjLongConsumer*************&quot;</span>);</span><br><span class="line">        ObjLongConsumer&lt;Object&gt; objLongConsumer = (x, y) -&gt; logger.info(<span class="string">&quot;obj:&#123;&#125;------long:&#123;&#125;&quot;</span>, x, y);</span><br><span class="line">        objLongConsumer.accept(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个object类型和一个double类型的输入参数，无返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testObjDoubleConsumer</span><span class="params">(Object a, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testObjDoubleConsumer*************&quot;</span>);</span><br><span class="line">        ObjDoubleConsumer&lt;Object&gt; objDoubleConsumer = (x, y) -&gt; logger.info(<span class="string">&quot;obj:&#123;&#125;------double:&#123;&#125;&quot;</span>, x, y);</span><br><span class="line">        objDoubleConsumer.accept(a, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Operator////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBinaryOperator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testBinaryOperator*************&quot;</span>);</span><br><span class="line">        BinaryOperator&lt;Integer&gt; t1 = BinaryOperator.minBy(Integer::compare);</span><br><span class="line">        BinaryOperator&lt;Integer&gt; t2 = BinaryOperator.maxBy(Integer::compare);</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>, t1.apply(a, b), t2.apply(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个参数同为类型int,返回值类型也为int</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntBinaryOperator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntBinaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">IntBinaryOperator</span> <span class="variable">intBinaryOperator</span> <span class="operator">=</span> (x, y) -&gt; x + y;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intBinaryOperator.applyAsInt(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个参数同为类型long,返回值类型也为long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongBinaryOperator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongBinaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">LongBinaryOperator</span> <span class="variable">longBinaryOperator</span> <span class="operator">=</span> (x, y) -&gt; x + y;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longBinaryOperator.applyAsLong(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受两个参数同为类型double,返回值类型也为double</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleBinaryOperator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleBinaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleBinaryOperator</span> <span class="variable">dbo</span> <span class="operator">=</span> (x, y) -&gt; x + y;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, dbo.applyAsDouble(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个参数为类型T,返回值类型也为T</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testUnaryOperator</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testUnaryOperator*************&quot;</span>);</span><br><span class="line">        UnaryOperator&lt;Integer&gt; unaryOperator = x -&gt; x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, unaryOperator.apply(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个参数同为类型int,返回值类型也为int</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntUnaryOperator</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntUnaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">IntUnaryOperator</span> <span class="variable">intUnaryOperator</span> <span class="operator">=</span> x -&gt; x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intUnaryOperator.applyAsInt(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个参数同为类型int,返回值类型也为long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongUnaryOperator</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongUnaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">LongUnaryOperator</span> <span class="variable">longUnaryOperator</span> <span class="operator">=</span> x -&gt; x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longUnaryOperator.applyAsLong(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个参数同为类型int,返回值类型也为double</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleUnaryOperator</span><span class="params">(<span class="type">int</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleUnaryOperator*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleUnaryOperator</span> <span class="variable">doubleUnaryOperator</span> <span class="operator">=</span> x -&gt; x;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, doubleUnaryOperator.applyAsDouble(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Predicate////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个输入参数，返回一个布尔值结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPredicate</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testPredicate*************&quot;</span>);</span><br><span class="line">        Predicate&lt;Integer&gt; predicate = x -&gt; x &gt; <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, predicate.test(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个int输入参数，返回一个布尔值的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntPredicate</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntPredicate*************&quot;</span>);</span><br><span class="line">        <span class="type">IntPredicate</span> <span class="variable">intPredicate</span> <span class="operator">=</span> x -&gt; x &gt; <span class="number">100</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intPredicate.test(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个long输入参数，返回一个布尔值的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongPredicate</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongPredicate*************&quot;</span>);</span><br><span class="line">        <span class="type">LongPredicate</span> <span class="variable">longPredicate</span> <span class="operator">=</span> x -&gt; x &gt; <span class="number">100</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longPredicate.test(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个double输入参数，返回一个布尔值的结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoublePredicate</span><span class="params">(<span class="type">int</span> d)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoublePredicate*************&quot;</span>);</span><br><span class="line">        <span class="type">DoublePredicate</span> <span class="variable">dp</span> <span class="operator">=</span> x -&gt; x &gt; <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, dp.test(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代表了一个两个参数的boolean值方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBiPredicate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testBiPredicate*************&quot;</span>);</span><br><span class="line">        BiPredicate&lt;Integer, Integer&gt; biPredicate = (x, y) -&gt; x &gt;= y;</span><br><span class="line">        BiPredicate&lt;Integer, Integer&gt; biPredicate1 = (x, y) -&gt; (y + x) &gt; <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>, biPredicate.test(a, b), biPredicate.and(biPredicate1).test(<span class="number">6</span>, <span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Supplier////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数，返回一个结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testSupplier*************&quot;</span>);</span><br><span class="line">        Supplier&lt;Integer&gt; supplier = () -&gt; <span class="number">10</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数，返回一个int类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIntSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testIntSupplier*************&quot;</span>);</span><br><span class="line">        <span class="type">IntSupplier</span> <span class="variable">intSupplier</span> <span class="operator">=</span> () -&gt; <span class="number">100</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, intSupplier.getAsInt());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLongSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testLongSupplier*************&quot;</span>);</span><br><span class="line">        <span class="type">LongSupplier</span> <span class="variable">longSupplier</span> <span class="operator">=</span> () -&gt; <span class="number">100L</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, longSupplier.getAsLong());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数，返回一个long类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDoubleSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testDoubleSupplier*************&quot;</span>);</span><br><span class="line">        <span class="type">DoubleSupplier</span> <span class="variable">ds</span> <span class="operator">=</span> () -&gt; <span class="number">10d</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, ds.getAsDouble());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数，返回一个boolean类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBooleanSupplier</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;*************testBooleanSupplier*************&quot;</span>);</span><br><span class="line">        <span class="type">BooleanSupplier</span> <span class="variable">bs</span> <span class="operator">=</span> () -&gt; <span class="literal">false</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, bs.getAsBoolean());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql经验总结</title>
      <link href="/post/2930/"/>
      <url>/post/2930/</url>
      
        <content type="html"><![CDATA[<h2 id="1、mysql5-6忘记密码"><a href="#1、mysql5-6忘记密码" class="headerlink" title="1、mysql5.6忘记密码"></a><strong>1、mysql5.6忘记密码</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service mysqld stop                                             #先停止服务</span><br><span class="line">mysqld_safe --skip-grant-table                                  #停止安全校验</span><br><span class="line">#此时当前终端卡死，另起一个终端</span><br><span class="line">mysql                                                           #直接进入mysql 无需密码</span><br><span class="line">use mysql;                                                      #进入mysql表</span><br><span class="line">update user set password=PASSWORD(&#x27;root&#x27;) where user=&#x27;root&#x27;;    #更新密码</span><br><span class="line">flush privileges;                                               #立即生效</span><br><span class="line">service mysqld start                                            #退出mysql重启mysqld服务    </span><br></pre></td></tr></table></figure><h2 id="2、mysql占用内存过大"><a href="#2、mysql占用内存过大" class="headerlink" title="2、mysql占用内存过大"></a><strong>2、mysql占用内存过大</strong></h2><p>在<code>/erc/my.cnf</code>中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 最小400，对内存占用影响大</span><br><span class="line">// 开发模式：从1400设置为400，内存从150M降到90M</span><br><span class="line">// 服务模式：从1400设置为400，内存从324M降到227M</span><br><span class="line">table_definition_cache=400</span><br><span class="line"></span><br><span class="line">// 影响不大</span><br><span class="line">// 从 2000 调至 500，占用内存减少了 1M</span><br><span class="line">table_open_cache=500</span><br><span class="line"></span><br><span class="line">// 影响不大</span><br><span class="line">// 从 默认值 调至 400，占用内存减少了 1M</span><br><span class="line">performance_schema_max_table_instances=400</span><br><span class="line">--------------------- </span><br><span class="line">作者：亦寒2017 </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https://blog.csdn.net/m0_37202351/article/details/82194153 </span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure><h2 id="3、mysql5-7忘记密码"><a href="#3、mysql5-7忘记密码" class="headerlink" title="3、mysql5.7忘记密码"></a><strong>3、mysql5.7忘记密码</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">#在[mysqld]下添加skip-grant-tables</span><br><span class="line">service mysqld restart                                                              #重启mysql服务</span><br><span class="line">mysql -uroot -p                                                                     #进入mysql，此时无需密码</span><br><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;   #更新root密码，5.7中没有password字段</span><br><span class="line">flush privileges;                                                                   #立即生效</span><br><span class="line">#删除[mysqld]下添加skip-grant-tables</span><br><span class="line">service mysqld restart                                                              #重启mysql服务</span><br></pre></td></tr></table></figure><h2 id="4、mysql5-7-远程连接打开"><a href="#4、mysql5-7-远程连接打开" class="headerlink" title="4、mysql5.7 远程连接打开"></a><strong>4、mysql5.7 远程连接打开</strong></h2><figure class="highlight plaintext"><figcaption><span>```%```表示ip可以访问</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class="line">flush privileges; </span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="5、查看语句执行时间"><a href="#5、查看语句执行时间" class="headerlink" title="5、查看语句执行时间"></a><strong>5、查看语句执行时间</strong></h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#确定打开profiles</span><br><span class="line">show variables like &quot;profiling&quot;;</span><br><span class="line">#如果是OFF，使用下面语句打开profiles</span><br><span class="line">set profiling=1;</span><br><span class="line">#查看mysql语句执行的时间</span><br><span class="line">show profiles;</span><br><span class="line">#查看每句SQL每个阶段执行的时间</span><br><span class="line">show profile;</span><br></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>注意最后需要一个空格来跳出，否则需要手动输入，影响时间的计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set @d=now(); </span><br><span class="line">select * from comment; </span><br><span class="line">select timestampdiff(second,@d,now()); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、drop-truncate-delete"><a href="#6、drop-truncate-delete" class="headerlink" title="6、drop truncate delete"></a><strong>6、drop truncate delete</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drop        删除（表数据，表空间索引空间，表结构）</span><br><span class="line">            不能回滚，不会触发触发器</span><br><span class="line">truncate    删除（表数据，表空间索引空间）</span><br><span class="line">            不能回滚，不会触发触发器</span><br><span class="line">delete      删除（表数据）</span><br><span class="line">            可以回滚，在事务日志中有删除日志</span><br></pre></td></tr></table></figure><h2 id="7、mysql安装"><a href="#7、mysql安装" class="headerlink" title="7、mysql安装"></a><strong>7、mysql安装</strong></h2><p>依次执行下面语句：</p><blockquote><p>wget <a href="https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm">https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm</a><br>sudo yum localinstall mysql80-community-release-el7-1.noarch.rpm<br>sudo yum install mysql-community-server</p></blockquote><h2 id="8、mysql修改初始化密码"><a href="#8、mysql修改初始化密码" class="headerlink" title="8、mysql修改初始化密码"></a><strong>8、mysql修改初始化密码</strong></h2><p>初始化密码的位置：</br></p><blockquote><p>sudo grep ‘temporary password’ &#x2F;var&#x2F;log&#x2F;mysqld.log</p></blockquote><p>修改初始化密码：</br></p><blockquote><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘新密码’;</p></blockquote><p></br>但是默认的初始化密码是有校验规则，大小写数字特殊字符位数等要求，可以使用<code>SHOW VARIABLES LIKE &#39;validate_password%&#39;; </code>进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password.check_user_name    | ON    |</span><br><span class="line">| validate_password.dictionary_file    |       |</span><br><span class="line">| validate_password.length             | 8     |</span><br><span class="line">| validate_password.mixed_case_count   | 1     |</span><br><span class="line">| validate_password.number_count       | 2     |</span><br><span class="line">| validate_password.policy             | LOW   |</span><br><span class="line">| validate_password.special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br></pre></td></tr></table></figure><p>关掉这些设置：在<code>/etc/my.cnf</code>中添加下面的内容，然后重启服务，就可以把配置关了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">validate_password.policy=LOW</span><br><span class="line">validate_password.length=3</span><br><span class="line">validate_password.mixed_case_count=0</span><br><span class="line">validate_password.special_char_count=0</span><br><span class="line">validate_password.number_count=0</span><br></pre></td></tr></table></figure><p>然后就可以根据自己的需要设置密码了</p><h2 id="8、mysql内存计算器"><a href="#8、mysql内存计算器" class="headerlink" title="8、mysql内存计算器"></a><strong>8、mysql内存计算器</strong></h2><p><a href="http://www.mysqlcalculator.com/">http://www.mysqlcalculator.com/</a></p><h2 id="9、select-count-VS-select-count-1"><a href="#9、select-count-VS-select-count-1" class="headerlink" title="9、select count(*) VS select count(1)"></a>9、select count(*) VS select count(1)</h2><p>传闻select count(1)的速度会比select count(*)快，但是经过测试，二者的速度就会是没有差别的。</p><h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a><strong>innodb</strong></h3><p>如果没有创建索引，则会引擎会自动创建一个索引与每一行关联在一起。统计是按照下面数据使用索引。<br><img src="https://img.ncfl.tech/202305012214531.jpg"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a><strong>MyISAM</strong></h3><p>该引擎下使用<code>select count(*)</code>会在单位时间返回，因为该引擎会维护一个表记录总数的变量。<br>该引擎下使用<code>select count(*) from x wher id !=1</code>,这种情况下则需要走索引。</p><h3 id="索引使用顺序"><a href="#索引使用顺序" class="headerlink" title="索引使用顺序"></a><strong>索引使用顺序</strong></h3><p>与运行顺序有关，优先看到哪个则使用哪个索引<br>最左前置原则<br>如果char类型没有用<code>&quot;&quot;</code>括起来，解释器优化的时候需要转化，此时可能退化为全表扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- GROUP BY + ORDER BY   using GROUP BY</span><br><span class="line">EXPLAIN select count(1) from a GROUP BY good_name ORDER BY id;</span><br><span class="line">-- GROUP BY + where      using GROUP BY </span><br><span class="line">EXPLAIN select count(1) from a where time = 1 GROUP BY good_name;</span><br><span class="line">-- where + ORDER BY      using where </span><br><span class="line">EXPLAIN select count(1) from a where time = 1 ORDER BY id;</span><br><span class="line">-- where + ORDER BY + GROUP BY using where</span><br><span class="line">EXPLAIN select count(1) from a where time = 1 GROUP BY good_name ORDER BY id;</span><br></pre></td></tr></table></figure></br></br><h2 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a><strong>一些错误</strong></h2><p>（1）You must reset your password using ALTER USER statement before executing this statement.</br><br>全部大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&#x27;root&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git相关操作</title>
      <link href="/post/24802/"/>
      <url>/post/24802/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h3><blockquote><p>wget <a href="https://github.com/Git/Git/archive/v2.20.0.tar.gz">https://Github.com/Git/Git/archive/v2.20.0.tar.gz</a><br>tar -zxvf v2.20.0.tar.gz<br>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker<br>yum remove git<br>cd git-2.20.0<br>make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all<br>make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install</p></blockquote><p>然后配置环境变量：</p><blockquote><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin</p></blockquote><p>然后安装完成</p><h3 id="1、代码在错误的分支上开发，且未commit"><a href="#1、代码在错误的分支上开发，且未commit" class="headerlink" title="1、代码在错误的分支上开发，且未commit"></a><strong>1、代码在错误的分支上开发，且未commit</strong></h3><blockquote><p>git add .<br>git stash<br>git checkout 分支名<br>git stash pop</p></blockquote><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>在所有操作之前需要把所有的文件交给git管理<br>把修改的文件提交到git的暂存栈<br>切换到合适的分支<br>把git暂存栈中的代码拉取到本地</p></blockquote><h3 id="2、取消最新一次的commit"><a href="#2、取消最新一次的commit" class="headerlink" title="2、取消最新一次的commit"></a><strong>2、取消最新一次的commit</strong></h3><blockquote><p>git reset HEAD~</p></blockquote><h3 id="3、取消所有本地修改"><a href="#3、取消所有本地修改" class="headerlink" title="3、取消所有本地修改"></a><strong>3、取消所有本地修改</strong></h3><p>只可以取消修改，文件删除无法还原</p><blockquote><p>git checkout .</p></blockquote><p>或者</p><blockquote><p>git checkout 文件夹、文件名</p></blockquote><h3 id="4、一个本地库提交到两个远程库"><a href="#4、一个本地库提交到两个远程库" class="headerlink" title="4、一个本地库提交到两个远程库"></a><strong>4、一个本地库提交到两个远程库</strong></h3><p>添加origin2为对应的git库地址</p><blockquote><p>git remote add origin2 <a href="http://107.175.31.34:7990/scm/test/test-my.git">http://107.175.31.34:7990/scm/test/test-my.git</a></p></blockquote><p>然后正常操作</p><blockquote><p>git pull origin2 master<br>git push origin2 master</p></blockquote><h3 id="5、git忽略文件"><a href="#5、git忽略文件" class="headerlink" title="5、git忽略文件"></a><strong>5、git忽略文件</strong></h3><p>创建文件<code>.gitignore</code>文件</p><p>在文件中填写想要忽略的文件或者文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#  folder  #</span><br><span class="line">############</span><br><span class="line">/target</span><br><span class="line">/.idea</span><br><span class="line">/logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############</span><br><span class="line">#   file   #</span><br><span class="line">############</span><br><span class="line">*.class</span><br><span class="line">learning.iml</span><br></pre></td></tr></table></figure><h3 id="6、git回滚远程库"><a href="#6、git回滚远程库" class="headerlink" title="6、git回滚远程库"></a><strong>6、git回滚远程库</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本地软回滚至未提交的版本号</span><br><span class="line">git reset -soft &lt;版本号&gt;  </span><br><span class="line"># 把当前分支强制推送到远程仓库，使远程仓库回到未提交的版本</span><br><span class="line">git push origin &lt;分支&gt; --force</span><br><span class="line"># 修改之后重新提交代码 </span><br><span class="line">git push origin &lt;分支&gt;</span><br></pre></td></tr></table></figure><h3 id="7、撤销git-stash-pop"><a href="#7、撤销git-stash-pop" class="headerlink" title="7、撤销git stash pop"></a><strong>7、撤销git stash pop</strong></h3><blockquote><p>git checkout -f</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leanote安装-原生安装</title>
      <link href="/post/41906/"/>
      <url>/post/41906/</url>
      
        <content type="html"><![CDATA[<h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a><strong>1、下载</strong></h2><h3 id="下载网址："><a href="#下载网址：" class="headerlink" title="下载网址："></a>下载网址：</h3><p><a href="http://leanote.org/#download">http://leanote.org/#download</a> 下载最新版本的leanote linux版本</p><h2 id="2、安装MongoDB"><a href="#2、安装MongoDB" class="headerlink" title="2、安装MongoDB"></a><strong>2、安装MongoDB</strong></h2><p>leanote使用的是MongoDB作为数据库。</p><h3 id="2-1-下载地址："><a href="#2-1-下载地址：" class="headerlink" title="2.1 下载地址："></a>2.1 下载地址：</h3><p><a href="https://www.mongodb.com/download-center">https://www.mongodb.com/download-center</a>–&gt;Communtity Server–&gt;Linux–&gt;RHEL 7 Linux 64-bit x64</p><h3 id="2-2-配置环境变量"><a href="#2-2-配置环境变量" class="headerlink" title="2.2 配置环境变量"></a>2.2 配置环境变量</h3><p>把MongoDB配置到环境变量，便于启动MongoDB，如果使用的不多，也可以不配置。</p><blockquote><p>vim &#x2F;etc&#x2F;profile<br>export PATH&#x3D;$PATH:&#x2F;home&#x2F;user1&#x2F;mongodb-linux-x86_64-2.6.4&#x2F;bin<br>source &#x2F;etc&#x2F;profile</p></blockquote><h3 id="2-3-启动MongoDB"><a href="#2-3-启动MongoDB" class="headerlink" title="2.3 启动MongoDB"></a>2.3 启动MongoDB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/leanote/data                                                                             #新建MongoDB数据保存地址</span><br><span class="line">mongod --dbpath=/home/leanote/data                                                                   #启动MongoDB         </span><br><span class="line">mongod --fork --dbpath=/my/mongod/data --logpath=/my/mongod/data/mongodb2.log --logappend            #后台运行MongoDB</span><br></pre></td></tr></table></figure><h3 id="2-4-简单使用MongoDB"><a href="#2-4-简单使用MongoDB" class="headerlink" title="2.4 简单使用MongoDB"></a>2.4 简单使用MongoDB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongo               #进入MongoDB</span><br><span class="line">show dbs            #查看所有数据库</span><br><span class="line">use leanote         #切换到leanote数据库</span><br><span class="line">show collections    #查看库中所有表</span><br><span class="line">db.user.find()      #查看user表，等价于select * from user;</span><br></pre></td></tr></table></figure><h2 id="3、leanote使用"><a href="#3、leanote使用" class="headerlink" title="3、leanote使用"></a><strong>3、leanote使用</strong></h2><h3 id="3-1-初始化MongoDB的leanote数据"><a href="#3-1-初始化MongoDB的leanote数据" class="headerlink" title="3.1 初始化MongoDB的leanote数据"></a>3.1 初始化MongoDB的leanote数据</h3><blockquote><p>mongorestore -h localhost -d leanote –dir &#x2F;home&#x2F;user1&#x2F;leanote&#x2F;mongodb_backup&#x2F;leanote_install_data&#x2F;<br>执行之后MongoDB中便有leanote这个数据库</p></blockquote><h3 id="3-2-配置leanote"><a href="#3-2-配置leanote" class="headerlink" title="3.2 配置leanote"></a>3.2 配置leanote</h3><p>修改leanote 解压路径下的<code>conf/app.conf</code>文件中的<code>app.secret</code>的值，随便增删，网上说不改会有安全问题</p><h3 id="3-3-运行leanote"><a href="#3-3-运行leanote" class="headerlink" title="3.3 运行leanote"></a>3.3 运行leanote</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x run.sh             #给run.sh增加可运行权限</span><br><span class="line">./run.sh                    #运行leanote </span><br><span class="line">bash run.sh                 #运行leanote</span><br><span class="line">sh run.sh                   #运行leanote</span><br><span class="line">nohup ./run.sh nohup.out    #借用nohup在后台运行leanote</span><br></pre></td></tr></table></figure><h3 id="3-4-界面"><a href="#3-4-界面" class="headerlink" title="3.4 界面"></a>3.4 界面</h3><p>leanote默认的端口号是9000<br>在浏览器访问<code>http://ip:9000</code>即可看到界面<br><img src="http://img.ncfl.tech/202303191721324.jpg" alt="http://img.ncfl.tech/202303191721324.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> leanote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础（4）jvm 内存空间+对象+GC</title>
      <link href="/post/40532/"/>
      <url>/post/40532/</url>
      
        <content type="html"><![CDATA[<h2 id="一、jvm基础结构"><a href="#一、jvm基础结构" class="headerlink" title="一、jvm基础结构"></a>一、jvm基础结构</h2><p>jvm中主要把内存分成下面几个部分：</p><ul><li>程序计数器（PC寄存器）</li><li>方法区</li><li>栈空间</li><li>堆空间</li><li>本地方法栈</li></ul><p>下面这张图是从《深入java虚拟机》这本书里截取出来的：</p><p><img src="https://img.ncfl.tech/202305022323848.jpeg" alt="这里写图片描述"></p><h4 id="程序计数器（PC寄存器）："><a href="#程序计数器（PC寄存器）：" class="headerlink" title="程序计数器（PC寄存器）："></a>程序计数器（PC寄存器）：</h4><p>所占据的内存空间很小，可以看作是当前线程所执行的字节码的行号指示器，简单来说就是执行完当前语句之后，根据程序计数器找到所要执行的下一条语句。这方面的知识在操作系统中应该都有涉及到。</p><p>从图中也可以看出，程序计数器线程独立的，每个线程都有一个计数器。</p><h4 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h4><p>线程共享的内存区域，主要存储的是已经被虚拟机加载的类的信息，常量，静态变量，字节码等信息。</p><p>在目前的java7，java8中，虚拟机采用的都是HotSpot，方法区和永久区（待会说）管理的是同一块内存区域。</p><p>顺便提一下，在java7以后，字符串常量已经从方法区移到堆空间中，即是<code>String str = new String(&quot;hello world&quot;);</code>hello world 这个常量在java6（包括）之前是放在方法区的，java7将这个常量移动到堆空间中。关于String的常量这方面的知识点也是不少的，这里不做展开。</p><h4 id="栈空间"><a href="#栈空间" class="headerlink" title="栈空间"></a>栈空间</h4><p>这里的栈空间指的主要是虚拟机栈，这个栈空间是线程私有的，一般来说，栈空间一般只有几十k到几百k，空间较小。<code>String str = new String(&quot;hello world&quot;);</code>上面这个语句，str这个变量就是放在栈空间的。</p><p>每个方法在执行的同时都会创建一个栈帧用于存储局部变量表（这个东西好像挺重要的，但是不是很看得懂），操作数栈，动态链接，方法出口等信息，每一个方法从调用知道执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度，就会抛出StackOverflowError异常（递归中最常见的一个错误）<br>如果栈空间申请不到自己所需要的内存，就是抛出OutofMemoryError异常。</p><h4 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h4><p>这个和上面的栈空间基本是相同的，不同的是这里面存放的是native方法的栈空间，由于native方法基本上都不是java写的，所以很多程序员对这部分的内存不是很关心。</p><h4 id="堆空间："><a href="#堆空间：" class="headerlink" title="堆空间："></a>堆空间：</h4><p>堆空间是java虚拟机中最大的一块内存空间，所有线程共享堆空间的内存。<code>String str = new String(&quot;hello world&quot;);</code>这个语句中new出来的对象就是存放在堆空间的。这部分空间也是GC算法主要工作的地方。在不同的GC算法下，对这块内存的管理也是不同的。关于GC算法待会再说。</p><h2 id="二、JVM配置参数"><a href="#二、JVM配置参数" class="headerlink" title="二、JVM配置参数"></a>二、JVM配置参数</h2><p>jvm的配置参数网上很多博客都有，这里列举一些比较常用的，但是不全。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-verbose:gc</td><td>打印gc</td></tr><tr><td>-XX:+PrintGCDetails</td><td>打印GC详细信息（最后打印）</td></tr><tr><td>-XX:+PrintGCTimeStamps</td><td>打印GC发生的时间戳</td></tr><tr><td>-Xloggc:log&#x2F;gc.log</td><td>指定GC log的输出位置</td></tr><tr><td>-XX:+PrintHeapAtGC</td><td>每次GC之后都打印堆信息</td></tr><tr><td>-XX:+TraceClassLoading</td><td>监听类的加载</td></tr><tr><td>-XX:+PrintClassHistogram</td><td>按下Ctrl+Break之后打印类的信息（序号、示例数量、总大小、类型）</td></tr></tbody></table><pre><code>    |-Xmx20m|最大堆20M|</code></pre><p>|-Xms20m|最小堆20M|<br>|-Xmn15m|新生代(eden+2<em>s)的大小|<br>|-XX:NewRatio|新生代(eden+2</em>s)和老年代的比|<br>        |-XX:SurvivorRatio|eden:s|<br>|-XX:+HeapDumpOnOutOfMemoryError|内存不足是导出堆到文件|<br>        |-XX:+HeapDumpPath|上一个导出的文件位置|<br>        |-XX:OnOutOfMemoryError|OOM时执行指定目录下的脚本|<br>        |-XX:PermSize|永久区的初始空间|<br>        |-XX:MaxPermSize|永久区的最大空间|<br>        |-Xss|栈空间分配（几百K就够了）|</p><h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><p>###对象的创建<br>在类加载检查通过后，虚拟机将为对象分配内存（上一篇文章中介绍了类的加载）。<br>在HotSpot（java虚拟机中的一种，最常用的一种）中，内存的分配方式有两种</p><ul><li>指针碰撞</li><li>空闲列表</li></ul><p>指针碰撞：如果java堆中的内存绝对规整，即是已分配的在一边，为分配的在另一边，中间用一个指针将二者区分开，这样下次分配的时候只需将指针移动一下即可；<br>空闲列表：如果java堆中的内存空间不是规整的，即是已分配的和未分配的内存空间是相互交织的，则虚拟机维护一个列表，列表上分别记录着那一块区域被使用，那一块未被使用，下一次分配的时候，从未分配中找到合适的大小给对象即可。这样的话就涉及到另外的一些问题，比如内存紧缩和空间分配问题，感觉上和操作系统中的内存管理可以采取同一策略。</p><p>空间的分配在并发下往往不是线程安全的，解决的策略有两种，一是对指正或者对表进行同步处理，加锁或者其他的一些策略，再则就是可以每个线程在内存分配的手，提前分配本地线程缓存（TLAB），线程仅可在分配的空间内分配空间，待分配的空间分配完之后再去申请TLAB。</p><p>###对象的内存布局<br>HotSpot中，对象分为三个部分</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><p>1）对象头<br>分为两个部分，第一部分用来存储对象自身的运行数据，如哈希码，GC分代年龄，锁状态标志，线程持有锁，偏向线程ID，偏向线程时间戳等信息，另一部分是类型指针，及对象指向它的类元数据指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果是数组，则对象头中还有一块用于记录数组长度的数据。</p><p>2）实例数据<br>运行时的数据，没什么好说的</p><p>3）对齐填充<br>无意义，仅仅是起到占位符的作用，因为在HotSpot中java对象的大小都是8字节的倍数，对象头是8的倍数，但是实例数据不一定，对齐填充用来补全实例数据中空缺的位数。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>目前主流的访问方式有使用句柄和直接指针两种。<br>（1）如果使用句柄访问的话，那么java堆中将会划分出一块内存来作为句柄池，referece中存储的就是对象的句柄地址，而句柄中包含了独享实例数据与类型数据各自的具体地址信息。</p><p>好处：reference中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中实例对象数据指针，而reference本身不需要修改。</p><p>（2）如果是使用直接指正访问，那么java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference终存储的直接就是对象的地址。</p><p>好处：速度快，它节省了依次指针地位的时间开销。</p><h2 id="四、对象的存亡"><a href="#四、对象的存亡" class="headerlink" title="四、对象的存亡"></a>四、对象的存亡</h2><h3 id="判断对象存亡的算法"><a href="#判断对象存亡的算法" class="headerlink" title="判断对象存亡的算法"></a>判断对象存亡的算法</h3><p>1）引用基计数算法<br>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器为0的对象就是不可能在被使用的，这个时候就可以进行回收。</p><p>采用引用计数算法的语言：Python,Squirrel,FlashPlayer</p><p>缺陷：无法解决循环引用，加入A引用B，B引用A，则两者的计数器的值永远不可能为0，此时这两个对象永远都不可能被回收。</p><p>2）可达性分析算法<br>通过一系列的GC Roots的对象作为起始点，从这些节点开始往下搜索，搜索所走过的路成为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明对象不可用。</p><p><img src="https://img.ncfl.tech/202305022323037.png" alt="这里写图片描述"></p><p>可作为GC Roots的对象：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法中JNI（Native）引用的对象</li></ul><p>采用可达性分析算法的语言：java C#</p><h3 id="对象的自救"><a href="#对象的自救" class="headerlink" title="对象的自救"></a>对象的自救</h3><p>要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC  Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做F-Queue的队列之中，并在稍后由一个由虚拟机自动建立的、低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的被回收了。</p><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此代码演示了两点：</span></span><br><span class="line"><span class="comment"> * 1.对象可以在被GC时自我拯救。</span></span><br><span class="line"><span class="comment"> * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 对象的自救 &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> 对象的自救 SAVE_HOOK = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;finalize mehtod executed!&quot;</span>);</span><br><span class="line">        对象的自救.SAVE_HOOK = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        SAVE_HOOK = <span class="keyword">new</span> 对象的自救();</span><br><span class="line">        <span class="comment">//对象第一次成功拯救自己</span></span><br><span class="line">        SAVE_HOOK = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">//因为finalize方法优先级很低，所以暂停0.5秒以等待它</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yes,i am still alive：)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;no,i am dead：(&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下面这段代码与上面的完全相同，但是这次自救却失败了</span></span><br><span class="line">        SAVE_HOOK = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">//因为finalize方法优先级很低，所以暂停0.5秒以等待它</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yes,i am still alive：)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;no,i am dead：(&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出：</span></span><br><span class="line"><span class="comment">     * finalize mehtod executed!</span></span><br><span class="line"><span class="comment">     * yes,i am still alive：)</span></span><br><span class="line"><span class="comment">     * no,i am dead：(</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、GC算法思想"><a href="#五、GC算法思想" class="headerlink" title="五、GC算法思想"></a>五、GC算法思想</h2><p>###标记-清除算法<br>标记-清除算法是最基础的算法，很多算法都是由此改进的。算法分成两个部分，标记和清除过程，首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。标记的方法就是根据上文中判断对象是否存活。</p><p><img src="https://img.ncfl.tech/202305022323954.png" alt="这里写图片描述"></p><p>不足：<br>效率：标记和清除过程效率都不高<br>空间：标记清除之后的空间不连续，不利于下次的空间分配。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>过程与标记-清除算法是一样的，但是在清除之前，让所有存活的对象都向一端移动，然后清除端边界以外的空间。这个算法主要用于老年代。</p><p><img src="https://img.ncfl.tech/202305022324813.png"></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>将可用内存空间按容量划分为两个大小一样的两块空间，每次只使用其中一块，当这一块内存使用完之后，将这一块内存中的存活对象移动到另一块内存中，然后清除已使用过的内存空间。</p><p><img src="https://img.ncfl.tech/202305022324297.png" alt="这里写图片描述"></p><p>优点：实现较简单，运行效率高<br>缺点：浪费了一半的内存</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>将对象进行分代管理，不同代使用不同的回收算法。</p><p>在HotSpot中将内存划分为新生代和老年代（分配担保Handle Promotion如果另一块survivor空间没有足够的空间存档上一次新生代手收集下来的存活对象时，这些对象就进入老年代），新生代又分为Eden区，from survivor区和to survivor区，一般两个survivor区的空间都不会大，在垃圾回收的时候，新生代采用的是复制算法，每次只使用from和to中的一个，加上这两个空间不大，所以空间的浪费不会很严重。在进行垃圾回收的时候，将Eden区和from区中的老年对象（每次垃圾回收都会对对象代数+1，多次垃圾回收之后仍存在的对象就是老年对象）和较大的对象（另一个survivor区无法存放的对象）移动到老年代中，然后将Eden和from中存活的对象移动到to区，清除Eden区和from区的空间。在老年代中采用的是标记-清除算法或者标志-整理算法。</p><p><img src="https://img.ncfl.tech/202305022324489.png" alt="这里写图片描述"></p><p>在GC算法中有一个叫做Stop The World 的概念，就是在进行GC的时候，必须停止除GC以外的全部进程避免其产生新的垃圾，但是Stop The World的时候可能会停止很长时间，为了避免这个问题，jvm采用了准确式GC，在HotSpot中使用称之为OopMap的数据结构来加快速度（与之相关的还有安全点和安全区域的概念，不是很懂。。。）</p><h2 id="六、-垃圾收集器"><a href="#六、-垃圾收集器" class="headerlink" title="六、 垃圾收集器"></a>六、 垃圾收集器</h2><p>垃圾收集器就是对内存回收的具体实现，主要有下面七种收集器：</p><p><img src="https://img.ncfl.tech/202305022325704.png" alt="这里写图片描述"></p><p> 关于这七种收集器的比较这里就不做记录了，感觉属于了解知识。java7和java8中用到的都是G1收集器</p><h3 id="垃圾收集器参数"><a href="#垃圾收集器参数" class="headerlink" title="垃圾收集器参数"></a>垃圾收集器参数</h3><p><img src="https://img.ncfl.tech/202305022325802.png" alt="这里写图片描述"></p><h2 id="七、Minor-GC和Full-GC（Major-GC）"><a href="#七、Minor-GC和Full-GC（Major-GC）" class="headerlink" title="七、Minor GC和Full GC（Major GC）"></a>七、Minor GC和Full GC（Major GC）</h2><p><a href="http://blog.csdn.net/u010796790/article/details/52213708">http://blog.csdn.net/u010796790/article/details/52213708</a></p><ul><li><p>新生代 GC（Minor GC）：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</p></li><li><p>老年代 GC（Major GC  &#x2F; Full GC）：指发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次的 Minor GC（但非绝对的，在 ParallelScavenge 收集器的收集策略里就有直接进行 Major GC 的策略选择过程） 。MajorGC 的速度一般会比 Minor GC 慢 10倍以上。</p></li><li><p>Minor GC触发机制：<br>当年轻代满时就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC</p></li><li><p>Full GC触发机制：<br>（1）调用System.gc时，系统建议执行Full GC，但是不必然执行<br>（2）老年代空间不足，同时回收年轻代、年老代<br>（3）方法去空间不足，会导致Class、Method元信息的卸载<br>（4）通过Minor GC后进入老年代的平均大小（概率计算得出）大于老年代的可用内存<br>（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础（3）jvm class文件解读</title>
      <link href="/post/38210/"/>
      <url>/post/38210/</url>
      
        <content type="html"><![CDATA[<p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8位字节进行存储。</p><p>以下面的程序分别读一下class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> m ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">inc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开class文件，以16进制的方式显示文件，我这里使用的是notepad++，然后安装了HEX-editor插件得到了下面的文件，当然也可以通过java程序读生成的class文件。（我这个得到的文件里面的数字和《深入java虚拟机》里面的不太一样，不太清楚是什么原因，但是大致上还是可以读的）</p><p><img src="https://img.ncfl.tech/202305022329730.png" alt="这里写图片描述"></p><p>在读文件之前，顺便说一下，jdk中提供了一个<code>javap</code>工具，可以对class文件解读，来试试看效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -verbose TestClass</span><br></pre></td></tr></table></figure><p><img src="https://img.ncfl.tech/202305022329496.png" alt="这里写图片描述"> </p><p>这个图片里面的内容中的大部分都会涉及到，部分不会涉及到，因为以目前的功底还看不懂。</p><p>一个class文件主要分成了下面这几个部分，下文也是从这几个部分一个一个读文件的。<br><img src="https://img.ncfl.tech/202305022329775.png" alt="这里写图片描述"></p><h3 id="魔数-magic-x2F-u4-次版本号-minor-version-x2F-u2-主版本号-major-version-x2F-u2"><a href="#魔数-magic-x2F-u4-次版本号-minor-version-x2F-u2-主版本号-major-version-x2F-u2" class="headerlink" title="魔数(magic&#x2F;u4)+次版本号(minor_version&#x2F;u2)+主版本号(major_version&#x2F;u2)"></a>魔数(magic&#x2F;u4)+次版本号(minor_version&#x2F;u2)+主版本号(major_version&#x2F;u2)</h3><p><img src="https://img.ncfl.tech/202305022329975.png" alt="这里写图片描述"></p><p>这部分几乎是固定的，cafebabe是所有标准的class文件都有的，称之为魔数(magic)，没什么研究的必要。0000 0034这几个其中0000表示jdk的次版本号(minor_version)，0034表示jdk的主版本号(major_version)，恰好对应用<code>javap- verbose</code>得到的中的<code>minor version: 0 major version: 52</code>。版本号主要对照下面的表（我的jdk版本是1.8）：</p><p><img src="https://img.ncfl.tech/202305022330085.png" alt="这里写图片描述"></p><h3 id="常量数量-constant-pool-count-x2F-u2"><a href="#常量数量-constant-pool-count-x2F-u2" class="headerlink" title="常量数量(constant_pool_count&#x2F;u2)"></a>常量数量(constant_pool_count&#x2F;u2)</h3><p><img src="https://img.ncfl.tech/202305022330824.png" alt="这里写图片描述"></p><p>0x0016&#x3D;22，表示的是该class中一共有22-1&#x3D;21个常量（有些常量是虚拟机自动生成的） 使用<code>javap -verbose</code>得到的也可以看到一共有从#1到#21，可见是21个常量</p><h3 id="常量池-constant-pool"><a href="#常量池-constant-pool" class="headerlink" title="常量池(constant_pool)"></a>常量池(constant_pool)</h3><p>下面图片中选中的部分就是这21个常量：</p><p><img src="https://img.ncfl.tech/202305022330904.png" alt="这里写图片描述"></p><p>要看懂这部分的内容主要是参照下面的表格（其中类型中的u1，u2分别表示1byte，2byte）：<br><img src="https://img.ncfl.tech/202305022330384.png" alt="这里写图片描述"></p><p>这里举例子读一个：</p><p><code>0a</code>等价于十进制的10，查表得tag&#x3D;10的为CONSTANT_Methodref_info。也可以得到接下来的四个字节为2个索引。</p><p><img src="https://img.ncfl.tech/202305022330855.png" alt="这里写图片描述"></p><p>故继续读接下来的四个字节，分别为<code>00 04 00 12</code>为十进制的4和18，所以这部分读出来的结果就是<br><code>#1 = Methodref          #4.#18</code>与<code>javap -verbose</code>得到的结果是一样的。</p><p>通过对照表格和ASCII编码等，既可以得到全部的21个常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #3.#19         // jvm/TestClass.m:I</span><br><span class="line">   #3 = Class              #20            // jvm/TestClass</span><br><span class="line">   #4 = Class              #21            // java/lang/Object</span><br><span class="line">   #5 = Utf8               m</span><br><span class="line">   #6 = Utf8               I</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Ljvm/TestClass;</span><br><span class="line">  #14 = Utf8               inc</span><br><span class="line">  #15 = Utf8               ()I</span><br><span class="line">  #16 = Utf8               SourceFile</span><br><span class="line">  #17 = Utf8               TestClass.java</span><br><span class="line">  #18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #19 = NameAndType        #5:#6          // m:I</span><br><span class="line">  #20 = Utf8               jvm/TestClass</span><br><span class="line">  #21 = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure><h3 id="访问标志-access-flags-x2F-u2"><a href="#访问标志-access-flags-x2F-u2" class="headerlink" title="访问标志(access_flags&#x2F;u2)"></a>访问标志(access_flags&#x2F;u2)</h3><p>在21个常量之后的两个字节为<code>00 21</code>这个表示的class文件对应的类（接口）的一些访问信息。查下面的可以得到0021对应的应该是<code>ACC_PUBLIC</code>和<code>ACC_SUPER</code>这两个的结合，通过这个信息就可以知道，这个类为public类型的，同时既不是抽象类也不是接口，同时也不是注解或者枚举。对应的<code>javap -verbose</code>得到的就是常量池上面的<code>flags: ACC_PUBLIC, ACC_SUPER</code></p><p><img src="https://img.ncfl.tech/202305022331351.png" alt="这里写图片描述"></p><h3 id="类索引-this-class-x2F-u2-父类索引-super-class-x2F-u2-接口索引-interface-count-x2F-u2"><a href="#类索引-this-class-x2F-u2-父类索引-super-class-x2F-u2-接口索引-interface-count-x2F-u2" class="headerlink" title="类索引(this_class&#x2F;u2) 父类索引(super_class&#x2F;u2) 接口索引(interface_count&#x2F;u2)"></a>类索引(this_class&#x2F;u2) 父类索引(super_class&#x2F;u2) 接口索引(interface_count&#x2F;u2)</h3><p>类索引和父类索引都是一个u2类型的数据，而接口索引集合是一组u2类型的数据的集合，Class文件中由这三项数据来确定这个类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。由于Java语言不允许多重继承，所以父类索引只有一个，除了java.lan g .Object之外，所有的Java类都有父类，因此除了java.lan g .Object外，所有Java类的父类索引都不为0。接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements语句（如果这个类本身是一个接口，则应当是extends语句）后的接口顺序从左到右排列在接口索引集合中。</p><p>在访问标志之后的6个字节为<code>00 03 00 04 00 00</code>分别表示的是类的名字为常量池03号的类，继承的类为04号的类，接口的个数为0。查看常量池，可得，03号类对应的类的名字在20号中，为<code>jvm/TestClass</code>，04号对应的类的名字的21号中，为<code>java/lang/Object</code>。由于这个文件中没有继承接口，所以关于接口(interfaces)的信息这里就没有体现 。</p><h3 id="字段数量-fields-count-x2F-u2-和字段信息-fields"><a href="#字段数量-fields-count-x2F-u2-和字段信息-fields" class="headerlink" title="字段数量(fields_count&#x2F;u2)和字段信息(fields)"></a>字段数量(fields_count&#x2F;u2)和字段信息(fields)</h3><p>接下来的两个字节为<code>00 01</code>表示的是这个文件下有1个字段，查看源代码，也可以看出只申明了一个m字段，类型是int，访问权限是private。<br>关于这个m属性的信息在class文件中也是有体现的，接下来的8个字节为<code>00 02 00 05 00 06 00 00</code>分别对应的是下面的信息：</p><p><img src="https://img.ncfl.tech/202305022331751.png" alt="这里写图片描述"></p><p>一一对照，可以得到访问权限(access_flags)是00 02，名字对应的索引(name_index)为00 05，描述所对应的索引(descriptor_index)为00 06，属性数目(attributes_count)为00 00，因为属性数目为0，所以属性信息这里也没有显示。关于属性的范围内权限，可以查看下表，得到的为private，名字对应常量池中的5号，为m，类型对应的常量池中的6号，为()I，()I所代表的含义通过查下表可得为int，所以就可以得到<code>private int m;</code>这个语句。</p><p><img src="https://img.ncfl.tech/202305022331950.png" alt="这里写图片描述"></p><p><img src="https://img.ncfl.tech/202305022331208.png" alt="这里写图片描述"></p><p>###方法数量(methods_count&#x2F;u2)和方法信息(methods)<br>在部分读的方法和字段的方法几乎是相同的。在字段之后的两个字节表示方法的数量，此处为<code>00 02</code>，即是有两个方法，但是查看源文件，明明只有声明一个方法为什么会有两个方法呢？熟悉java的，应该都知道java会自动生成一个构造函数，所以另一个方法就是构造函数。</p><p><img src="https://img.ncfl.tech/202305022331773.png" alt="这里写图片描述"></p><p>在方法数目之后为<code>00 01 00 07 00 08 00 01</code>，与字段相同，但是方法的访问权限或者访问控制更多。参照上表和下表，可知，访问权限位public（0001），名字为<init>（0007），返回类型void（0008）（这里有一个疑问，明明构造函数没有返回值，为什么这里用的是()V），属性的数目为1个（0001），接下来的从地址偏移000000e0b-000001200描述的都是这个属性表中的内容。</p><p><img src="https://img.ncfl.tech/202305022331668.png" alt="这里写图片描述"></p><p>关于属性表中的信息又可以分为几个部分</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p><img src="https://img.ncfl.tech/202305022332283.png" alt="这里写图片描述"></p><p>对应着表格，可以读出这部分的内容，<code>00 09</code>表示这Code这个词(Attribute_name_index)，指向常量池中的Code单词，为固定值，代表着该属性的名称。<code>00 00 00 2f</code>代表着该属性值的长度(attribute_length)，这个默认生成的构造函数的长度为接下来的37个字节。<code>00 01</code>表示操作数栈(max_stack)深度的最大值，虚拟机在加载类的时候就是根据这个值分配张帧中的操作数栈深度。接下来的<code>00 01</code>表示局部变量表的存储空间(max_locals)，这里的单位为Slot（四个字节），接下来的<code>00 00 00 05</code>表示代码编译之后形成的字节码的长度(code_length)，这里表示接下来的五个字节就是函数对应的字节码，为<code>2a b7 00 01 b1</code>，字节码对应的指令可以通过<a href="http://blog.csdn.net/coslay/article/details/49725879">http://blog.csdn.net/coslay/article/details/49725879</a>这里去查看，逐个对应之后得到，就可以得到Code中的字节码的含义。接下来的<code>00 00</code>表示的是抛出的异常的长度(exception_table_length)，这里没有抛出异常，所以也就没有exception_table属性，在接下来为<code>00 02</code>对照表格这个应该是attribute_count的值，但是这个值不为0，意味着接下来应该还有2个字节是attribute的内容，但是接下来的并不是attribute的值，所以这两个字节的含义暂时不是很懂，先放着。</p><p>对应着<code>javap -verbose</code>得到的就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=1, args_size=1</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        4: return</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="LineNumberTable"><a href="#LineNumberTable" class="headerlink" title="LineNumberTable"></a>LineNumberTable</h4><p>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。它并不是运行时必需的属性，但默认会生成到Class文件之中，如果选择不生成LineNumberTable属性，对程序运行产生的最主要的影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。</p><p><img src="https://img.ncfl.tech/202305022332846.png" alt="这里写图片描述"></p><figure class="highlight plaintext"><figcaption><span>0a```表示名字的索引(attribute_name_index)，这里就是LineNumberTable，```00 00 00 06```表示的是属性的长度(attribute_length)，为6，```00 01```表示的是表格的长度，这里是1，接下来是line_number_info。line_number_info表包括了start_pc和line_number两个u2类型的数据项，前者是字节码行号，后者是Java源码行号。这里```00 00```和```00 07```分别代表的就是字节码行号和Java源码行号。对应```java -verbose```就是</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">LineNumberTable:</span><br><span class="line">        line 7: 0</span><br></pre></td></tr></table></figure><h4 id="LocalVariableTable"><a href="#LocalVariableTable" class="headerlink" title="LocalVariableTable"></a>LocalVariableTable</h4><p>LocalVariableTable属性用于描述栈帧中局部变量表中的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性，但默认会生成到Class文件之中，如果没有生成这项属性，最大的影响就是当其他人引用这个方法时，所有的参数名称都将会丢失，IDE将会使用诸如arg0、arg1之类的占位符代替原有的参数名。<br><img src="https://img.ncfl.tech/202305022332568.png" alt="这里写图片描述"></p><p><img src="https://img.ncfl.tech/202305022332869.png" alt="这里写图片描述"></p><p>start_pc和length属性分别代表了这个局部变量的生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合起来就是这个局部变量在字节码之中的作用域范围。<br>name_index 和descriptor_index 都是指向常量池中CONSTANT_Utf8_info型常量的索引，分别代表了局部变量的名称以及这个局部变量的描述符。<br>index 是这个局部变量在栈帧局部变量表中Slot的位置。当这个变量数据类型是64位类型时(double和long)，它占用的Slot为index 和index +1两个。<br>故读出来就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       7     0  this   Ljvm/TestClass;</span><br></pre></td></tr></table></figure><p>接下来的为<code>00 01 00 0e 00 0f 00 01</code>表示的就是第二个方法inc方法了，读的方式一模一样，这里就不赘述了。</p><h4 id="SourceFile"><a href="#SourceFile" class="headerlink" title="SourceFile"></a>SourceFile</h4><p>这里说一下，倒数第九和第十这个两个字节暂时还不知道是什么意思。</p><p>SourceFi le属性用于记录生成这个Class文件的源码文件名称。对于SourceFile的读取主要参照下表，为最后的八个字节，最后读出来是<code>SourceFile: &quot;TestClass.java&quot;</code></p><p><img src="https://img.ncfl.tech/202305022332322.png" alt="这里写图片描述"></p></br><p>到这里基本上整个class文件就读完了。但是说一下，这部分内容个人感觉了解就好，或者知道是怎么回事就好了，因为毕竟这部分内容根本不可能靠人工去读，现在也有很多成熟的工具来读这部分的内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础（2）jvm类加载</title>
      <link href="/post/17469/"/>
      <url>/post/17469/</url>
      
        <content type="html"><![CDATA[<p>最近想了解一下jvm，这里简单的做一下笔记。</p><h2 id="一、类的初始化"><a href="#一、类的初始化" class="headerlink" title="一、类的初始化"></a>一、类的初始化</h2><h3 id="在java中类的加载初始化主要分为下面三个步骤："><a href="#在java中类的加载初始化主要分为下面三个步骤：" class="headerlink" title="在java中类的加载初始化主要分为下面三个步骤："></a>在java中类的加载初始化主要分为下面三个步骤：</h3><ul><li><p>加载<br>  寻找并加载二进制数据</p></li><li><p>连接<br>  验证：确保被加载的类的正确性<br>  准备：为类的静态变量分配内存，并将其初始化为默认值<br>  解析：把类中的符号引用转化为直接引用</p></li><li><p>初始化<br>  为类的静态变量赋予正确的初始化值&#x2F;&#x2F;这里指的是程序员给的初始值</p></li></ul><p>下面的内容将分别从上面的几个方面展开。</p><h2 id="二、类的加载"><a href="#二、类的加载" class="headerlink" title="二、类的加载"></a>二、类的加载</h2><h3 id="类的初始化只会在类的初次主动使用才会进行。"><a href="#类的初始化只会在类的初次主动使用才会进行。" class="headerlink" title="类的初始化只会在类的初次主动使用才会进行。"></a>类的初始化只会在类的初次主动使用才会进行。</h3><p>类的主动使用（6种情况）</p><ul><li>创建类的示例</li><li>访问类的某个类或者接口的静态变量，或者对静态变量赋值</li><li>调用类的静态方法</li><li>反射（Class.forName(“”);）</li><li>初始化一个类的实例</li><li>java虚拟机启动时被标明为启动类的类（就是执行的main方法类）</li></ul><p>即是说只有发生上面6中情况中的一种才会导致类的初始化，其他的情况类是不会运行的。jvm会预先加载类文件，如果类文件缺失或者存在错误的时候，jvm是不会报错的，只有在类的第一次初始化的时候才会报错，所以项目中有时候存在有错误的文件的时候项目也是可以运行的，只有运行到错误的地方才会报错，之前的地方都不会报错。</p><p>类的加载是指将类的.class文件中的二进制数据读入到内存中，将其放在运行时的方法区内，然后在堆内创建一个java.lang.Class对象用来封装在方法区内的数据结构。（关于堆，栈，方法区等在后续的文章中会继续做笔记的）</p><p>寻找.class 的文件主要是从项目下生成的.class文件和引入的jar包中.class文件。</p><p>Java 虚拟机自带了以下几种加载器。</p><p>根(Bootstrap) 类加载器: 该加载器没有父加载器。它负责加载虚拟机的核心类库,如java.lang.* 等。例如从例程10-4( Sample.java )可以看出，java.lang.0bject就是由根类加载器加载的。根类加载器从系统属性sun.boot.class.path 所指定的目录中加载类库。根类加载器的实现依赖于底层操作系统，属于虚拟机的实现的一部分，它并没有继承java.lang.ClassLoader 类。</p><p>扩展(Extension) 类加载器:它的父加载器为根类加载器。它从java.ext.dirs系统属性所指定的目录中加载类库，或者从JDK 的安装目录的jre\lib\ext 子目如果把用户创建的JAR 文件放在这个目录下,录(扩展目录) 下加载类库,也会自动由扩展类加载器加载。扩展类加载器是纯Java 类，是java.lang.ClassLoader 类的子类。</p><p>系统(System) 类加载器: 也称为应用类加载器，它的父加载器为扩展类加<br>载器。它从环境变量classpath 或者系统属性java.class.path 所指定的目录中加载类，它是用户自定义的类加载器的默认父加载器。系统类加载器是纯Java类，是:java,lang.ClassLoader 类的子类。</p><p>网上盗的图片：主要是说明每个加载器对应加载的文件：</p><p><img src="https://img.ncfl.tech/202305022320619.png" alt="这里写图片描述"></p><p>在类加载器中，遵循父亲委托机制，简单讲就是能用父亲加载器的就是用父亲加载器，不能用父亲加载器的就用自己的加载器。同时在加载器中的父子关系并不一定是继承关系，只是说明了加载顺序而已，即是先用哪个加载器，再用哪个加载器，在自定义的加载器中可以指明父亲加载器。</p><p>用代码小小的测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">test01();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出的是null，表示用的是根类加载器，（用null表示根类加载器）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象的其中两种方式</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazzz</span> <span class="operator">=</span> _ClassLoader.class.getClassLoader().loadClass(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">System.out.println(clazzz.getClassLoader());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出的是sun.misc.Launcher$AppClassLoader@73d16e93</span></span><br><span class="line"><span class="comment"> * 表示自己定义的类是有AppClassLoader加载的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;jvm.C&quot;</span>);</span><br><span class="line">System.out.println(clazz.getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、类的连接"><a href="#二、类的连接" class="headerlink" title="二、类的连接"></a>二、类的连接</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证阶段是确保被加载的类的正确性，主要通过下面几个方面验证：</p><ul><li><p>类文件的结构检查：确保类文件遵从Java类文件的固定格式。</p></li><li><p>语义检查：确保类本身符合Java语言的语法规定，比如验证final类型的类没有子类，以及final类型的方法没有被覆盖。</p></li><li><p>字节码验证：确保字节码流可以被Java虚拟机安全的执行。字节码流代表Java方法（包括静态方法和实例方法），它是由被称做操作码的单字节指令组成的序列，每一个操作码后都跟着一个或多个操作数。字节码验证步骤检查每个操作码是否合法，即是否有着合法的操作数。</p></li><li><p>二进制兼容的验证：确保相互的类之间协调一致。例如在Worker类的gotoWork()方法中会调用Car类的run()方法。Java虚拟机在验证Worker类时，会检查在方法区内是否存在Car类的run()方法，假如不存在（当Worker类和Car类的版本不兼容，就会出现这种问题），就会抛出NosuchMethodError错误。</p></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是为类的静态变量分配内存，并将其初始化为默认值：</p><p>| 类型| 所占内存大小| 默认值|<br>| :————- |:————-|: —–|<br>| boolean |1字节 | false|<br>| byte | 1字节| 0|<br>| short| 2字节|  0|<br>| char| 2字节|  \u0000(输出是一个方框)|<br>| int| 4字节|  0|<br>| long| 8字节| 0 |<br>| float| 4字节|0.0f  |<br>| double| 16字节|  0.0d|</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>在解析阶段，Java虚拟机会把类的二进制数据中的符号引用替换为直接引用。</p><p>在Worker类的二进制数据中，包含了一个对Car类的run()方法的符号引用，它由run()方法的全名和相关描述符组成。在解析阶段，Java虚拟机会把这个符号引用替换为一个指针，该指针指向Car类的run()方法在方法区内的内存位置，这个指针就是直接引用。</p><h2 id="三、类的初始化"><a href="#三、类的初始化" class="headerlink" title="三、类的初始化"></a>三、类的初始化</h2><p>初始化阶段主要是为类的静态变量赋予正确的初始值。</p><p>在初始化阶段，Java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。在程序中，静态变量的初始化有两种途径：（1）在静态变量的声明处进行初始化；（2）在静态代码块中进行初始化。例如在以下代码中，静态变量a和b都被显示初始化，而静态变量c没有被明显初始化，它将保持默认值0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sample</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> a=<span class="number">1</span>;<span class="comment">//在静态变量声明处初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> c;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">b=<span class="number">2</span>;<span class="comment">//在静态代码块中初始化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、类的初始化顺序"><a href="#四、类的初始化顺序" class="headerlink" title="四、类的初始化顺序"></a>四、类的初始化顺序</h2><p>子类只有在父类初始化完成之后才会初始化，在第一次初始化子类的时候，会先去检查父类是否初始化，若未初始化，则先初始化父类，在初始化子类。但是这一点不适合在接口：</p><ul><li>在初始化一个类时，并不会先初始化他所实现的父类；</li><li>在初始化一个借口的时候，并不是先初始化他的父接口；</li></ul><p>只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化；</p><p>属性、方法、构造方法和自由块都是类中的成员，在创建类的对象时，类中各成员的执行顺序：<a href="http://blog.csdn.net/lgfeng218/article/details/7606735">http://blog.csdn.net/lgfeng218/article/details/7606735</a><br>1.父类静态成员和静态初始化快，按在代码中出现的顺序依次执行。<br>2.子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。<br>3. 父类的实例成员和实例初始化块，按在代码中出现的顺序依次执行。<br>4.执行父类的构造方法。<br>5.子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。<br>6.执行子类的构造方法。 </p><h2 id="五、一些简单的示例："><a href="#五、一些简单的示例：" class="headerlink" title="五、一些简单的示例："></a>五、一些简单的示例：</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + test.i + <span class="string">&quot;   j=&quot;</span> + test.j);<span class="comment">//i=1   j=0</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + test1.i + <span class="string">&quot;   j=&quot;</span> + test1.j);<span class="comment">//i=1   j=1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">test</span> <span class="variable">_test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">test1</span> <span class="variable">_test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面两个类唯一的区别只有<code>private static test1 _test = new test1();</code>这个语句的位置而已，但是输出的结果却是完全不同的。原因就是连接和初始化过程。</p><p>在test中，类在初始化的时候，先加载了三个变量_test,i,j这三个，然后分别分配空间，并初始化为默认值，分别为null，0,0这三个值，然后，先进行_test的初始化，即对i和j自增，然后i，j的值变为1,1，而后在j初始化的时候j的值重新被赋值为0，所以输出的是<code>i=1   j=0</code></p><p>在test1类中同理，只是在初始化的顺序有不同。默认值i，j，_test1的值0,0，null，程序员没有指定i的值，所以i还是等0，程序员指定了j&#x3D;0，所以j等于0，而后初始化_test1的值，对i，j的值自增，故输出<code>i=1   j=1</code></p><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(test01.i);<span class="comment">//2</span></span><br><span class="line">System.out.println(test02.i);<span class="comment">//2</span></span><br><span class="line">System.out.println(test03.i);<span class="comment">//test03 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test01&quot;</span>);<span class="comment">// 直接把2赋值给j，故此时不会输出静态代码块，即不会加载当前类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">6</span> / <span class="number">3</span>;<span class="comment">// 编译器直接计算成6/3=2，然后把2赋值给j，故此时不会输出静态代码块，即不会加载当前类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()*<span class="number">10</span>);<span class="comment">// 需要在运行的时候才能获得j的值，所以这个时候会输出静态代码块，即会加载当前类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test03&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类的调用的时候，如果给静态变量直接赋值或者编译器能直接计算出结果的值的话，则不会导致类的初始化，如果需要运行<code>public static final int i = (int)(Math.random()*10);</code>才能知道的话则会导致类的初始化。</p><h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 不会初始化子类 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于下面的变量和方法都是在parent中定义的，故使用child调用的时候，也不会加载child类</span></span><br><span class="line">System.out.println(child.a);</span><br><span class="line">child.dosomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">dosomething</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;parent dosomething&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">child</span> <span class="keyword">extends</span> <span class="title class_">parent</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cjild&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只有当程序访问的静态变量或者静态方法确实在当前类或当前接口中定义的时候，才被认为是类或者接口的主动使用；</p><h3 id="示例4："><a href="#示例4：" class="headerlink" title="示例4："></a>示例4：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_ClassLoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;jvm.A&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazzz = Class.forName(<span class="string">&quot;jvm.A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * -----------------</span></span><br><span class="line"><span class="comment"> * Load Class A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Load Class A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用ClassLoader类的loadClass方法加载一个类并不是对类的主动使用，不会导致类的初始化；但是使用Class.forName(“”)就是对类的主动使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础（1）IO流操作</title>
      <link href="/post/55206/"/>
      <url>/post/55206/</url>
      
        <content type="html"><![CDATA[<p>java流是java基础中很重要的一个部分，也是经常在面试中被问到的内容。这部分内容个人感觉还有有一点java基础之后在回来看这些东西比较会有深刻的印象，毕竟如果是初学者的话这部分知识是很少用到的，用不到的东西就很容易忘记。</p><h2 id="一、编码问题"><a href="#一、编码问题" class="headerlink" title="一、编码问题"></a><strong>一、编码问题</strong></h2><p>编码问题一直是写代码中一个比较常见的问题</p><p>java中代码的的默认编码是项目一开始设置的编码。</p><p>下面是最常用的编码格式：</p><ul><li>utf-8 ————–中文三个字节，英文一个字节</li><li>gbk—————中文两个字节，英文一个字节</li><li>utf-16————中文三个字节，英文两个字节</li><li>utf-16be———中文两个字节，英文两个字节</li></ul><p>可以用代码来测试一下，我的项目默认的编码格式是UTF-8的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;测试ABCD&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] b1 = x.getBytes();</span><br><span class="line">System.out.println(<span class="string">&quot;UTF-8编码，项目默认的编码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : b1) &#123;</span><br><span class="line">System.out.print(Integer.toHexString(b &amp; <span class="number">0xff</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] b2 = x.getBytes(<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;gbk编码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : b2) &#123;</span><br><span class="line">System.out.print(Integer.toHexString(b &amp; <span class="number">0xff</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] b3 = x.getBytes(<span class="string">&quot;utf-16&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;utf-16编码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : b3) &#123;</span><br><span class="line">System.out.print(Integer.toHexString(b &amp; <span class="number">0xff</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] b4 = x.getBytes(<span class="string">&quot;utf-16be&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;utf-16be编码&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : b4) &#123;</span><br><span class="line">System.out.print(Integer.toHexString(b &amp; <span class="number">0xff</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UTF-8编码，项目默认的编码</span><br><span class="line">e6 b5 8b e8 af 95 41 42 43 44 </span><br><span class="line">gbk编码</span><br><span class="line">b2 e2 ca d4 41 42 43 44 </span><br><span class="line">utf-16</span><br><span class="line">fe ff 6d 4b 8b d5 0 41 0 42 0 43 0 44 </span><br><span class="line">utf-16be</span><br><span class="line">6d 4b 8b d5 0 41 0 42 0 43 0 44 </span><br></pre></td></tr></table></figure><h2 id="二、IO流体系"><a href="#二、IO流体系" class="headerlink" title="二、IO流体系"></a><strong>二、IO流体系</strong></h2><p>从别人的网站上盗的图，在IO操作中主要是包括字符流和字节流，字符流就是一个字一个字的读取或者写入，比如“测试ABCD”要写入或者读出的时候就是逐个字符操作，“测”“试”“A”“B”“C”“D”这样逐个操作；字节流就是将内容转化为字节流在操作，比如“测试ABCD”在操作的时候转化为UTF-8编码时，就是e6 b5 8b e8 af 95 41 42 43 44 逐个操作。</p><p>字符流的都是继承自Reader或者Writer，字节流的都是继承自InputStream或者OutputStream；本文会主要介绍其中比较常用的类，其他的用法几乎相同，可自行查看文档。</p><p>需要注意的时候在操作IO流的时候需要在最后将流全部关闭。</p><p><img src="https://img.ncfl.tech/202305022317920.jpeg" alt="这里写图片描述"></p><h2 id="三、随机存取文件RandomAccessFile"><a href="#三、随机存取文件RandomAccessFile" class="headerlink" title="三、随机存取文件RandomAccessFile"></a><strong>三、随机存取文件RandomAccessFile</strong></h2><p>如果操作的是文件，那么还可以使用RandomAccessFile来读写文件。</p><p>RandomAccessFile传入的参数是File类和文件的读写权限</p><p>在IO中主要的方法是read和write方法，在RandomAccessFile中扩张了很多的方法，如writeInt(int i),writeChars(String s)等方法，readInt(),readLine()等方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test.txt&quot;</span>);</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);<span class="comment">//后一个参数指定文件的权限，这里是可读写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;我就测试测试看看行不行\n&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes = test.getBytes(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//将要写进文件的内容转化为字节数组后写入。</span></span><br><span class="line">raf.write(bytes);<span class="comment">//写进文件</span></span><br><span class="line"><span class="comment">//write方法中可传进的参数种类很多，自行查看文档，选择合适的方法</span></span><br><span class="line"></span><br><span class="line">raf.seek(<span class="number">0</span>);<span class="comment">//必须定位一下位置，否则从最后写的位置开始读</span></span><br><span class="line"><span class="type">byte</span>[] r = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) raf.length()];</span><br><span class="line">raf.read(r);<span class="comment">//读文件</span></span><br><span class="line"><span class="comment">//read方法扩展了很多其他的方法，自行查看文档，选择合适的方法</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(r));</span><br><span class="line">raf.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用Scanner</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/ES笔记一.txt&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(f);</span><br><span class="line"><span class="keyword">while</span>(in.hasNext())</span><br><span class="line">System.out.println(in.nextLine());</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中还有Scanner方法读取文件的方法，就是将File对象创建Scanner中之后就可以想操作从控制台输入数据那样操作数据了，之前都是使用这种的，比较好记，这里顺便提一下。</p><h2 id="四、字节流"><a href="#四、字节流" class="headerlink" title="四、字节流"></a><strong>四、字节流</strong></h2><p>个人感觉采用字节流的场合比采用字符流的场合要多，因为在网络传输中，大多是以字节为单位传输的。</p><p>在字节流中主要的操作主要是通过实例化InputStream的不同实现，然后从InputStream中的read获取字节，这里主要采用的是byte数组，这样的效率相对而言比较高。文件在做读取操作的时候，若read返回-1，则表示文件读到文件的结尾了。要输出字节流则通过实例化OutputStream的不同实现，然后通过write方法进行写操作，这里也一般采用byte数组。</p><p>下面的代码主要实现的是文件的复制操作，也是在Web中应用比较广泛的一种示例。</p><p>FileInputStream——-文件操作，最基本的文件操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $FileInputStream() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/ES笔记一.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);<span class="comment">// 输入流</span></span><br><span class="line"><span class="type">byte</span>[] a = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 字节数组，相当于批量读取</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test.txt&quot;</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);<span class="comment">// 输出流</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((n = is.read(a)) != -<span class="number">1</span>) &#123;<span class="comment">// 文件拷贝</span></span><br><span class="line">System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(a));</span><br><span class="line">os.write(a, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">os.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataInputStream————对文件处理的很多方法进行封装，例如，在InputStream中，若要读取一个int数据，由于读取的时候只能一次读取8个字节，所以一个int数据需要连续读取四次才能读取完成，在DataInputStream就对这种方法进行了封装。可以自行去看源代码（这部分的源代码很容易看的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $DataInputStream() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test.txt&quot;</span>);</span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] a = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test2.txt&quot;</span>);</span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line">System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(a, <span class="number">0</span>, n));</span><br><span class="line"><span class="keyword">while</span> ((n = dis.read(a)) != -<span class="number">1</span>) &#123;</span><br><span class="line">dos.write(a, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dos.close();</span><br><span class="line">os.close();</span><br><span class="line">dis.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferInputStream————通过使用缓存来进一步提高读写速度<br>，需要注意的是使用这种方法的时候一定要通过flush提交缓存池里面的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $BufferInputStream() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is, <span class="number">1024</span> * <span class="number">2</span>);</span><br><span class="line"><span class="type">byte</span>[] a = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test2.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line"><span class="keyword">while</span> ((n = bis.read(a)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(a, <span class="number">0</span>, n));</span><br><span class="line">bos.write(a, <span class="number">0</span>, n);</span><br><span class="line">bos.flush();<span class="comment">// 记得要flush提交缓存，</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">is.close();</span><br><span class="line">bos.close();</span><br><span class="line">os.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、字符流"><a href="#五、字符流" class="headerlink" title="五、字符流"></a><strong>五、字符流</strong></h2><p>对于IO流基本操作是一样的，字符流和字节流的操作是一样的。</p><p>在进行文件的输出的时候，可以采用PrintWriter&#x2F;OutputStreamWriter这两种，这两种唯一的不同的是输出空格的方法，其实相差无几，这里不做比较了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test3.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>[] a = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/test4.txt&quot;</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fout);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os);</span><br><span class="line"><span class="keyword">while</span> ((n = isr.read(a)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(a));</span><br><span class="line">osw.write(a, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">osw.close();<span class="comment">//顺便说一个这个关闭的顺序需要先开的后关</span></span><br><span class="line">os.close();</span><br><span class="line">isr.close();</span><br><span class="line">is.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、对象的序列化"><a href="#六、对象的序列化" class="headerlink" title="六、对象的序列化"></a><strong>六、对象的序列化</strong></h2><p>在网络的传输中，一般都是字节流的，所以一个对象在网络传输中需要讲对象序列化成字节流，在java中只要对象实现了Serializable接口就可以将对象序列化，这个接口内部是没有任何实现的方法就是相当于一个标志。</p><p>假设有一个Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line"><span class="comment">//setter...</span></span><br><span class="line"><span class="comment">//getter...</span></span><br><span class="line"><span class="comment">//toString...</span></span><br><span class="line"><span class="comment">//Constructor...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的序列化需要使用到的是ObjectInputStream类，将Student对象传进ObjectInputStream即可实现序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $ObjectInputStream() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/testObject.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wahahah&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1</span>);</span><br><span class="line">oos.writeObject(student);</span><br><span class="line">oos.flush();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:/Users/nc硪fl/Desktop/testObject.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">System.out.println((Student) ois.readObject());</span><br><span class="line"></span><br><span class="line">ois.close();</span><br><span class="line">is.close();</span><br><span class="line">oos.close();</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若对象中的属性不想实现序列化，则可以使用transilent关键字修饰属性，被修饰的属性就不会被序列化，下面的代码中sex属性就不会被序列化，就是在文件传输过程中，这个属性的值，或者说这个属性就不会被传输。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> sex;</span><br><span class="line"><span class="comment">//setter...</span></span><br><span class="line"><span class="comment">//getter...</span></span><br><span class="line"><span class="comment">//toString...</span></span><br><span class="line"><span class="comment">//Constructor...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、使用IO流的地方"><a href="#七、使用IO流的地方" class="headerlink" title="七、使用IO流的地方"></a><strong>七、使用IO流的地方</strong></h2><p>基本上只要涉及到传输问题的都用的到IO流，这里主要介绍两个最近见得比较多的地方。</p><p>###文件传输</p><p>在SpringMVC中可以只用MultipartFile中的transferTo直接将文件写在服务器或者本地，其实只要点进去源代码就会最里面的源码和上面给出的示例代码其实是差不多的。这里不做介绍。把源代码放出来看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">copyLarge</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">boolean</span> <span class="variable">n</span> <span class="operator">=</span> <span class="literal">false</span>; -<span class="number">1</span> != (n1 = input.read(buffer)); count += (<span class="type">long</span>) n1) &#123;</span><br><span class="line">output.write(buffer, <span class="number">0</span>, n1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###TCP接口编程</p><p>用java实现TCP通信，主要就是通过这个方式，一个进程作为客户端，另一个进程作为服务端，二者互相通讯的时候就是通过IO流的：</p><p>这是客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向服务器发送数据</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;这是客户端发出的&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取服务器的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">&quot;我是来自服务器的数据&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取客户端传过来的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buff);</span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">&quot;客户端IP&quot;</span> + s.getInetAddress().getHostAddress());</span><br><span class="line">System.out.println(<span class="string">&quot;我是客户端的数据&quot;</span> + <span class="string">&quot;::&quot;</span> + data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向客户端发送数据</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;这是服务器发出的&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动服务端的代码，监听是否有用户访问，然后启动客户端的代码，在客户端的控制台中输入两者通信的内容，即可在服务端的接收到信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（6）SpringSecurity</title>
      <link href="/post/16087/"/>
      <url>/post/16087/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringSecurity介绍"><a href="#SpringSecurity介绍" class="headerlink" title="SpringSecurity介绍"></a><strong>SpringSecurity介绍</strong></h2><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p><p>应用级别的安全主要分为“验证( authentication) ”和“(授权) authorization ”两个部分。这也是Spring Security主要需要处理的两个部分。“ Authentication ”指的是建立规则( principal )的过程。规则可以是一个用户、设备、或者其他可以在我们的应用中执行某种操作的其他系统。” Authorization “指的是判断某个 principal 在我们的应用是否允许执行某个操作。在 进行授权判断之前，要求其所要使用到的规则必须在验证过程中已经建立好了。</p><p>除了验证机制， Spring Security 也提供了一系列的授权能力。主要感兴趣的是以下三个方面：</p><ol><li>对web请求进行授权</li><li>授权某个方法是否可以被调用</li><li>授权访问单个领域对象实例</li></ol><p>关于SpringSecurity的学习主要是参考<a href="http://www.tianshouzhi.com/api/tutorials/spring_security_4/250">http://www.tianshouzhi.com/api/tutorials/spring_security_4&#x2F;250</a>，这里面还提供了对源码的解读，对于我这种渣渣来说，看起来还是有点费劲的</p><p>在Springsecurity中有两种配置方式，是xml文件配置和java配置，两者配置差别不打，个人感觉java配置使用起来比较方便，所以主要记录一下java配置的过程。</p><h2 id="java基本配置"><a href="#java基本配置" class="headerlink" title="java基本配置"></a><strong>java基本配置</strong></h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个SpringBoot项目，pom.xml中需要的包（勾选或者直接手写）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devtools</span><br><span class="line">thymeleaf</span><br><span class="line">security</span><br></pre></td></tr></table></figure><p>在pom中添加这三个包之后，可以启动项目看看，访问项目下的任意一个路径都会被拦截要求输入用户名和密码，由于啥都还没有设置，所以用户名是<code>user</code>，密码在启动springboot的时候在console输出了，类似<code>f1ea0b2d-b053-40fd-abc5-065a4f45b266</code>这样的一串就是默认密码。</p><p><img src="https://img.ncfl.tech/202305022312176.png" alt="这里写图片描述"></p><p><img src="https://img.ncfl.tech/202305022312617.png" alt="这里写图片描述"></p><h3 id="配置自己的用户名密码"><a href="#配置自己的用户名密码" class="headerlink" title="配置自己的用户名密码"></a>配置自己的用户名密码</h3><p>在项目根目录下添加<code>SecurityConfig.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">auth</span><br><span class="line">.inMemoryAuthentication()</span><br><span class="line">.withUser(<span class="string">&quot;user&quot;</span>).password(<span class="string">&quot;password&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问任意一个URL都会跳转到下面这个界面</p><p><img src="https://img.ncfl.tech/202305022312912.png" alt="这里写图片描述"></p><p>输入刚刚设置的用户名密码就可以重新跳转回所要访问的界面</p><p>这段代码内容很少，但事实上已经做了很多的默认安全验证，包括：</p><ol><li>访问应用中的每个URL都需要进行验证</li><li>生成一个登陆表单</li><li>允许用户使用username和password来登陆</li><li>允许用户注销</li><li>CSRF攻击拦截</li><li>Session Fixation攻击</li><li>安全Header集成</li></ol><h3 id="配置自定义的登录界面"><a href="#配置自定义的登录界面" class="headerlink" title="配置自定义的登录界面"></a>配置自定义的登录界面</h3><p>在<code>SecurityConfig.java</code>中添加下面的代码，主要是说拦截所有请求，然后配置自定义的登陆界面的路径为“&#x2F;login”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                  .anyRequest().authenticated()</span><br><span class="line">                  .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                  .loginPage( <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                  .permitAll();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在templates文件夹下添加login.html文件，我这个html文件是从之前写的直接拷贝过来的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.starter-template</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;starter-template&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.logout&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-warning&quot;</span>&gt;</span>已成功注销<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger&quot;</span>&gt;</span>有错误，请重试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用账号密码登陆<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>账号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在添加一个文件<code>WebMvcConfig</code>，将“&#x2F;login”映射到“login.html”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">registry.addViewController(<span class="string">&quot;/login&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这个时候重新访问刚刚的路径，就会拦截到自定义的登录界面</p><p><img src="https://img.ncfl.tech/202305022313373.png" alt="这里写图片描述"></p><p>这里Html文件中的用户名密码，默认的name属性名字是“username”和“password”，否则springsecurity是获取不到值的，如需要自定的话，可以这么设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                  .anyRequest().authenticated()</span><br><span class="line">                  .and()</span><br><span class="line">             .formLogin()</span><br><span class="line">                  .loginPage( <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                  .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                  .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                  .permitAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>可以在configure函数下继续设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                  .anyRequest().authenticated()</span><br><span class="line">                  .and()</span><br><span class="line">             .formLogin()</span><br><span class="line">                  .loginPage( <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                  .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                  .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                  .permitAll()</span><br><span class="line">                  .and()</span><br><span class="line">             .logout()</span><br><span class="line">             .logoutUrl(<span class="string">&quot;/logout&quot;</span>)                                                 </span><br><span class="line">             .logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>)                                           </span><br><span class="line">             .invalidateHttpSession(<span class="literal">true</span>) </span><br><span class="line">             .permitAll();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可以直接从代码中看出来，就是访问“&#x2F;logout”的时候会退出登录，若成功退出便会访问到“&#x2F;index”这个路径，这个比较简单，就不贴代码出来了，可以下载我的源码去看看。</p><h3 id="拦截url和授权"><a href="#拦截url和授权" class="headerlink" title="拦截url和授权"></a>拦截url和授权</h3><p>之前设置的都是拦截全部的URL，不管什么URL都拦截到登录界面，也可以自定义拦截，同样是在configure函数下添加设置：</p><ul><li>resources路径下的文件和以show开头的路径无需登录结课访问</li><li>test该URl只能由用户为ADMIN的访问</li><li>index该路径可由ADMIN和USER_ADMIN的用户访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       http</span><br><span class="line">.authorizeRequests()                                                              </span><br><span class="line">.antMatchers( <span class="string">&quot;/resources/**&quot;</span>, <span class="string">&quot;/show*&quot;</span>).permitAll()  </span><br><span class="line">.antMatchers( <span class="string">&quot;/test&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span> )                      </span><br><span class="line">.antMatchers( <span class="string">&quot;/idnex&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasRole(&#x27;USER_ADMIN&#x27;)&quot;</span>)  </span><br><span class="line">.antMatchers( <span class="string">&quot;/AddUser&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasRole(&#x27;USER&#x27;)&quot;</span>)  </span><br><span class="line"><span class="comment">//.regexMatchers(&quot;&quot;).permitAll()正则表达式匹配</span></span><br><span class="line">.anyRequest().authenticated()       </span><br><span class="line">                        </span><br><span class="line"><span class="comment">//             .authorizeRequests()</span></span><br><span class="line"><span class="comment">//                   .anyRequest().authenticated()</span></span><br><span class="line">                  .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                  .loginPage( <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                  .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                  .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                  .permitAll()</span><br><span class="line">                  .and()</span><br><span class="line">            .logout()</span><br><span class="line">             .logoutUrl(<span class="string">&quot;/logout&quot;</span>)                                                 </span><br><span class="line">             .logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>)                                           </span><br><span class="line">             .invalidateHttpSession(<span class="literal">true</span>) </span><br><span class="line">             .permitAll();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于用户的权限，可在设置用户名和密码是指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">auth</span><br><span class="line">.inMemoryAuthentication()</span><br><span class="line">.withUser(<span class="string">&quot;1&quot;</span>).password(<span class="string">&quot;1&quot;</span>).roles(<span class="string">&quot;ADMIN&quot;</span>).and()</span><br><span class="line">.withUser(<span class="string">&quot;2&quot;</span>).password(<span class="string">&quot;2&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>).and()</span><br><span class="line">.withUser(<span class="string">&quot;3&quot;</span>).password(<span class="string">&quot;3&quot;</span>).roles(<span class="string">&quot;USER_ADMIN&quot;</span>).and()</span><br><span class="line">.withUser(<span class="string">&quot;4&quot;</span>).password(<span class="string">&quot;4&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="配置mysql数据库中的用户名密码"><a href="#配置mysql数据库中的用户名密码" class="headerlink" title="配置mysql数据库中的用户名密码"></a>配置mysql数据库中的用户名密码</h3><p>关于数据库的而配置连接，参考我的上一篇博客<a href="http://blog.csdn.net/q15150676766/article/details/76795466">http://blog.csdn.net/q15150676766/article/details/76795466</a>，这里不做介绍。</p><p>我数据库中一张表SysUser（id，username，password，role）</p><p>在java中新建一个entity类<code>SysUser.java</code>注意这个类需要实现UserDetails接口。数据库中的role字段需要有”ROLE_”作为前缀，或者需要在构建的时候拼接“ROLE_”，我这里是拼接的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter....setter....</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">List&lt;GrantedAuthority&gt; auths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;GrantedAuthority&gt;();</span><br><span class="line">auths.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span>+role));</span><br><span class="line"><span class="keyword">return</span> auths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个JPA的类<code>SysUserRepository.java</code>这个很简单就不做解释了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;SysUser, Long&gt;&#123;</span><br><span class="line">SysUser <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个<code>CustomUserService.java</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"></span><br><span class="line">public class CustomUserService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">SysUserRepository userRepository;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public UserDetails loadUserByUsername(String username) &#123;</span><br><span class="line">SysUser user = userRepository.findByUsername(username);</span><br><span class="line">if (user == null) &#123;</span><br><span class="line">throw new UsernameNotFoundException(&quot;用户不存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在<code>SecurityConfig.java</code>文件中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">UserDetailsService <span class="title function_">customUserService</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomUserService</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在configure方法下添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth.userDetailsService(customUserService());</span><br></pre></td></tr></table></figure><p>这样就可以将数据库中的用户名密码添加到springsecurity中。<br>关于原理可以去参考一下<a href="http://www.tianshouzhi.com/api/tutorials/spring_security_4/250">http://www.tianshouzhi.com/api/tutorials/spring_security_4&#x2F;250</a></p><p>测试这里便不做了，可以下载我的源码去试试看</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（5）操作数据库Spring-Data-JPA</title>
      <link href="/post/41775/"/>
      <url>/post/41775/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JPA"><a href="#一、JPA" class="headerlink" title="一、JPA"></a><strong>一、JPA</strong></h2><p>在介绍Spring Data JPA的时候，我们首先认识下Hibernate。Hibernate是数据访问解决技术的绝对II主，使用0&#x2F;R映射（Object-Relational Mapping)技术实现数据访问，O&#x2F;R映射即将领域模型类和数据库的表进行映射，通过程序操作对象而实现表数据操作的能力,让数据访问操作无须关注数据库相关的技术。</p><p>随着Hibernate的盛行，Hibernate主导了EJB3.0的JPA规范，JPA即Java Persistence API。JPA是一个基于0&#x2F;R映射的标准规范（目前最新版本是JPA2.1)。所谓规范即只定义标准规则(如注解、接口），不提供实现，软件提供商可以按照标准规范来实现，而使用者只需按照规范中定义的方式来使用，而不用和软件提供商的实现打交道。JPA的主要实现由Hibernate、Eclipse Link和OpenJPA等，这也意味着我们只要使用JPA来开发，无论是哪一个开发方式都是一样的。</p><p>Spring Data JPA是Spring Data的一个子项目，它通过提供基于JPA的Repository极大地减少了JPA作为数据访问方案的代码量。</p><p>在JPA中主要是使用函数名来分别数据库操作的，比如<code>findByUsername</code>，就是通过username查找记录，再比如findByUsernameAndPassword就是通过用户名密码访问数据，所以在JPA 中，函数的取名还是比较重要的，这部分也可通过代码提示来查看，因为他会根据数据库表字段和一些关键字推荐可用的部分函数名。当然JPA中也有一些原先就定义好的方法，比如findAll，save等方法。</p><p>在JPA定义函数名需要遵循下列规定：</p><table><thead><tr><th>Keyword</th><th align="left">Sample</th><th align="left">SQL</th></tr></thead><tbody><tr><td>And</td><td align="left">findByLastnameAndFirstname</td><td align="left">where x.lastname &#x3D; ?1 and x.firstname &#x3D; ?2</td></tr><tr><td>Or</td><td align="left">findByLastnameOrFirstname</td><td align="left">where x.lastname &#x3D; ?1 or x.firstname &#x3D; ?2</td></tr><tr><td>Is,Equals</td><td align="left">findByFirstname<br/>findByFirstnameIs<br/>findByFirstnameEquals</td><td align="left">where x.firstname &#x3D; 1?</td></tr><tr><td>Between</td><td align="left">findByStartDateBetween</td><td align="left">where x.startDate between 1? and ?2</td></tr><tr><td>LessThan</td><td align="left">findByAgeLessThan</td><td align="left">where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td align="left">findByAgeLessThanEqual</td><td align="left">where x.age &lt;&#x3D; ?1</td></tr><tr><td>GreaterThan</td><td align="left">findByAgeGreaterThan</td><td align="left">where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td align="left">findByAgeGreaterThanEqual</td><td align="left">where x.age &gt;&#x3D; ?1</td></tr><tr><td>After</td><td align="left">findByStartDateAfter</td><td align="left">where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td align="left">findByStartDateBefore</td><td align="left">where x.startDate &lt; ?1</td></tr><tr><td>IsNull</td><td align="left">findByAgeIsNull</td><td align="left">where x.age is null</td></tr><tr><td>IsNotNull,NotNull</td><td align="left">findByAge(Is)NotNull</td><td align="left">where x.age not null</td></tr><tr><td>Like</td><td align="left">findByFirstnameLike</td><td align="left">where x.firstname like ?1</td></tr><tr><td>NotLike</td><td align="left">findByFirstnameNotLike</td><td align="left">where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td align="left">findByFirstnameStartingWith</td><td align="left">where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td align="left">findByFirstnameEndingWith</td><td align="left">where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td>Containing</td><td align="left">findByFirstnameContaining</td><td align="left">where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td align="left">findByAgeOrderByLastnameDesc</td><td align="left">where x.age &#x3D; ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td align="left">findByLastnameNot</td><td align="left">where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td align="left">findByAgeIn(Collection<Age> ages)</td><td align="left">where x.age in ?1</td></tr><tr><td>NotIn</td><td align="left">findByAgeNotIn(Collection<Age> age)</td><td align="left">where x.age not in ?1</td></tr><tr><td>True</td><td align="left">findByActiveTrue()</td><td align="left">where x.active &#x3D; true</td></tr><tr><td>False</td><td align="left">findByActiveFalse()</td><td align="left">where x.active &#x3D; false</td></tr><tr><td>IgnoreCase</td><td align="left">findByFirstnameIgnoreCase</td><td align="left">where UPPER(x.firstame) &#x3D; UPPER</td></tr></tbody></table><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a><strong>二、配置</strong></h2><p><code>pom.xml</code>文件中添加jpa依赖的包，很数据库连接库，这里使用的是mysql数据库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置连接信息，在<code>application.yml</code>文件中添加数据库连接的username，password等信息。这部分信息和之前在SpringMVC中的信息几乎是相同的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>SpringBoot中默认的连接池好像是org.apache.tomcat.jdbc.pool.DataSource。<br>在yml文件的代码提示中支持的连接池好像还有有dbcp,dbcp2,tomcat,hikari，但是按照提示之后好像在控制台看不到dbcp,dbcp2,tomcat,hikari这几个关键词，所以也不知道配置是否成功。</p><p>这里我还自己配置了阿里云的Druid连接池，就目前查看资料，感觉比较好的连接池有Druid和hikari，但是在实际中是哪几个比较好还不好说，下面是Druid的配置。</p><p>在<code>pom.xml</code>文件中添加所需要的依赖库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>application.yml</code>配置下面的信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在springboot中配置这部分的信息相对而言还是比较简洁的</p><h2 id="三、数据库映射类"><a href="#三、数据库映射类" class="headerlink" title="三、数据库映射类"></a><strong>三、数据库映射类</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_2.JPA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.NamedQuery;</span><br><span class="line"><span class="comment">//用下面这个注解也是可以的</span></span><br><span class="line"><span class="comment">//import org.hibernate.annotations.NamedQuery;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NamedQuery(name=&quot;Test.hhh&quot;,query=&quot;select t from Test t where t.username=? and t.password=?&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(<span class="type">int</span> id, String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个映射类还是很简单的，主要是上面有一个<code>@NamedQuery</code>注解，使用这个注解是可以自定义SQL语句来对数据库进行操作的。然后根据name（这里的name是hhh，不是Test.hhh）来调用这部分信息。</p><h2 id="四、Repository类"><a href="#四、Repository类" class="headerlink" title="四、Repository类"></a><strong>四、Repository类</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Test, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select * from Test t where t.username = ?</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select * from Test t where t.username = ? and t.password = ?</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">findByUsernameAndPassword</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义query</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query(&quot;select t from Test t where t.id=:id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">findTestById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与Test的NamedQuery相对应</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">hhh</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面就是实现与操作数据库的操作。继承的JpaRepository中的前一个为数据库表对应的实体类，第二个为该表的主键的类型。看到最后有何叫<code>hhh</code>的函数，这个就是之前在Test类中自定义的SQL查询语句。然后在Jpa中自定义还可以在本类中是实现，就是<code>findTestById</code>，在函数名之前用@Query自定义SQL语句。</p><h2 id="五、数据库的增删改查"><a href="#五、数据库的增删改查" class="headerlink" title="五、数据库的增删改查"></a><strong>五、数据库的增删改查</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort.Direction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestRepository testRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过username获取Test数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/testController/custom/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">getbyUsername</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findByUsername(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试通过函数名构建查询</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testController/custom_1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">getByUsernameAndPassword</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findByUsernameAndPassword(username, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Repository自定义SQL语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testController/custom_2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">getTestById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findTestById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Test类中的NamedQuery自定义查询语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testController/custom_3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">hhh</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.hhh(username, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/testController/custom/sort&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">getbyUsernameSort</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findAll(<span class="keyword">new</span> <span class="title class_">Sort</span>(Direction.ASC, <span class="string">&quot;id&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页+排序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/testController/custom/pageable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Test&gt; <span class="title function_">getbyUsernamePage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// return testRepository.findAll(new PageRequest(1,2));</span></span><br><span class="line"><span class="keyword">return</span> testRepository.findAll(<span class="keyword">new</span> <span class="title class_">PageRequest</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">Sort</span>(Direction.ASC, <span class="string">&quot;id&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/testController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Test&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Post测试，添加记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">getAll</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test.setPassword(password);</span><br><span class="line">test.setUsername(username);</span><br><span class="line"><span class="keyword">return</span> testRepository.save(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试自带的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/testController/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">getOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findOne(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试删除数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/testController/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">testRepository.delete(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中主要是调用TestRepository中的方法。然后启动SpringBoot服务，分别访问对应的URL就可以得到对应的数据。在本类中，还有两个部分，分别是排序和分页这部分的内容，在JPA中也得到了很好地支持，这部分东西看代码还是容易看的，就不做解释了。</p><h2 id="六、事务管理Transactional"><a href="#六、事务管理Transactional" class="headerlink" title="六、事务管理Transactional"></a><strong>六、事务管理Transactional</strong></h2><p>Transactional中的属性主要是有下面几个。</p><table><thead><tr><th align="center">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">Propagation</br>(默认REQUIRED)</td><td align="left">Propagation定义了事务的生命周期主要有以下选项：<br/>REQUIRED：方法A调用时没有事务新建一个事务，当在方法A调用另外一个方法B的时候，方法B将使用相同的事务；如果方法B发生异常需要数据回滚的时候，整个事务数据回滚<br/>REQUIRES_NEW：对于方法A和B,在方法调用的时候无论是，否有事务都开启一个新的事务；这样如果方法B有异常不会导致,方法A的数据回滚<br/>NESTED：和REQUIRES_NEW类似，但支持JDBC,不支持JPA或Hibernate<br/>SUPPORTS：方法调用时有事务就用事务，没事务就不用事务<br/>NOT_SUPPORTED：强制方法不在事务中执行，若有事务，在方法调用到结束阶段事务都将会被挂起<br/>NEVER：强制方法不在事务中执行，若有事务则抛出异常<br/>MANDATORY：强制方法在事务中执行，若无事务则抛出异常</td></tr><tr><td align="center">Isolation<br/>(默认DEFAULT)</td><td align="left">Isolation(隔离）决定了事务的完整性，处理在多事务对相同数据下的处理机制，主要包含下面的隔离级别（当然我们也不可以随意设置，这要看当前数据库是否支持）<br/>READ_UNCOMMITTED：对于在A事务里修改了一条记录但没有提交事务，在B事务可以读取到修改后的记录。可导致脏读、不可重复读以及幻读<br/>READ_COMMITTED：只有当在A事务里修改了一条记录且提交事务之后，B事务才可以读取到提交后的记录；阻止脏读，但可能导致不可重复读和幻读<br/>REPEATABLE_READ：不仅能实现 READ_COMMITTED 的功能,而且还能阻止到A事务读取了一条记录，B事务将不允许修改这条记录；阻止脏读和不可重复读，但可出现幻读<br/>SERIALIZABLE：此级別下亊务足顺序执行的，可以避免上述级别的缺陷，似开销较大<br/>DEFAULT：使用当前数据库的默认隔离界级别，如Oracle,SQL Server 是 READ_COMMITTED; Mysql是REPEATABLE_READ</td></tr><tr><td align="center">timeout</td><td align="left">timeout指定事务过期时间，默认为当前数据库的事务过期时间</td></tr><tr><td align="center">readOnly</td><td align="left">指定当前事务是否只读事务，默认false</td></tr><tr><td align="center">rollbackFor</td><td align="left">指定哪个或者哪些异常可以引起事务回滚</td></tr><tr><td align="center">noRollbackFor</td><td align="left">指定哪个或者哪些异常不可以引起事务回滚</td></tr></tbody></table><p>但是在这里很多属性是不方便测试的，这里就不做测试了。<br>在这里需要注意的是使用的是<code>org.springframework.transaction.annotation.Transactional;</code>包中的Transactional注解，若是使用<code>javax.transaction.Transactional;</code>的注解，该包中只有rollbackOn和dontRollbackOn这儿两个属性，其他的属性是没有的，当然使用这个包中的这两个属性也是完成可以的，但是其他的属性就没有办法测试了。<br>下面是测试代码（是在上面的那个部分完成之后才能做这个的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TranscationalController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestRepository testRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rollbackFor 抛出异常之后回滚数据，即新纪录不会被写进数据库</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Transactional</span> 使用的是org.springframework.transaction.annotation.Transactional; </span></span><br><span class="line"><span class="comment"> *      不是 javax.transaction.Transactional;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/transaction_1&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = &#123; IllegalArgumentException.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transaction_1</span><span class="params">()</span> &#123;</span><br><span class="line">testRepository.save(<span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;transaction_1&quot;</span>, <span class="string">&quot;transaction_1&quot;</span>));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;\rollbackFor&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * noRollbackFor 抛出异常之后，不会滚数据，即新纪录还是会被写进数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/transaction_2&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(noRollbackFor = &#123; IllegalArgumentException.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transaction_2</span><span class="params">()</span> &#123;</span><br><span class="line">testRepository.save(<span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;transaction_2&quot;</span>, <span class="string">&quot;transaction_2&quot;</span>));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;\noRollbackFor&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * readOnly = true</span></span><br><span class="line"><span class="comment"> * 会出现异常：Queries leading to data modification are not allowed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/transaction_3&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">transaction_3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.save(<span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;transaction_3&quot;</span>, <span class="string">&quot;transaction_3&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其他的与transaction相关的还有isolation，timeout和propagation，这三个不好测试，感觉用默认的就挺好用的了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、缓存"><a href="#七、缓存" class="headerlink" title="七、缓存"></a><strong>七、缓存</strong></h2><table><thead><tr><th>注解</th><th align="center">解释</th></tr></thead><tbody><tr><td>@Cacheable</td><td align="center">若缓存中已经有数据，则直接读取数据，若无，则将内容存进缓存</td></tr><tr><td>@CachePut</td><td align="center">不管缓存中是否存在该值，都会将把内容存进缓存</td></tr><tr><td>@CacheEvict</td><td align="center">删除缓存</td></tr><tr><td>@Caching</td><td align="center">可以通过该注解组合多个注解策略在一个方法上</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要在Demo2Application.java中添加<span class="doctag">@EnableCaching</span>注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Caching</span> 可以通过该注解组合多个注解策略在一个方法上</span></span><br><span class="line"><span class="comment"> * JPA中注解几乎都是通过AOP的方式使用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestRepository testRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不管怎么样都会将把内容存进缓存</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cache_1&quot;)</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;test&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">CachePut</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findOne(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若缓存中已经有数据，则直接读取数据，若无，则将内容存进缓存</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cache_2&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;test&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">Cacheable</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findOne(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除缓存</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cache_3&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Test <span class="title function_">CacheEvict</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> testRepository.findOne(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试缓存的方法是，若缓存中存在该记录，则重新访问一个URL获取同一个数据，则在后台的console中是不会输出SQL语句的，就是不会重新从数据库中获取数据，二是从缓存中直接拿去数据。</p><p>这是我的源码，有兴趣的可以下载看看<a href="http://download.csdn.net/download/q15150676766/9924308">http://download.csdn.net/download/q15150676766/9924308</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（4）WebSocket</title>
      <link href="/post/16838/"/>
      <url>/post/16838/</url>
      
        <content type="html"><![CDATA[<h2 id="一、websocket"><a href="#一、websocket" class="headerlink" title="一、websocket"></a><strong>一、websocket</strong></h2><p>WebSocket为浏览器和服务端提供了双工异步通信的功能，即浏览器可以向服务端发送消息，服务端也可以向浏览器发送消息。WebSocket葙浏览器的支持，如IE 10+、Chrome 13+，Firefox6+，这对我们现在的浏览器来说都不是问题。</p><p>WebSocket是通过一个socket来实现双工异步通信能力的。但是直接使用WebSocket (或 者SockJS，WebSocket协议的模拟，增加了当浏览器不支持WebSocket的时候的兼容支持）协议开发程序显得特别烦琐，我们会使用它的子协议STOMP，它是一个更高级别的协议，STOMP协议使用一个基于帧（frame)的格式来定义消息，与HTTP的request和response类似（具有 类似于@RequestMapping 的@MessageMapping)。</p><h2 id="二、广播"><a href="#二、广播" class="headerlink" title="二、广播"></a><strong>二、广播</strong></h2><p>在pom.xml 文件中添加websocket依赖的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置WebSocket，需要在配置类上使用<code>@EnableWebSocketMessageBroker</code>开启WebSocket，并继承<code>AbstractWebSocketMessageBrokerConfigurer</code>类。通过<code>@EnableWebSocketMessageBroker</code>注解开启使用@STOMP协议来传输基于代理的消息，这是控制器支持使用@MessageMapping。<code>&quot;/endpointWisely&quot;</code>注册STOMP协议的节点，并指定映射的URL和指定使用SockJS协议。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractWebSocketMessageBrokerConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry arg0)</span> &#123;</span><br><span class="line">arg0.addEndpoint(<span class="string">&quot;/endpointWisely&quot;</span>).withSockJS();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller层<br>当浏览器向服务器发送请求时，通过<code>@MessageMapping</code>映射&#x2F;welcome这个地址，相当于<code>@RequestMapping</code>。<code>SendTo</code>当服务器有消息时，会对这个路径的浏览器发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WsController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MessageMapping(&quot;welcome&quot;)</span></span><br><span class="line"><span class="meta">@SendTo(&quot;/demo_2/topic/getResponse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">say</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>websocketBroadcast.html，这里需要在static文件中添加<code>sockjs.min.js</code>和<code>stomp.min.js</code>和<code>jquery-2.1.1.min.js</code>，这个可以去网上自行下载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot WebSocket+广播式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;disconnect()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color:#ff0000&quot;</span>&gt;</span>貌似你的浏览器不支持websocket<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;connect&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;connect()&quot;</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;disconnect&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;disconnect();&quot;</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conversationDiv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>输入你的名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendName&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendName();&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;websocket/sockjs.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;websocket/stomp.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;jquery-2.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">setConnected</span>(<span class="params">connected</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;connect&#x27;</span>).<span class="property">disabled</span> = connected;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disconnect&#x27;</span>).<span class="property">disabled</span> = !connected;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;conversationDiv&#x27;</span>).<span class="property">style</span>.<span class="property">visibility</span> = connected ? <span class="string">&#x27;visible&#x27;</span> : <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#response&#x27;</span>).<span class="title function_">html</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&#x27;/demo_2/endpointWisely&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span></span><br><span class="line"><span class="language-javascript">stompClient.<span class="title function_">connect</span>(&#123;&#125;, <span class="keyword">function</span>(<span class="params">frame</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setConnected</span>(<span class="literal">true</span>); </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected:&#x27;</span> + frame);</span></span><br><span class="line"><span class="language-javascript">stompClient.<span class="title function_">subscribe</span>(<span class="string">&#x27;/demo_2/topic/getResponse&#x27;</span>, <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showResponse</span>(response.<span class="property">body</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (stompClient != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">stompClient.<span class="title function_">disconnect</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setConnected</span>(<span class="literal">false</span>); </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disconnected&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sendName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> name = $(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">stompClient.<span class="title function_">send</span>(<span class="string">&quot;/welcome&quot;</span>, &#123;&#125;, name);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">showResponse</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> response = $(<span class="string">&#x27;#response&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">response.<span class="title function_">html</span>(message);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问websocketBroadcast.html文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">registry.addViewController(<span class="string">&quot;/ws&quot;</span>).setViewName(<span class="string">&quot;/WebSocket/websocketBroadcast&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是广播，可以在浏览器的三个标签页中访问下面的地址，同时把这是哪个连接打开，然后在一个输入框中输入内容，点击发送，就可以看到刚刚发出来的信息。相关信息可以查看console中的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo_2/ws</span><br></pre></td></tr></table></figure><p><img src="https://img.ncfl.tech/202305022304904.png" alt="这里写图片描述"><br><img src="https://img.ncfl.tech/202305022306267.png" alt="这里写图片描述"></p><p>当然访问访问websocketBroadcast.html文件也可以通过一个controller层去跳转.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/wstest&quot;)</span><br><span class="line">public String wstest()&#123;</span><br><span class="line">return &quot;/WebSocket/websocketBroadcast&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、点对点通信"><a href="#三、点对点通信" class="headerlink" title="三、点对点通信"></a><strong>三、点对点通信</strong></h2><p>在pom.xml文件中添加下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里面的代码和之前的差不多。<br>由于是点对点通信，所以需要用户登录，这里设置里两个用户名，wyf和wisely，然后还设置了登录文件和登陆之后默认的跳转文件，关于这部分内容，会在接下面的博客中做进一步学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line"></span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/chat&quot;</span>)</span><br><span class="line"><span class="comment">//.failureUrl(&quot;/error&quot;)错误是跳转的页面</span></span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br><span class="line"><span class="comment">//.rememberMe()是否被kookie记住</span></span><br><span class="line"><span class="comment">//.tokenValiditySeconds(3600)记住的时间长度3600s</span></span><br><span class="line"><span class="comment">//.key(&quot;key&quot;)cookie中的私钥</span></span><br><span class="line"><span class="comment">//.and()</span></span><br><span class="line">.logout()</span><br><span class="line">.permitAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">auth</span><br><span class="line">.inMemoryAuthentication()</span><br><span class="line">.withUser(<span class="string">&quot;wyf&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;wyf&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line"></span><br><span class="line">.and()</span><br><span class="line"></span><br><span class="line">.withUser(<span class="string">&quot;wisely&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;wisely&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">web.ignoring().antMatchers(<span class="string">&quot;/resources/static/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层，和之前的内容相同，就不做过多的介绍了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketP2PController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SimpMessagingTemplate messagingTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MessageMapping(&quot;/chat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerChat</span><span class="params">(Principal principal, String msg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (principal.getName().equals(<span class="string">&quot;wyf&quot;</span>)) &#123;</span><br><span class="line">messagingTemplate.convertAndSendToUser(<span class="string">&quot;wisely&quot;</span>, <span class="string">&quot;/queue/notifications&quot;</span>,</span><br><span class="line">principal.getName() + <span class="string">&quot;&lt;br/&gt;&amp;emsp;&amp;emsp;&amp;emsp;&quot;</span> + msg);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messagingTemplate.convertAndSendToUser(<span class="string">&quot;wyf&quot;</span>, <span class="string">&quot;/queue/notifications&quot;</span>,</span><br><span class="line">principal.getName() + <span class="string">&quot;&lt;br/&gt;&amp;emsp;&amp;emsp;&amp;emsp;&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是两个界面：chat.html和login.html<br>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/l999/xhtml&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span>无效的账号和密码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.logout&#125;&quot;</span>&gt;</span>你已注销<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>chat.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;wiselyForm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;websocket/sockjs.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;websocket/stomp.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;jquery-2.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#wiselyForm&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> text = $(<span class="string">&#x27;#wiselyForm&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;textarea[name=&quot;text&quot;]&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">stomp.<span class="title function_">send</span>(<span class="string">&quot;/chat&quot;</span>, &#123;&#125;, text);</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#output&#x27;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;b&gt;&amp;emsp;&amp;emsp;&amp;emsp;&quot;</span> + text + <span class="string">&quot;&lt;/b&gt;&lt;br/&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sock = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&#x27;/demo_2/endpointChat&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> stomp = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(sock);</span></span><br><span class="line"><span class="language-javascript">stomp.<span class="title function_">connect</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">stomp.<span class="title function_">subscribe</span>(<span class="string">&quot;/user/queue/notifications&quot;</span>, <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#output&#x27;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;b&gt;&quot;</span> + response.<span class="property">body</span> + <span class="string">&quot;&lt;/b&gt;&lt;br/&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后同样添加一个映射文件，一个项目中这个配置文件只能有一个，所以和之前的整合在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">registry.addViewController(&quot;/ws&quot;).setViewName(&quot;/WebSocket/websocketBroadcast&quot;);</span><br><span class="line">registry.addViewController(&quot;/login&quot;).setViewName(&quot;/WebSocket/login&quot;);</span><br><span class="line">registry.addViewController(&quot;/chat&quot;).setViewName(&quot;/WebSocket/chat&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于一个浏览器只能保存一个session，所以这种点对点通信只能开两个浏览器来完成。然后分别登陆，登陆的用户名密码就是刚刚在config文件中设置的，这两个用户名是存在内存中的，当然也可以从文件或者数据库中去加载。</p><p><img src="https://img.ncfl.tech/202305022306028.png" alt="这里写图片描述"></p><p>然后在输入信息发送就可以互相看到了，这样就相当于构建了一个聊天室</p><p><img src="https://img.ncfl.tech/202305022306649.png" alt="这里写图片描述"></p><p>关于这部分内容为了可以更好的了解，有必要去好好看看websocket这部分内容。</p><p>这是我的源码，有兴趣的可以下载看看<a href="http://download.csdn.net/download/q15150676766/9924308">http://download.csdn.net/download/q15150676766/9924308</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（3）从yml文件中获取数据和Thymeleaf 模板引擎</title>
      <link href="/post/46333/"/>
      <url>/post/46333/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot现在基本上都是使用<code>application.yml</code>来配置项目中的一些配置条件，在springboot中还可以通过从yml文件中将yml中的数据直接读取出来。</p><h2 id="一、从yml文件中获取数据"><a href="#一、从yml文件中获取数据" class="headerlink" title="一、从yml文件中获取数据"></a><strong>一、从yml文件中获取数据</strong></h2><p>在yml配置下面的信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">book:</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">hhh</span></span><br><span class="line">  <span class="attr">name:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>book.author赋值为hhh<br>book.name赋值为123</p><p>在Demo2Application.java文件中添加下面内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Demo2Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-*-*-*-*-*-*-*-*-*-*-*分割线-*-*-*-*-*-*-*-*-*-*-*测试可不可用-*-*-*-*-*-*-*-*-*-*-*-*-*-*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-*-*-*-*-*-*-*-*-*-*-*分割线-*-*-*-*-*-*-*-*-*-*-*直接获取yml文件中的值-*-*-*-*-*-*-*-*-*-*-*-*-*-*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;book.author&#125;&quot;)</span></span><br><span class="line">String bookAuthor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;book.name&#125;&quot;)</span></span><br><span class="line">String bookName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testBook</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;作者 ：&quot;</span> + bookAuthor + <span class="string">&quot;书名 ：&quot;</span> + bookName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用@Value(“${参数名}”)符号来获取yml配置文件中值</p><p>然后访问<code>http://localhost:8080/demo_2/testBook</code>就可以看到下面的东西<br><img src="https://img.ncfl.tech/202305022301927.png" alt="这里写图片描述"></p><p>但是这种方式的话，如果需要有很多种参数的话，那需要在Controller中配置很多个参数@Value参数，这样的话就会显得整个类很臃肿，而且非常不好维护。</p><p>这个时候需要添加一个类，叫<code>Book.java</code>,这里里面的变量就是在yml文件中的参数，然后添加一个<code>@ConfigurationProperties(prefix=&quot;book&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String author, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.author = author;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Book [author=&quot;</span> + author + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试一下是否可以读取到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Demo2Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-*-*-*-*-*-*-*-*-*-*-*分割线 -*-*-*-*-*-*-*-*-*-*-*定义一个映射的类-*-*-*-*-*-*-*-*-*-*-*-*-*-*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Book book;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testBook_1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testBook_1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> book.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml文件中同样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">book:</span><br><span class="line">  author: hhh</span><br><span class="line">  name: 123</span><br></pre></td></tr></table></figure><p>访问一下<code>http://localhost:8080/demo_2/testBook_1</code>就可以看到下面的这个东西<br><img src="https://img.ncfl.tech/202305022301906.png" alt="这里写图片描述"></p><p>自己稍微评论一下这个功能：<br>从yml文件中获取参数的这个功能感觉不是很经常用，毕竟不会有人经常把数据的值直接配置在yml文件中，所以感觉这种功能感觉有点鸡肋，但是由于在很多资料中都看到这部分的内容，可能目前还没有用到这部分内容，还是稍微做一下笔记。</p><h2 id="二、Thymeleaf-模板引擎"><a href="#二、Thymeleaf-模板引擎" class="headerlink" title="二、Thymeleaf 模板引擎"></a><strong>二、Thymeleaf 模板引擎</strong></h2><p>Thymeleaf是一个JAVA类库，他是一个xml&#x2F;xhtml&#x2F;html5的模板引擎，可以作为MVC的Web应用的View层，Thymeleaf 还提供了额外的SpringMVC集成，所以可以使用Thymeleaf 完全代替JSP。</p><p>在springboot中static是用来放资源的，templates是用来放页面的。 </p><p>在使用Thymeleaf的时候，需要在pom.xml文件中添加下面的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个dependency包含了<code>spring-boot-starter-web</code>的内容，所以需要可以把web的删除了。</p><p>所以现在项目中添加进需要的库。下面的库并不是全部需要的，有些是后续需要的。</p><p><img src="https://img.ncfl.tech/202305022301409.png" alt="列表内容"></p><p>在本文中需要的有下面四个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.min.css</span><br><span class="line">bootstrap-theme.min.css</span><br><span class="line">bootstrap.min.js</span><br><span class="line">jquery-2.1.1.min.js</span><br></pre></td></tr></table></figure><p>然后在templates文件夹下添加<code>index.html</code>文件，添加进下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta content=&quot;text/html;charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot; /&gt;</span><br><span class="line">&lt;link th:href=&quot;@&#123;/bootstrap/bootstrap.min.css&#125;&quot; rel=&quot;stylesheet&quot;/&gt;</span><br><span class="line">&lt;link th:href=&quot;@&#123;/bootstrap/bootstrap-theme.min.css&#125;&quot; rel=&quot;stylesheet&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;panel panel-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;panel-title&quot;&gt;访问model&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">&lt;span th:text=&quot;$&#123;book.author&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;span th:text=&quot;$&#123;book.name&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div th:if=&quot;$&#123;not #lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel panel-primary&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;panel-title&quot;&gt;列表&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;list-group&quot;&gt;</span><br><span class="line">&lt;li class=&quot;list-group-item&quot; th:each=&quot;book:$&#123;books&#125;&quot;&gt;</span><br><span class="line">&lt;span th:text=&quot;$&#123;book.author&#125;&quot;&gt;&lt;/span&gt; </span><br><span class="line">&lt;span th:text=&quot;$&#123;book.name&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;button class=&quot;btn&quot; th:onclick=&quot;&#x27;getName(\&#x27;&#x27;+$&#123;book.name&#125;+&#x27;\&#x27;)&#x27;&quot;&gt;获得名字&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script th:src=&quot;@&#123;/jquery-2.1.1.min.js&#125;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script th:src=&quot;@&#123;/bootstrap/bootstrap.min.js&#125;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class="line">var single = [[$&#123;book&#125;]];</span><br><span class="line">console.log(single.name+&quot;/&quot;+single.author)</span><br><span class="line">function getName(name)&#123;</span><br><span class="line">console.log(name);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后在Demo2Application.java添加下面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Demo2Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里需要用的是Controller注解，因为要返回一个界面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;testBook_2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testBook_2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;singleAuthor&quot;</span>,<span class="string">&quot;singleName&quot;</span>);</span><br><span class="line">List&lt;Book&gt; books = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;2&quot;</span>));</span><br><span class="line">books.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line">model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个<code>Book.java</code>文件，就是上面的那个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String author, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.author = author;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Book [author=&quot;</span> + author + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候访问<code>http://localhost:8080/demo_2/testBook_2</code>就可以看到下面的内容，由于是使用bootstrap写的界面，所以界面看起来还是比较好看的。点击获取名字按钮就可以在控制台看见输出的内容了。</p><p><img src="https://img.ncfl.tech/202305022301323.png" alt="这里写图片描述"></p><p>本文主要是因为在文档中有涉及到这些内容，所以做一下记录。</p><p>这是我的源码，有兴趣的可以下载看看<a href="http://download.csdn.net/download/q15150676766/9924308">http://download.csdn.net/download/q15150676766/9924308</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（2）一些很实用的功能</title>
      <link href="/post/25742/"/>
      <url>/post/25742/</url>
      
        <content type="html"><![CDATA[<h2 id="一、定制Banner"><a href="#一、定制Banner" class="headerlink" title="一、定制Banner"></a><strong>一、定制Banner</strong></h2><p>springboot在启动的时候，会有下面这个图片<br><img src="https://img.ncfl.tech/202305022257551.png" alt="这里写图片描述"><br>然后这个图案是可以自定义的，在src&#x2F;main&#x2F;resource下新建一个banner.txt文件，然后去<a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a>下自定义自己所要显示的文字，然后点击下面的<code>select &amp; copy</code>把复制的内容复制到banner.txt文件中，重启一下Springboot，图标就会发生变化。<br><img src="https://img.ncfl.tech/202305022257251.png" alt="这里写图片描述"><br>当然这个图案也是可以关闭的，在之前的版本，可以通过下面的方式关闭，但是在1.5.6，就是我现在学习的版本，这种方法是不可以的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"><span class="comment">//        SpringApplication.run(Application.class, args);  </span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Application.class);  </span><br><span class="line">        application.setShowBanner(<span class="literal">false</span>);  </span><br><span class="line">        application.run(args);  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>在SpringBoot1.5.6中，可以使用下面的方式关闭该图案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Demo2Application.class)</span><br><span class="line">.bannerMode(Mode.OFF)</span><br><span class="line">.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Demo2Application.class);</span><br><span class="line">application.setBannerMode(Mode.OFF);</span><br><span class="line">application.run(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时可以在<code>banner.txt</code>这个文件中添加下面这些东西显示当前的使用的SpringBoot的版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;spring-boot.version&#125;           #1.5.6.RELEASE    </span><br><span class="line">$&#123;spring-boot.formatted-version&#125; # (v1.5.6.RELEASE)</span><br></pre></td></tr></table></figure><h2 id="二、application-yml"><a href="#二、application-yml" class="headerlink" title="二、application.yml"></a><strong>二、application.yml</strong></h2><p>在新的文件下，会有一个<code>application.properties</code>，这大概是Springboot中唯一的一个配置文件了吧。这个文件默认的是空的。<br>在<code>application.properties</code>文件中添加下面的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br><span class="line">server.context-path=/demo_2</span><br></pre></td></tr></table></figure><p>这里主要是修改server的端口号和路径。</p><p>还有一种是<code>application.yml</code>文件，把原来的文件删除，或者移动到其他地方，然后在根目录（同级目录src&#x2F;main&#x2F;resources）下添加<code>application.yml</code>，在yml中按照下面这么配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8443</span><br><span class="line">  context-path: /demo_2</span><br></pre></td></tr></table></figure><p>这个配置和properties实现的是一个功能，但是从文件上看，yml文件似乎更简洁，而且不管是eclipse还是idea中都支持对yml文件提示和自动补全，所以现在使用yml文件居多，所以接下来我都是使用yml文件配置的。</p><h2 id="三、配置logback"><a href="#三、配置logback" class="headerlink" title="三、配置logback"></a><strong>三、配置logback</strong></h2><p>在springBoot支持大部分日志配置，包括slf，log4j等日志框架，默认是使用logback，其他的日志框架百度一下都是有的，这里不做记录，主要就讲一下logback的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  file: logfile/log.log</span><br><span class="line">  level: org.springframework.web = DEBUG</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>配置一下上面的信息一下，重启一下服务，刷新一下项目，就可以看到<code>logfile/log.log</code>文件，里面是日志信息。</p><h2 id="四、热部署"><a href="#四、热部署" class="headerlink" title="四、热部署"></a><strong>四、热部署</strong></h2><p>springboot本身是不支持热部署的，每一次修改程序之后都需要重启一下项目，这样开发效率就会很低，所以热部署还是很有必要的。</p><p>在pom.xml文件，添加下面的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">optional=true,依赖不会传递，该项目依赖devtools；</span><br><span class="line">之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 </span><br><span class="line">--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后springboot就支持热部署了。每当发现class文件被修改，项目就会被重新加载。</p><h2 id="五、profile配置"><a href="#五、profile配置" class="headerlink" title="五、profile配置"></a><strong>五、profile配置</strong></h2><p>有时候开发和上线用的配置文件<code>application.yml</code>时不一样的，但是修改yml有时候会很麻烦。可以用下面的方式进行配置</p><p>在src&#x2F;main&#x2F;resources文件下添加下面两个文件，注意application-是不能改的，后面的可以自定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application-dev.yml</span><br><span class="line">application-pro.yml</span><br></pre></td></tr></table></figure><p>然后在application.yml文件中只写入下面的东西就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">      - pro</span><br></pre></td></tr></table></figure><p>这样就可以将<code>application-pro.yml</code>加载进项目。<br>在我这短期这个功能是用不上的感觉。</p><h2 id="六、替换favicon"><a href="#六、替换favicon" class="headerlink" title="六、替换favicon"></a><strong>六、替换favicon</strong></h2><p>springboot中默认的logo是一个绿叶形状的，但是在实际中这个logo常常是需要替换成自己公司或者项目的图标的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#下面是关闭图标,但是失败了，还是会有</span><br><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    favicon:</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure><p>官方文档中说用这个方法可以去掉，但是1.5.6中，这种方法这种方向是不可以的。所以目前来说我还不知道怎么去掉这个logo，但是可以替换。</p><p>将自己的图案重命名为<code>favicon.ico</code>，然后放在static文件夹中。<br>在springboot中static是用来放资源的，templates是用来放页面的。<br>然后在每个页面中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这样就可以把logo替换掉，但是毕竟这种方式还是不是很方便，但是目前我就知道这种。</p><h2 id="七、starter-pom"><a href="#七、starter-pom" class="headerlink" title="七、starter pom"></a><strong>七、starter pom</strong></h2><table><thead><tr><th>名称</th><th align="center">描述</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td align="center">核心Spring Boot starter，包括自动配置支持，日志和YAML</td></tr><tr><td>spring-boot-starter-actuator</td><td align="center">生产准备的特性，用于帮你监控和管理应用</td></tr><tr><td>spring-boot-starter-amqp</td><td align="center">对”高级消息队列协议”的支持，通过spring-rabbit实现</td></tr><tr><td>spring-boot-starter-aop</td><td align="center">对面向切面编程的支持，包括spring-aop和AspectJ</td></tr><tr><td>spring-boot-starter-batch</td><td align="center">对Spring Batch的支持，包括HSQLDB数据库</td></tr><tr><td>spring-boot-starter-cloud-connectors</td><td align="center">对Spring Cloud Connectors的支持，简化在云平台下（例如，Cloud Foundry 和Heroku）服务的连接</td></tr><tr><td>spring-boot-starter-data-elasticsearch</td><td align="center">对Elasticsearch搜索和分析引擎的支持，包括spring-data-elasticsearch</td></tr><tr><td>spring-boot-starter-data-gemfire</td><td align="center">对GemFire分布式数据存储的支持，包括spring-data-gemfire</td></tr><tr><td>spring-boot-starter-data-jpa</td><td align="center">对”Java持久化API”的支持，包括spring-data-jpa，spring-orm和Hibernate</td></tr><tr><td>spring-boot-starter-data-mongodb</td><td align="center">对MongoDB NOSQL数据库的支持，包括spring-data-mongodb</td></tr><tr><td>spring-boot-starter-data-rest</td><td align="center">对通过REST暴露Spring Data仓库的支持，通过spring-data-rest-webmvc实现</td></tr><tr><td>spring-boot-starter-data-solr</td><td align="center">对Apache Solr搜索平台的支持，包括spring-data-solr</td></tr><tr><td>spring-boot-starter-freemarker</td><td align="center">对FreeMarker模板引擎的支持</td></tr><tr><td>spring-boot-starter-groovy-templates</td><td align="center">对Groovy模板引擎的支持</td></tr><tr><td>spring-boot-starter-hateoas</td><td align="center">对基于HATEOAS的RESTful服务的支持，通过spring-hateoas实现</td></tr><tr><td>spring-boot-starter-hornetq</td><td align="center">对”Java消息服务API”的支持，通过HornetQ实现</td></tr><tr><td>spring-boot-starter-integration</td><td align="center">对普通spring-integration模块的支持</td></tr><tr><td>spring-boot-starter-jdbc</td><td align="center">对JDBC数据库的支持</td></tr><tr><td>spring-boot-starter-jersey</td><td align="center">对Jersey RESTful Web服务框架的支持</td></tr><tr><td>spring-boot-starter-jta-atomikos</td><td align="center">对JTA分布式事务的支持，通过Atomikos实现</td></tr><tr><td>spring-boot-starter-jta-bitronix</td><td align="center">对JTA分布式事务的支持，通过Bitronix实现</td></tr><tr><td>spring-boot-starter-mail</td><td align="center">对javax.mail的支持</td></tr><tr><td>spring-boot-starter-mobile</td><td align="center">对spring-mobile的支持</td></tr><tr><td>spring-boot-starter-mustache</td><td align="center">对Mustache模板引擎的支持</td></tr><tr><td>spring-boot-starter-redis</td><td align="center">对REDIS键值数据存储的支持，包括spring-redis</td></tr><tr><td>spring-boot-starter-security</td><td align="center">对spring-security的支持</td></tr><tr><td>spring-boot-starter-social-facebook</td><td align="center">对spring-social-facebook的支持</td></tr><tr><td>spring-boot-starter-social-linkedin</td><td align="center">对spring-social-linkedin的支持</td></tr><tr><td>spring-boot-starter-social-twitter</td><td align="center">对spring-social-twitter的支持</td></tr><tr><td>spring-boot-starter-test</td><td align="center">对常用测试依赖的支持，包括JUnit, Hamcrest和Mockito，还有spring-test模块</td></tr><tr><td>spring-boot-starter-thymeleaf</td><td align="center">对Thymeleaf模板引擎的支持，包括和Spring的集成</td></tr><tr><td>spring-boot-starter-velocity</td><td align="center">对Velocity模板引擎的支持</td></tr><tr><td>spring-boot-starter-web</td><td align="center">对全栈web开发的支持，包括Tomcat和spring-webmvc</td></tr><tr><td>spring-boot-starter-websocket</td><td align="center">对WebSocket开发的支持</td></tr><tr><td>spring-boot-starter-ws</td><td align="center">对Spring Web服务的支持</td></tr><tr><td>spring-boot-starter-actuator</td><td align="center">添加生产准备特性，比如指标和监控</td></tr><tr><td>spring-boot-starter-remote-shell</td><td align="center">添加远程ssh shell支持</td></tr><tr><td>spring-boot-starter-jetty</td><td align="center">导入Jetty HTTP引擎（作为Tomcat的替代）</td></tr><tr><td>spring-boot-starter-log4j</td><td align="center">对Log4J日志系统的支持</td></tr><tr><td>spring-boot-starter-logging</td><td align="center">导入Spring Boot的默认日志系统（Logback）</td></tr><tr><td>spring-boot-starter-tomcat</td><td align="center">导入Spring Boot的默认HTTP引擎（Tomcat）</td></tr><tr><td>spring-boot-starter-undertow</td><td align="center">导入Undertow HTTP引擎（作为Tomcat的替代）</td></tr></tbody></table><p>这是我的源码，有兴趣的可以下载看看<a href="http://download.csdn.net/download/q15150676766/9924308">http://download.csdn.net/download/q15150676766/9924308</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（1）入门</title>
      <link href="/post/65052/"/>
      <url>/post/65052/</url>
      
        <content type="html"><![CDATA[<p>有些人觉得学习SpringBoot，可以直接跳过SpringMVC的学习，个人觉得还是先学习SpringMVC再来学习SpringBoot，毕竟SpringBoot的有些注解或者基础都还是来自SpringMVC的，事先学习SpringMVC，可以对SpringBoot有更好的理解，不管怎么样，我是在学习了SpringMVC之后才知道有SpringBoot这东西，所以我的顺序是SpringMVC到SpringBoot的，学起来还是比较轻松的。同时本文不介绍和SpringMVC相关的知识。<br>SpringBoot个人感觉还算是比较新的一个技术，具体什么时候出来的我也不知道，但是感觉冲着这个比较少的XML配置信息来看，感觉只要JAVA不没落，这东西就是一种趋势。而且SpringBoot中集成了JPA和Templates这些东西，感觉操作起来还是比较方便的。</p><hr><h2 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a><strong>一、SpringBoot简介</strong></h2><p>随着动态语言的流行（Ruby、Groovy、Scala、Node.js), Java的开发显得格外的笨重：繁多的配置、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。</p><p>在上述环境下，Spring Boot应运而生。它使用“习惯优于配置”（项目中存在大量的配置， 此外还内置一个习惯性的配置，让你无须手动进行配置）的理念让你的项目快速运行起来。使 用Spring Boot很容易创建一个独立运行(运行jar，内嵌Servlet容器）、准生产级别的基于Spring 框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。</p><p>SpringBoot会根据在类路径中的jar包、类，为jar包里的类自动配置Bean,这样会极大地减少我们要使用的配置。当然，SpringBoot只是考虑了大多数的开发场景，并不是所有的场景，若在实际开发中我们需要自动配置Bean,而SpringBoot没有提供支持，则可以自定义 自动配置。</p><hr><h2 id="二、SpringBoot的优点"><a href="#二、SpringBoot的优点" class="headerlink" title="二、SpringBoot的优点"></a><strong>二、SpringBoot的优点</strong></h2><p>优点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)快速构建项目；</span><br><span class="line">(2)对主流开发框架的无配置集成；</span><br><span class="line">(3)项目可独立运行，无须外部依赖Servlet容器；</span><br><span class="line">(4)提供运行时的应用监控：</span><br><span class="line">(5)极大地提高了开发、部署效率；</span><br><span class="line">(6)与云计算的天然集成。</span><br></pre></td></tr></table></figure><hr><h2 id="三、搭建SpringBoot项目"><a href="#三、搭建SpringBoot项目" class="headerlink" title="三、搭建SpringBoot项目"></a><strong>三、搭建SpringBoot项目</strong></h2><p>据我所知Eclipse或者Myeclipse目前是没有办法生成SpringBoot项目的，但是可以运行。（反正我的Eclipse不行）</p><h3 id="方法一：网站生成"><a href="#方法一：网站生成" class="headerlink" title="方法一：网站生成"></a>方法一：网站生成</h3><p>打开<a href="http://start.spring.io/">start.spring.io</a>这个网站，输入文件名等基本信息之后，勾选Web，点击生成便会要求下载一个压缩包，而后将压缩包解压，把里面的项目添加进自己的IDE就可以了。<br>我是基于Maven构建的项目，所以电脑需要先安装Maven。</p><p><img src="https://img.ncfl.tech/202305022250753.png" alt="这里写图片描述"></p><p>把生成的项目拉进Myeclipse就成了这样：</p><p><img src="https://img.ncfl.tech/202305022251014.png" alt="这里写图片描述"></p><hr><h3 id="方法二：IDEA生成"><a href="#方法二：IDEA生成" class="headerlink" title="方法二：IDEA生成"></a>方法二：IDEA生成</h3><p>用IntelliJ IDEA生成的时候，需要注意不能下载最新版本的，就是Version: 2017.1.5这个版本的Ultimate版，Community版本的不支持SpringBoot，但是这个需要购买或者破解，学生邮箱可以免费注册。网上都有教程的。</p><p>File–&gt;New–&gt;module–&gt;Spring Initiaizr–&gt;next<br><img src="https://img.ncfl.tech/202305022252066.png" alt="这里写图片描述"></p><p>勾选Web<br><img src="https://img.ncfl.tech/202305022252702.png" alt="这里写图片描述"></p><p>生成的项目<br><img src="https://img.ncfl.tech/202305022252883.png" alt="这里写图片描述"></p><hr><h3 id="方法三：STS生成"><a href="#方法三：STS生成" class="headerlink" title="方法三：STS生成"></a>方法三：STS生成</h3><p>据说STS也支持SpringBoot的生成，但是我的不行，可能是版本的问题，方程生成过程大致和IntelliJ IDEA或者在线生成的方式生成，我没有去尝试，读者可以去尝试尝试。</p><hr><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><p>这里主要是在Eclipse中测试，接下来的文章也主要是在Eclipse中测试，毕竟本人主要使用的还是Eclipse</p><p>在DemoApplication.java文件添加为以下这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>右键run as Spring Boot App，就会自动启动tomcat<br><img src="https://img.ncfl.tech/202305022252181.png" alt="这里写图片描述"></p><p>访问下面这个地址，就可以看到效果,返回的helloWorld；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/</span><br></pre></td></tr></table></figure><p>入门就到这吧，到现在我还不知道这东西怎么热部署，感觉每次重启服务还是很麻烦的，看看接下来有没有什么办法吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（9）Java API实现搜索，排序，高亮，分页</title>
      <link href="/post/59727/"/>
      <url>/post/59727/</url>
      
        <content type="html"><![CDATA[<p>虽然上一篇中的对索引的搜索可以在一定程度上获取索引的信息，但是毕竟功能是有限的，本篇主要是对elasticsearch使用javaAPI实现搜索功能的笔记。</p><h2 id="一、搜索"><a href="#一、搜索" class="headerlink" title="一、搜索"></a><strong>一、搜索</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.index.query.QueryBuilders.termQuery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.MultiSearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.script.ScriptType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.script.mustache.SearchTemplateRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.FieldSortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;resource&quot;,&quot;deprecation&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">searchmethod6();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>).setTypes(<span class="string">&quot;movie&quot;</span>).get();</span><br><span class="line">println(response);</span><br><span class="line"><span class="keyword">for</span> (SearchHit  searchHit: response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb1</span> <span class="operator">=</span> termQuery(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line"><span class="comment">//QueryBuilder qb2 = QueryBuilders.multiMatchQuery(&quot;git&quot;, &quot;title&quot;, &quot;content&quot;);</span></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>).setQuery(qb1).get();</span><br><span class="line"><span class="keyword">for</span> (SearchHit  searchHit: response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> * 这个相当于之前的分页，使用的是Scroll方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> termQuery(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">scrollResp</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>)</span><br><span class="line">        .addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC)</span><br><span class="line">        .setScroll(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60000</span>))</span><br><span class="line">        .setQuery(qb)</span><br><span class="line">        .setSize(<span class="number">1</span>).get(); </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : scrollResp.getHits().getHits()) &#123;</span><br><span class="line">    println(hit);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    scrollResp = client.prepareSearchScroll(scrollResp.getScrollId()).setScroll(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60000</span>)).execute().actionGet();</span><br><span class="line">&#125; <span class="keyword">while</span>(scrollResp.getHits().getHits().length != <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法四</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">SearchRequestBuilder</span> <span class="variable">srb1</span> <span class="operator">=</span> client.prepareSearch().setQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;kimchy&quot;</span>));</span><br><span class="line"><span class="type">SearchRequestBuilder</span> <span class="variable">srb2</span> <span class="operator">=</span> client.prepareSearch().setQuery(QueryBuilders.matchQuery(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">MultiSearchResponse</span> <span class="variable">sr</span> <span class="operator">=</span> client.prepareMultiSearch().add(srb1).add(srb2).get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (MultiSearchResponse.Item item : sr.getResponses()) &#123;</span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> item.getResponse();</span><br><span class="line"><span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法五</span></span><br><span class="line"><span class="comment"> * 这个方法先欠着，不是很懂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod5</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">sr</span> <span class="operator">=</span> client.prepareSearch()</span><br><span class="line">    .setQuery(QueryBuilders.matchAllQuery())</span><br><span class="line">    .addAggregation(</span><br><span class="line">            AggregationBuilders.terms(<span class="string">&quot;agg1&quot;</span>).field(<span class="string">&quot;field&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">    .addAggregation(</span><br><span class="line">            AggregationBuilders.dateHistogram(<span class="string">&quot;agg2&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;birth&quot;</span>)</span><br><span class="line">                    .dateHistogramInterval(DateHistogramInterval.YEAR)</span><br><span class="line">    )</span><br><span class="line">    .get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get your facet results</span></span><br><span class="line"><span class="type">Terms</span> <span class="variable">agg1</span> <span class="operator">=</span> sr.getAggregations().get(<span class="string">&quot;agg1&quot;</span>);</span><br><span class="line"><span class="comment">//DateHistogram agg2 = sr.getAggregations().get(&quot;agg2&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法六</span></span><br><span class="line"><span class="comment"> * 能运行，但是就是不知道为什么查询不到结果，同时感觉这种方法很鸡肋，感觉写起来很麻烦，顺便说一下这个东西好像也可以在script下配置，我测试失败，但是感觉没什么用，就不深究了。</span></span><br><span class="line"><span class="comment"> * https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-search-template.html</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchmethod6</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; json = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">json.put(<span class="string">&quot;param_gender&quot;</span>, <span class="string">&quot;1962&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchTemplateRequestBuilder</span>(client)</span><br><span class="line">        .setScript(<span class="string">&quot;&#123;\n&quot;</span> +                                  </span><br><span class="line">                <span class="string">&quot;        \&quot;query\&quot; : &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;match\&quot; : &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;year\&quot; : \&quot;&#123;&#123;param_gender&#125;&#125;\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        .setScriptType(ScriptType.INLINE)    </span><br><span class="line">        .setScriptParams(json)                  </span><br><span class="line">        .setRequest(<span class="keyword">new</span> <span class="title class_">SearchRequest</span>())                   </span><br><span class="line">        .get()                                             </span><br><span class="line">        .getResponse();   </span><br><span class="line">println(response);</span><br><span class="line">System.out.println(response.getHits().getTotalHits());</span><br><span class="line"><span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果SearchResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(SearchResponse response)</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-&quot;</span>);</span><br><span class="line">System.err.println(</span><br><span class="line"><span class="string">&quot;getFailedShards : &quot;</span> + response.getFailedShards() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getNumReducePhases : &quot;</span> + response.getNumReducePhases() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getScrollId : &quot;</span> + response.getScrollId() +  <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getTookInMillis : &quot;</span> + response.getTookInMillis() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getTotalShards : &quot;</span> + response.getTotalShards() +  <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getAggregations : &quot;</span> + response.getAggregations() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getProfileResults : &quot;</span> + response.getProfileResults() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getShardFailures : &quot;</span> + response.getShardFailures() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getSuggest : &quot;</span> + response.getSuggest() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getTook : &quot;</span> + response.getTook() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;isTerminatedEarly : &quot;</span> + response.isTerminatedEarly() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;isTimedOut : &quot;</span> + response.isTimedOut() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;remoteAddress : &quot;</span> + response.remoteAddress() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;status : &quot;</span> + response.status() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;getHits : &quot;</span> + response.getHits() </span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果SearchResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(SearchHit searchHit)</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-&quot;</span>);</span><br><span class="line">System.err.println( </span><br><span class="line"><span class="string">&quot;docId : &quot;</span> + searchHit.docId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getId : &quot;</span> + searchHit.getId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getIndex : &quot;</span> + searchHit.getIndex()+ <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getScore : &quot;</span> + searchHit.getScore() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getSourceAsString : &quot;</span> + searchHit.getSourceAsString() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getType : &quot;</span> + searchHit.getType() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getVersion : &quot;</span> + searchHit.getVersion() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;fieldsOrNull : &quot;</span> + searchHit.fieldsOrNull() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getExplanation : &quot;</span> + searchHit.getExplanation() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getFields : &quot;</span> + searchHit.getFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;highlightFields : &quot;</span> + searchHit.highlightFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;hasSource : &quot;</span> + searchHit.hasSource()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、DSL搜索"><a href="#二、DSL搜索" class="headerlink" title="二、DSL搜索"></a><strong>二、DSL搜索</strong></h2><p>DSL就是实现类似schema发出的请求一样的，这方面的介绍主要是在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/getting-started.html">https://www.elastic.co/guide/en/elasticsearch/reference/5.5/getting-started.html</a>和<a href="http://www.yiibai.com/elasticsearch/elasticsearch_index_apis.html">http://www.yiibai.com/elasticsearch/elasticsearch_index_apis.html</a>这两个地方，但是由于这里面的API是真的多，这里就介绍一部分，还有很多东西，可以有需要的时候去官网<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-query-dsl.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-query-dsl.html</a>看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.index.query.QueryBuilders.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;resource&quot;,&quot;deprecation&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testDSL</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> TransportClient client;</span><br><span class="line"></span><br><span class="line"><span class="comment">//https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-query-dsl.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">client = <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"><span class="comment">//_matchAllQuery();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从这往下是全文检索的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//_matchQuery();</span></span><br><span class="line"><span class="comment">//_multiMatchQuery();</span></span><br><span class="line"><span class="comment">//_commonTermsQuery();</span></span><br><span class="line"><span class="comment">//_queryStringQuery();</span></span><br><span class="line"><span class="comment">//_simpleQueryStringQuery();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从这往下主要运营与数字、日期、枚举等类型的检索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//_termQuery();</span></span><br><span class="line"><span class="comment">//_termsQuery();</span></span><br><span class="line"><span class="comment">//_rangeQuery();</span></span><br><span class="line"><span class="comment">//_existsQuery();</span></span><br><span class="line"><span class="comment">//_prefixQuery();</span></span><br><span class="line"><span class="comment">//_wildcardQuery();</span></span><br><span class="line"><span class="comment">//_fuzzyQuery();</span></span><br><span class="line"><span class="comment">//_typeQuery();</span></span><br><span class="line">_idsQuery();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一：获取所有</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_matchAllQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> matchAllQuery();</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二：指定单查询条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_matchQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> matchQuery(</span><br><span class="line"><span class="string">&quot;user&quot;</span> , </span><br><span class="line"><span class="string">&quot;kimchy&quot;</span>   </span><br><span class="line">);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法三：指定多查询条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_multiMatchQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> multiMatchQuery(</span><br><span class="line">    <span class="string">&quot;kimchy elasticsearch&quot;</span>, </span><br><span class="line">    <span class="string">&quot;user&quot;</span>, <span class="string">&quot;message&quot;</span>       </span><br><span class="line">);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法四：感觉和方法二_matchQuery一样，不知道差别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_commonTermsQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> commonTermsQuery(<span class="string">&quot;user&quot;</span>,    </span><br><span class="line">                <span class="string">&quot;kimchy&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法五：+包含 -除外,但是这个查询没有结果，很奇怪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_queryStringQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> queryStringQuery(<span class="string">&quot;+kimchy -elasticsearch&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法六：+包含 -除外</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_simpleQueryStringQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> simpleQueryStringQuery(<span class="string">&quot;+kimchy -elasticsearch&quot;</span>);  </span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法七_:termQuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_termQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> termQuery(</span><br><span class="line">    <span class="string">&quot;user&quot;</span>,    </span><br><span class="line">    <span class="string">&quot;kimchy&quot;</span>   </span><br><span class="line">);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法八:_termsQuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_termsQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> termsQuery(<span class="string">&quot;tags&quot;</span>,    </span><br><span class="line">    <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;pill&quot;</span>);   </span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法九:_rangeQuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_rangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> rangeQuery(<span class="string">&quot;price&quot;</span>)   </span><br><span class="line">    .from(<span class="number">5</span>)                            </span><br><span class="line">    .to(<span class="number">10</span>)                             </span><br><span class="line">    .includeLower(<span class="literal">true</span>)                 </span><br><span class="line">    .includeUpper(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// A simplified form using gte, gt, lt or lte</span></span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">_qb</span> <span class="operator">=</span> rangeQuery(<span class="string">&quot;age&quot;</span>)   </span><br><span class="line">    .gte(<span class="string">&quot;10&quot;</span>)                        </span><br><span class="line">    .lt(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十:_existsQuery</span></span><br><span class="line"><span class="comment"> * 匹配含有user字段的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_existsQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> existsQuery(<span class="string">&quot;user&quot;</span>); </span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十一:_prefixQuery</span></span><br><span class="line"><span class="comment"> * 匹配user中前缀为fds的记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_prefixQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> prefixQuery(</span><br><span class="line">    <span class="string">&quot;user&quot;</span>,    </span><br><span class="line">    <span class="string">&quot;fds&quot;</span>     </span><br><span class="line">);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十二:_wildcardQuery</span></span><br><span class="line"><span class="comment"> * 通配符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_wildcardQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> wildcardQuery(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;k?mc*&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十三:_fuzzyQuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_fuzzyQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> fuzzyQuery(</span><br><span class="line">    <span class="string">&quot;user&quot;</span>,     </span><br><span class="line">    <span class="string">&quot;kimzhy&quot;</span>    </span><br><span class="line">);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十四:_typeQuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_typeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> typeQuery(<span class="string">&quot;movie&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法十五:_idsQuery</span></span><br><span class="line"><span class="comment"> * 类型是可选的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_idsQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryBuilder</span> <span class="variable">qb</span> <span class="operator">=</span> idsQuery(<span class="string">&quot;movie&quot;</span>) </span><br><span class="line">    .addIds(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">dealQueryBuilder(qb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这部分代码的复用性太高了，抽离出来。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dealQueryBuilder</span><span class="params">(QueryBuilder qb)</span>&#123;</span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>).setQuery(qb).get();</span><br><span class="line"><span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果SearchResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(SearchHit searchHit)</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-&quot;</span>);</span><br><span class="line">System.err.println( </span><br><span class="line"><span class="string">&quot;docId : &quot;</span> + searchHit.docId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getId : &quot;</span> + searchHit.getId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getIndex : &quot;</span> + searchHit.getIndex()+ <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getScore : &quot;</span> + searchHit.getScore() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getSourceAsString : &quot;</span> + searchHit.getSourceAsString() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getType : &quot;</span> + searchHit.getType() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getVersion : &quot;</span> + searchHit.getVersion() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;fieldsOrNull : &quot;</span> + searchHit.fieldsOrNull() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getExplanation : &quot;</span> + searchHit.getExplanation() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getFields : &quot;</span> + searchHit.getFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;highlightFields : &quot;</span> + searchHit.highlightFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;hasSource : &quot;</span> + searchHit.hasSource()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、分词、排序、高亮"><a href="#三、分词、排序、高亮" class="headerlink" title="三、分词、排序、高亮"></a><strong>三、分词、排序、高亮</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.FieldSortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;resource&quot;, &quot;deprecation&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//fenye();</span></span><br><span class="line">sort();</span><br><span class="line"><span class="comment">//highlighter();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fenye</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>)</span><br><span class="line">.setQuery(QueryBuilders.matchAllQuery())</span><br><span class="line">.setFrom(<span class="number">10</span>) </span><br><span class="line">.setSize(<span class="number">20</span>)</span><br><span class="line">.execute().actionGet();</span><br><span class="line"><span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>)</span><br><span class="line">.setQuery(QueryBuilders.matchAllQuery())</span><br><span class="line">.addSort(<span class="string">&quot;postDate&quot;</span>, SortOrder.ASC)</span><br><span class="line">.execute().actionGet();</span><br><span class="line"><span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高亮</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">highlighter</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"> <span class="type">QueryBuilder</span> <span class="variable">matchQuery</span> <span class="operator">=</span> QueryBuilders.matchQuery(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>);</span><br><span class="line">        HighlightBuilder hiBuilder=<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">        hiBuilder.preTags(<span class="string">&quot;&lt;h2&gt;&quot;</span>);</span><br><span class="line">        hiBuilder.postTags(<span class="string">&quot;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        hiBuilder.field(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 搜索数据</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;movies&quot;</span>)</span><br><span class="line">                .setQuery(matchQuery)</span><br><span class="line">                .highlighter(hiBuilder)</span><br><span class="line">                .execute().actionGet();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">println(searchHit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果SearchResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(SearchHit searchHit)</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-&quot;</span>);</span><br><span class="line">System.err.println( </span><br><span class="line"><span class="string">&quot;docId : &quot;</span> + searchHit.docId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getId : &quot;</span> + searchHit.getId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getIndex : &quot;</span> + searchHit.getIndex()+ <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getScore : &quot;</span> + searchHit.getScore() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getSourceAsString : &quot;</span> + searchHit.getSourceAsString() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getType : &quot;</span> + searchHit.getType() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getVersion : &quot;</span> + searchHit.getVersion() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;fieldsOrNull : &quot;</span> + searchHit.fieldsOrNull() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getExplanation : &quot;</span> + searchHit.getExplanation() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;getFields : &quot;</span> + searchHit.getFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;highlightFields : &quot;</span> + searchHit.highlightFields() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;hasSource : &quot;</span> + searchHit.hasSource()</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码我放在<a href="http://download.csdn.net/detail/q15150676766/9920331">http://download.csdn.net/detail/q15150676766/9920331</a>这里了，有需要的可以去下载看看</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（8）Java API实现增删改查</title>
      <link href="/post/59312/"/>
      <url>/post/59312/</url>
      
        <content type="html"><![CDATA[<p>ElasticSearch虽然很多时候可以直接通过schema获取数据，但是有的时候也需要自己手写API来实现自定义的功能。本篇主要是elasticsearch提供的API的学习。</p><p>这个是官网的教程链接<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-api.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-api.html</a></p><p>下面的代码直接拷贝到本地编辑器应该是可以直接运行的。由于代码量较多，而且比较简单，这里不做过多的解释，不理解的地方可以去看看官网的教程，还是很好理解的。</p><p>稍稍评价一下，elasticsearch的API基本上把所有的情况都考虑到了，是一个很全的API，但是由于太多了，感觉不是很能研究的过来，就算全部研究了，也不一定能全部记得住，经常用的大概就那么几个API吧。</p><h2 id="一、构建项目"><a href="#一、构建项目" class="headerlink" title="一、构建项目"></a><strong>一、构建项目</strong></h2><p>新建一个maven java项目。<br>pom.xml文件中添加下面这些东西</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在项目根目录下添加log4j2.properties文件，复制下面的东西进去，当然也可以使用slf的日志文件，这里就不配置了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appender.console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.console.name</span> = <span class="string">console</span></span><br><span class="line"><span class="attr">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rootLogger.level</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">rootLogger.appenderRef.console.ref</span> = <span class="string">console</span></span><br></pre></td></tr></table></figure><p>配置很简单，到这基本上就算是配置完成了。</p><h2 id="二、声明client"><a href="#二、声明client" class="headerlink" title="二、声明client"></a><strong>二、声明client</strong></h2><p>这个还是很好理解的，感觉看代码应该就能懂，不做过多的介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.reindex.DeleteByQueryAction;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.reindex.DeleteByQueryRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">method1();</span><br><span class="line">method2();</span><br><span class="line">method3();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集群名字，默认是elasticsearch，可以在elasticsearch.yml中进行修改。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">Settings</span> <span class="variable">settings</span> <span class="operator">=</span> Settings.builder().put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;elasticsearch&quot;</span>).build();</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(settings)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * put(&quot;client.transport.sniff&quot;, true)这东西在自己的服务器报错，在公司的服务器不会报错。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">Settings</span> <span class="variable">settings</span> <span class="operator">=</span> Settings.builder().put(<span class="string">&quot;client.transport.ignore_cluster_name&quot;</span>, <span class="string">&quot;true&quot;</span>).put(<span class="string">&quot;client.transport.sniff&quot;</span>, <span class="literal">true</span>).build();</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(settings)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DeleteByQueryRequestBuilder</span>(client, DeleteByQueryAction.INSTANCE).source(<span class="string">&quot;movies&quot;</span>).execute().actionGet();</span><br><span class="line"></span><br><span class="line">client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、添加索引信息"><a href="#三、添加索引信息" class="headerlink" title="三、添加索引信息"></a><strong>三、添加索引信息</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;deprecation&quot;, &quot;resource&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestIndex</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">indexmethod1();</span><br><span class="line">indexmethod2();</span><br><span class="line">indexmethod3();</span><br><span class="line">indexmethod4();</span><br><span class="line">indexmethod5();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexmethod1</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareIndex(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">.setSource(jsonBuilder().startObject()</span><br><span class="line">.field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;trying out Elasticsearch&quot;</span>).endObject())</span><br><span class="line">.get();</span><br><span class="line"></span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexmethod2</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;postDate\&quot;:\&quot;2017-07-30\&quot;,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareIndex(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        .setSource(json)</span><br><span class="line">        .get();</span><br><span class="line"></span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexmethod3</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; json = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">json.put(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;kimchy&quot;</span>);</span><br><span class="line">json.put(<span class="string">&quot;postDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">json.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;trying out Elasticsearch&quot;</span>);</span><br><span class="line"><span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareIndex(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        .setSource(json)</span><br><span class="line">        .get();</span><br><span class="line">println(response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法四</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexmethod4</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>();</span><br><span class="line">indexRequest.index(<span class="string">&quot;movies&quot;</span>);</span><br><span class="line">indexRequest.type(<span class="string">&quot;movie&quot;</span>);</span><br><span class="line">indexRequest.id(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">indexRequest.source(jsonBuilder().startObject()</span><br><span class="line">.field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;trying out Elasticsearch&quot;</span>).endObject());</span><br><span class="line">client.index(indexRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法五</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">indexmethod5</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"><span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;movies&quot;</span>,<span class="string">&quot;movie&quot;</span>,<span class="string">&quot;20&quot;</span>)</span><br><span class="line">.source(jsonBuilder().startObject()</span><br><span class="line">.field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">.field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;trying out Elasticsearch&quot;</span>).endObject());</span><br><span class="line">client.index(indexRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(IndexResponse response)</span>&#123;</span><br><span class="line">System.err.println(</span><br><span class="line"><span class="string">&quot;status：&quot;</span>+response.status()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ID：&quot;</span>+response.getId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Index：&quot;</span>+response.getIndex()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Type：&quot;</span>+response.getType()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Version：&quot;</span>+response.getVersion()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Result：&quot;</span>+response.getResult()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardID：&quot;</span>+response.getShardId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardInfo：&quot;</span>+response.getShardInfo()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、更新索引"><a href="#四、更新索引" class="headerlink" title="四、更新索引"></a><strong>四、更新索引</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.script.Script;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;resource&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testUpdate</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">updatemethod5();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatemethod1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>();</span><br><span class="line">updateRequest.index(<span class="string">&quot;movies&quot;</span>);</span><br><span class="line">updateRequest.type(<span class="string">&quot;movie&quot;</span>);</span><br><span class="line">updateRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">updateRequest.doc(jsonBuilder()</span><br><span class="line">        .startObject()</span><br><span class="line">            .field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .endObject());</span><br><span class="line">client.update(updateRequest).get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatemethod2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">UpdateResponse</span> <span class="variable">response</span> <span class="operator">=</span>client.prepareUpdate(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">.setDoc(jsonBuilder().startObject()</span><br><span class="line">.field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">.endObject())</span><br><span class="line">.get();</span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法三</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatemethod3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">        .script(<span class="keyword">new</span> <span class="title class_">Script</span>(<span class="string">&quot;ctx._source.user = \&quot;3\&quot;&quot;</span>));</span><br><span class="line">client.update(updateRequest).get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法四</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatemethod4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">client.prepareUpdate(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">        .setScript(<span class="keyword">new</span> <span class="title class_">Script</span>(<span class="string">&quot;ctx._source.user = \&quot;10\&quot;&quot;</span>))</span><br><span class="line">        .get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法五</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> * 上面的任一方法，只要索引中没有该字段，就自动添加该字段，若有，则修改该字段的值</span></span><br><span class="line"><span class="comment"> * 创建索引的办法基本上都可以用来修改索引的信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatemethod5</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">client.prepareUpdate(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">        .setScript(<span class="keyword">new</span> <span class="title class_">Script</span>(<span class="string">&quot;ctx._source.waaaa = \&quot;10\&quot;&quot;</span>))</span><br><span class="line">        .get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(UpdateResponse response)</span>&#123;</span><br><span class="line">System.err.println(</span><br><span class="line"><span class="string">&quot;status：&quot;</span>+response.status()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ID：&quot;</span>+response.getId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Index：&quot;</span>+response.getIndex()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Type：&quot;</span>+response.getType()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Version：&quot;</span>+response.getVersion()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Result：&quot;</span>+response.getResult()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardID：&quot;</span>+response.getShardId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardInfo：&quot;</span>+response.getShardInfo()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、获取索引"><a href="#五、获取索引" class="headerlink" title="五、获取索引"></a><strong>五、获取索引</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.MultiGetItemResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.MultiGetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;resource&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testGet</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">getmethod2();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getmethod1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//.get()和.action().actionGet得到的结果是一样的，区别是单线程的还是多线程的</span></span><br><span class="line"><span class="comment">//GetResponse response = client.prepareGet(&quot;movies&quot;, &quot;movie&quot;, &quot;1&quot;).get();</span></span><br><span class="line"><span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareGet(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;1&quot;</span>).execute().actionGet();</span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getmethod2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">MultiGetResponse</span> <span class="variable">multiGetItemResponses</span> <span class="operator">=</span> client.prepareMultiGet()</span><br><span class="line">    .add(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;1&quot;</span>)           </span><br><span class="line">    .add(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;10&quot;</span>) </span><br><span class="line">    .get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (MultiGetItemResponse itemResponse : multiGetItemResponses) &#123; </span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> itemResponse.getResponse();</span><br><span class="line">    <span class="keyword">if</span>(response.isExists())</span><br><span class="line">    println(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果GetResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(GetResponse response)</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-&quot;</span>);</span><br><span class="line">System.err.println(<span class="string">&quot;SourceAsString : &quot;</span>);</span><br><span class="line">System.err.println(response.getSourceAsString());</span><br><span class="line">System.err.println(<span class="string">&quot;Source : &quot;</span>);</span><br><span class="line">System.err.println(response.getSource());</span><br><span class="line">System.err.println(<span class="string">&quot;SourceAsMap : &quot;</span>);</span><br><span class="line">System.err.println(response.getSourceAsMap());</span><br><span class="line">System.err.println( <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;isExists : &quot;</span> + response.isExists() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;type : &quot;</span> + response.getType() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;id : &quot;</span> + response.getId() +  <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;version : &quot;</span> + response.getVersion() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;fields : &quot;</span> + response.getFields() +  <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;remoteAddress : &quot;</span> + response.remoteAddress() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;sourceEmpty : &quot;</span> + response.isSourceEmpty() </span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、删除索引"><a href="#六、删除索引" class="headerlink" title="六、删除索引"></a><strong>六、删除索引</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.reindex.BulkByScrollResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.reindex.DeleteByQueryAction;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testDelete</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">deletemethod6();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod1</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareDelete(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;1&quot;</span>).get();</span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">BulkByScrollResponse</span> <span class="variable">response</span> <span class="operator">=</span></span><br><span class="line">    DeleteByQueryAction.INSTANCE.newRequestBuilder(client)</span><br><span class="line">        .filter(QueryBuilders.matchQuery(<span class="string">&quot;year&quot;</span>, <span class="string">&quot;1962&quot;</span>)) </span><br><span class="line">        .source(<span class="string">&quot;movies&quot;</span>)                                  </span><br><span class="line">        .get();     </span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法三</span></span><br><span class="line"><span class="comment"> * 这个不能删除，很奇怪，感觉和下面那个方法相同，但是下面那个方法可以删除成功，不知道为什么</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>();</span><br><span class="line">deleteRequest.index(<span class="string">&quot;movies&quot;</span>);</span><br><span class="line">deleteRequest.type(<span class="string">&quot;movie&quot;</span>);</span><br><span class="line">deleteRequest.id(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">client.delete(deleteRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法四</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;movies&quot;</span>,<span class="string">&quot;movie&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">client.delete(deleteRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法五</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> * 清楚指定索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod5</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">DeleteIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.admin().indices()    </span><br><span class="line">                .prepareDelete(<span class="string">&quot;movies&quot;</span>)    </span><br><span class="line">                .execute().actionGet(); </span><br><span class="line">println(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法六</span></span><br><span class="line"><span class="comment"> * 清空索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deletemethod6</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line">  </span><br><span class="line">        <span class="type">ClusterStateResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.admin().cluster()    </span><br><span class="line">                .prepareState()    </span><br><span class="line">                .execute().actionGet();  </span><br><span class="line">        <span class="comment">//获取所有索引  </span></span><br><span class="line">        String[] indexs=response.getState().getMetaData().getConcreteAllIndices();  </span><br><span class="line">        <span class="keyword">for</span> (String index : indexs) &#123;  </span><br><span class="line">            <span class="comment">//清空所有索引。  </span></span><br><span class="line">            <span class="type">DeleteIndexResponse</span> <span class="variable">deleteIndexResponse</span> <span class="operator">=</span> client.admin().indices()    </span><br><span class="line">                    .prepareDelete(index)    </span><br><span class="line">                    .execute().actionGet();    </span><br><span class="line">           println(deleteIndexResponse);</span><br><span class="line">              </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出DeleteResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(DeleteResponse response)</span>&#123;</span><br><span class="line">System.err.println(</span><br><span class="line"><span class="string">&quot;status：&quot;</span>+response.status()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ID：&quot;</span>+response.getId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Type：&quot;</span>+response.getType()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Index：&quot;</span>+response.getIndex()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Result：&quot;</span>+response.getResult()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;Version：&quot;</span>+response.getVersion()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardID：&quot;</span>+response.getShardId()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">+<span class="string">&quot;ShardInfo：&quot;</span>+response.getShardInfo()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出BulkByScrollResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(BulkByScrollResponse response)</span>&#123;</span><br><span class="line">System.out.println(</span><br><span class="line">  <span class="string">&quot;BulkRetries = &quot;</span> + response.getBulkRetries() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;SearchRetries = &quot;</span> + response.getSearchRetries() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Created = &quot;</span> + response.getCreated() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Deleted = &quot;</span> + response.getDeleted() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Updated = &quot;</span> + response.getUpdated() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;ReasonCancelled = &quot;</span> + response.getReasonCancelled() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;VersionConflicts = &quot;</span> + response.getVersionConflicts() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;BulkFailures = &quot;</span> + response.getBulkFailures() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;SearchFailures = &quot;</span> + response.getSearchFailures() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Batches = &quot;</span> + response.getBatches() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Noops = &quot;</span> + response.getNoops() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Status = &quot;</span> + response.getStatus() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">+ <span class="string">&quot;Took = &quot;</span> + response.getTook() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出BulkByScrollResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(DeleteIndexResponse response)</span>&#123;</span><br><span class="line">System.out.println(</span><br><span class="line"><span class="string">&quot;isAcknowledged = &quot;</span> + response.isAcknowledged() + <span class="string">&quot;\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;remoteAddress = &quot;</span> + response.remoteAddress() + <span class="string">&quot;\n&quot;</span> </span><br><span class="line">);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、批量操作索引"><a href="#七、批量操作索引" class="headerlink" title="七、批量操作索引"></a><strong>七、批量操作索引</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BackoffPolicy;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkProcessor;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.ByteSizeUnit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.ByteSizeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testBulk</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">bulkmethod2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bulkmethod1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">BulkRequestBuilder</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> client.prepareBulk();</span><br><span class="line"></span><br><span class="line">bulkRequest.add(client.prepareIndex(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">        .setSource(jsonBuilder()</span><br><span class="line">                    .startObject()</span><br><span class="line">                        .field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                        .field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;trying out Elasticsearch&quot;</span>)</span><br><span class="line">                    .endObject()</span><br><span class="line">                  )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">bulkRequest.add(client.prepareIndex(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">        .setSource(jsonBuilder()</span><br><span class="line">                    .startObject()</span><br><span class="line">                        .field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                        .field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;another post&quot;</span>)</span><br><span class="line">                    .endObject()</span><br><span class="line">                  )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"><span class="type">BulkResponse</span> <span class="variable">bulkResponse</span> <span class="operator">=</span> bulkRequest.get();</span><br><span class="line"><span class="keyword">if</span> (bulkResponse.hasFailures()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;处理添加失败的地方&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bulkmethod2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(Settings.EMPTY)</span><br><span class="line">.addTransportAddress(<span class="keyword">new</span> <span class="title class_">InetSocketTransportAddress</span>(InetAddress.getByName(<span class="string">&quot;106.14.112.215&quot;</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">BulkProcessor</span> <span class="variable">bulkProcessor</span> <span class="operator">=</span> BulkProcessor.builder(client, <span class="keyword">new</span> <span class="title class_">BulkProcessor</span>.Listener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeBulk</span><span class="params">(<span class="type">long</span> executionId, BulkRequest request)</span> &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;批量操作之前&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterBulk</span><span class="params">(<span class="type">long</span> executionId, BulkRequest request, BulkResponse response)</span> &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;批量操作之后，且不抛出异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterBulk</span><span class="params">(<span class="type">long</span> executionId, BulkRequest request, Throwable failure)</span> &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;批量操作之后，但不抛出异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).setBulkActions(<span class="number">10000</span>) </span><br><span class="line">       .setBulkSize(<span class="keyword">new</span> <span class="title class_">ByteSizeValue</span>(<span class="number">5</span>, ByteSizeUnit.MB)) </span><br><span class="line">       .setFlushInterval(TimeValue.timeValueSeconds(<span class="number">5</span>)) </span><br><span class="line">       .setConcurrentRequests(<span class="number">1</span>) </span><br><span class="line">       .setBackoffPolicy(BackoffPolicy.exponentialBackoff(TimeValue.timeValueMillis(<span class="number">100</span>), <span class="number">3</span>)) </span><br><span class="line">       .build();</span><br><span class="line"></span><br><span class="line">bulkProcessor.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">        .source(jsonBuilder()</span><br><span class="line">                    .startObject()</span><br><span class="line">                        .field(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;kimchy&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;postDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                        .field(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;trying out Elasticsearch&quot;</span>)</span><br><span class="line">                    .endObject()</span><br><span class="line">                  )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">bulkProcessor.add(<span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;movies&quot;</span>, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">bulkProcessor.flush();</span><br><span class="line">bulkProcessor.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码我放在<a href="http://download.csdn.net/detail/q15150676766/9920331">http://download.csdn.net/detail/q15150676766/9920331</a>这里了，有需要的可以去下载看看</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（7）请求的发送</title>
      <link href="/post/30881/"/>
      <url>/post/30881/</url>
      
        <content type="html"><![CDATA[<h2 id="请求的发送"><a href="#请求的发送" class="headerlink" title="请求的发送"></a>请求的发送</h2><h4 id="最简单的请求"><a href="#最简单的请求" class="headerlink" title="最简单的请求"></a>最简单的请求</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="在指定域中查找"><a href="#在指定域中查找" class="headerlink" title="在指定域中查找"></a>在指定域中查找</h4><p>这里把所有的域都列出来了，同时这里面的域的名称就是数据库中表字段的名称</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;title&quot;</span><span class="punctuation">,</span>            #文章的标题</span><br><span class="line">            <span class="string">&quot;content&quot;</span>           #文章、动态、评论、回复的内容（同名但不同类型）</span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="高亮关键词"><a href="#高亮关键词" class="headerlink" title="高亮关键词"></a>高亮关键词</h4><p>这里有一个很不方便的地方，就是在高亮的时候，query_string下必须要有fields字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;content&quot;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;strong&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/strong&gt;&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;span&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="过滤部分字段"><a href="#过滤部分字段" class="headerlink" title="过滤部分字段"></a>过滤部分字段</h2><p>查询出来的结果中通常会包括一些不是很有用的字段，_source中有includes（包含）和excludes（排除），可以指定需要哪些返回的字段和不需要的字段。<br>这里排除的是一些基本上用不到的字段或者重复出现的字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;content&quot;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;strong&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/strong&gt;&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;excludes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;@version&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>这里是以ID降序排序，然后title升序排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;content&quot;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;strong&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/strong&gt;&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;span&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="类别查询"><a href="#类别查询" class="headerlink" title="类别查询"></a>类别查询</h2><p>若需要指定查找类型，只需要在url中添加类型即可，其中类型名字与数据库表名相同。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/fund/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query_string&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华夏&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（6）分页，排序，指定字段和kibana的安装</title>
      <link href="/post/30206/"/>
      <url>/post/30206/</url>
      
        <content type="html"><![CDATA[<p>在搜索引擎中，索引建立完之后，只能算是完成了一部分，搜索引擎还涉及到分页，排序，显示等这一些问题，由于在elasticsearch中这些问题都涉及的比较好，实现起来比较简单，这里就一起介绍了。</p><h2 id="1、分页"><a href="#1、分页" class="headerlink" title="1、分页"></a><strong>1、分页</strong></h2><p>在elasticsearch中有两种分页查询的方法，一种叫做浅分页，一种叫做深分页。</p><h3 id="浅分页"><a href="#浅分页" class="headerlink" title="浅分页"></a><strong>浅分页</strong></h3><p>下面这个就是浅查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其实单词的意思已经很明确了，但还是解释一下，size表示每一页显示2条数据，from表示从第10页开始，也就是说显示的信息是从20-22条数据。这里的排序使用的是默认评分排序。（惭愧，这个评分机制没有去研究）</p><p>这个实现的原理是将前22条数据都查询出来，然后根据需要将20-22条数据取出，很显然这种方式在查询页数很多的时候基本上就不能用了，如果查询第50000-50002条数据，需要将前50002数据都取出来，不管从空间还是从时间上都会爆炸的。</p><p>不同的博客有不同的说法，有的人说这种查询最多支持10000，也有说50000的，反正就是不能很大。</p><h3 id="深分页"><a href="#深分页" class="headerlink" title="深分页"></a><strong>深分页</strong></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /_search?scroll=<span class="number">1</span>m</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个就是深查询，采用scroll查询，这个查询结果会出现一个scroll_id，就是下面这个，scroll&#x3D;1m表示这个scroll_id维持的时间是1分钟，如果这1分钟没有继续查询，那么这个id就会失效。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;_scroll_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DnF1ZXJ5VGhlbkZldGNoEAAAAAAAAC_zFlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAwAhZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_QWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_1FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv9hZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_cWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_4FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv-RZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_oWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_7FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv_BZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_0WVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_-FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv_xZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAMAAWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAADABFlVSRk93LUQtUnJTNEVMZHFDNFZPRWc=&quot;</span></span><br></pre></td></tr></table></figure><p>接下来，要查询下一页就按照下面这么做就好了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_search/scroll</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scroll&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1m&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scroll_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;DnF1ZXJ5VGhlbkZldGNoEAAAAAAAAC_zFlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAwAhZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_QWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_1FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv9hZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_cWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_4FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv-RZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_oWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_7FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv_BZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAL_0WVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAAC_-FlVSRk93LUQtUnJTNEVMZHFDNFZPRWcAAAAAAAAv_xZVUkZPdy1ELVJyUzRFTGRxQzRWT0VnAAAAAAAAMAAWVVJGT3ctRC1SclM0RUxkcUM0Vk9FZwAAAAAAADABFlVSRk93LUQtUnJTNEVMZHFDNFZPRWc=&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这种东西就避免了上面的问题，这个id就相当于一个指针的作用，避免了一次性取出过多的数据，但是这种查询方式也有弊端，那就是无法指定页数查询（准确说是我不知道怎么指定页数），只能按顺序一页一页查询。</p><p>稍微自己总结一下分页：如果是实现类似百度这种的搜索引擎，可以使用第一种方式，因为用户不可能一下子查看那么多信息，而且第一种方式更加灵活；如果是要将所有数据都全部获取到，则可以使用第二种方式，取出所有数据，便和怎么取没多大关系，之后的操作可以将数据取出之后自己再另做操作。</p><hr><h2 id="2、排序"><a href="#2、排序" class="headerlink" title="2、排序"></a><strong>2、排序</strong></h2><p>排序的可以按照下面的方式来：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST test01/test02/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;good&quot;</span><span class="punctuation">:</span>   <span class="punctuation">&#123;</span> <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就是说先以“good”字段降序排序，如果字段“good”相同，则按照“num”字段降序排序。</p><p>这个感觉还是很好理解的。</p><hr><h2 id="3、选择返回字段"><a href="#3、选择返回字段" class="headerlink" title="3、选择返回字段"></a><strong>3、选择返回字段</strong></h2><p>在搜索的时候返回的字段里面可能并不是所有的字段都是需要的，部分加入索引的字段可能只是辅助作用，若这个字段也全都返回，尤其当这个字段的数据量比较大的时候，就很浪费网络资源了</p><p>在elasticsearch中通过_source来要求返回的字段是哪些，这里就是只要求返回：”contactperson”,”img”两个字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test01/alumniassociation/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;includes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;contactperson&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;img&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个也是很简单的，一看就懂的那种。</p><hr><h2 id="4、指定创建索引的字段"><a href="#4、指定创建索引的字段" class="headerlink" title="4、指定创建索引的字段"></a><strong>4、指定创建索引的字段</strong></h2><p>添加进索引的时候有时候需要指定某些字段是不需要分词或者根本就不用建立索引的（我个人感觉这些字段在很多时候是没有用的，添加进所有浪费资源，或者我还没有用到高级的功能吧），这个时候虽然可以在创建索引mapping是指定analyzer是no还是not-analyzer的，但是这样需要写很多个mapping，显然是不存在的，而且在logstash中也没有办法动态指定需要被analyzer的字段。</p><p>在使用logstash同步mysql的时候，配置conf文件的时候需要写入sql语句，类似“select * from test02”，这样的，这样是将所有的字段都添加入索引，如果写成“select id，title，summary from Test02”，则这个时候重新创建索引，只是将指定的字段添加进索引，其他的字段是不会被添加进索引的。</p><h2 id="5、kibana的安装"><a href="#5、kibana的安装" class="headerlink" title="5、kibana的安装"></a><strong>5、kibana的安装</strong></h2><p>下载地址：<a href="https://www.elastic.co/downloads/kibana">https://www.elastic.co/downloads/kibana</a><br>根据需要下载，如果是在linux下，就下载rpm或者linux版本的，我下载的是<a href="https://artifacts.elastic.co/downloads/kibana/kibana-5.5.0-linux-x86_64.tar.gz">这个版本</a>，就是linux版本的，直接在linux下解压之后就可以使用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kibana-5.5.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>修改kibana.yml中的一些信息，便于外网可以访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.host &quot;localhost&quot;</span><br><span class="line">改为（注意空格）</span><br><span class="line">server.host &quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure><p>然后进入到并目录下，启动服务就可以了，ELK基本上都是拆箱即用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-5.5.0-linux-x86_64/bin</span><br><span class="line">./kibana </span><br></pre></td></tr></table></figure><p>然后访问公网IP:5601，kibana会自动去访问9200，也就是elasticsearch的端口号（当然elasticsearch这个时候必须启动着），然后就可以使用kibana了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://106.14.112.215:5601</span><br></pre></td></tr></table></figure><p>其中Kibana中的Dev Tools 就是Kibana5新添加进入的，和sense的界面完全相同。</p><p>界面长这个样子<br><img src="https://img.ncfl.tech/202305022136193.png" alt="这里写图片描述"></p><p>关闭kibana下面两个命令都是找不到进程的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep kibana</span><br><span class="line">ps -ef|grep 5301</span><br></pre></td></tr></table></figure><p>需要用这个命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -n tcp 5601</span><br></pre></td></tr></table></figure><p>然后kill进程就可以关闭kibana了。</p><hr><p>到这里为止，基本上elasticsearch的基础都看完了，接下来想去试试实现他的java api。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（5）在logstash中配置分词器和同义词过滤器</title>
      <link href="/post/39047/"/>
      <url>/post/39047/</url>
      
        <content type="html"><![CDATA[<h2 id="1、ik-pinyin分词器"><a href="#1、ik-pinyin分词器" class="headerlink" title="1、ik+pinyin分词器"></a><strong>1、ik+pinyin分词器</strong></h2><p>在之前的一篇文章中配置了IK分词器，在这里说一下怎么使elasticsearch可以同时使用两个分词器：主要是参考这位老哥的<a href="http://blog.csdn.net/napoay/article/details/53907921">http://blog.csdn.net/napoay/article/details/53907921</a>的做法。</p><p>这里还是主要使用sense，主要是kibana还没有搞清楚具体怎么使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT /medcl/</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;ik_pinyin_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;my_pinyin&quot;</span><span class="punctuation">,</span> <span class="string">&quot;word_delimiter&quot;</span><span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;my_pinyin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;first_letter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefix&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;padding_char&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>输入这些东西，稍微解释一下子：创建一个为medcl的index，然后自定义一个分词器analyzer叫做ik_pinyin_analyzer，使用的是ik_smart进行分词，然后添加两个过滤器，一个是自定义的my_pinyin，另一个是elasticsearch原本就有的word_delimiter，my_pinyin使用的就是拼音分词器过滤的。elasticsearch自带的过滤器有很多，<a href="http://blog.csdn.net/i6448038/article/details/50625397">http://blog.csdn.net/i6448038/article/details/50625397</a>这篇博客中写的很详细。</p><p>然后建议一个type为folks的mapping，此时使用的就是刚刚自己定义的ik_pinyin_analyzer作为分词器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /medcl/folks/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;folks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;pinyin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;store&quot;</span><span class="punctuation">:</span> <span class="string">&quot;no&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;term_vector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;with_positions_offsets&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_pinyin_analyzer&quot;</span>     </span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>往服务器中添加两条索引信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /medcl/folks/andy </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;刘德华&quot;</span><span class="punctuation">,</span><span class="string">&quot;刘邦&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line">POST /medcl/folks/tina</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;中华人民共和国国歌&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>测试一下是否可以被查询到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /medcl/folks/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name.pinyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国歌&quot;</span>#改成zhonghua测试拼音的是否通过</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查询到的结果长这样子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">2.6638038</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medcl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;folks&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tina&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">2.6638038</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中华人民共和国国歌&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;name.pinyin&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;&lt;em&gt;中华人民共和国&lt;/em&gt;&lt;em&gt;国歌&lt;/em&gt;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medcl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;folks&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;andy&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.22009256</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;刘德华&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="string">&quot;刘邦&quot;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;name.pinyin&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;&lt;em&gt;刘德华&lt;/em&gt;&quot;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、同义词的配置"><a href="#2、同义词的配置" class="headerlink" title="2、同义词的配置"></a><strong>2、同义词的配置</strong></h2><p>上面的内容不是本文的重点，接下来才是本文的重点：配置同义词。</p><p>在config文件下新建一个目录analysis用来存放同义词文件，新建文件synonyms.txt，里面存放同义词，这里存放同义词的方式有两种：（注意是英文状态的逗号）</p><p>还有一点要注意的，就是文件保存的格式，尤其是在本地编辑之后上传到服务器的，要把文件保存成utf-8格式的，要不然会报错的。</p><p>第一种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中文,汉语</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中文,汉语=&gt;中文</span><br></pre></td></tr></table></figure><p>第一种在分词的时候，有“中文”的地方，都会解析成“中文,汉语”，把“中文,汉语”存入索引中。<br>第二种在分词的时候，“中文,汉语”都会解析成为“中文”，然后把“中文”存入索引中。<br>两种实现的功能是一样的，我才用的是第一种，这种维护起来比较好维护。定义好同义词文件之后重启es。</p><p>和刚刚创建的ik_pinyin分词器使想相同的，创建一个名为xjs的index，里面定义了两种分词器，一种是by_smart，另一种是ik_max_word，两个都采用了自己定义的同义词过滤器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT /xjs</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;by_smart&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;by_sfr&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;by_max_word&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;by_sfr&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;by_sfr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;synonym&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;synonyms_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;analysis/synonyms.txt&quot;</span>#同义词文件的位置</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后创建mapping，指定分词的时候采用最大粒度的by_max_word，搜索的时候使用的是by_smart。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /xjs/typename/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;analyzed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_smart&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候测试一下同义词是否生效</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/_analyze?pretty=<span class="literal"><span class="keyword">true</span></span>&amp;analyzer=by_smart</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;中文&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会得到下面的内容，很清楚看到中文两个字被分词成了中文和汉语两个词。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中文&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;汉语&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SYNONYM&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>添加两条测试索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/title/1</span><br><span class="line">&#123;&quot;title&quot;:&quot;汉语的重要性&quot;&#125;</span><br><span class="line">POST /xjs/title/2</span><br><span class="line">&#123;&quot;title&quot;:&quot;中文其实很好学的&quot;&#125;</span><br></pre></td></tr></table></figure><p>然后搜索试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /xjs/title/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;中文&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;tag1&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;/tag1&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;note&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会看到两条信息都被索引出来了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.60057575</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.60057575</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;汉语的重要性&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.5930795</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中文其实很好学的&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3、logstash指定分词器和同义词过滤器"><a href="#3、logstash指定分词器和同义词过滤器" class="headerlink" title="3、logstash指定分词器和同义词过滤器"></a><strong>3、logstash指定分词器和同义词过滤器</strong></h2><p>在logstash默认采用的分词器使standard，就是把中文分成一个字一个字，这个可以在测试高亮的时候看出来，会发现每个字都被高亮了，而不是每个词语。</p><p>在elasticsearch5.x之前，只要在elasticsearch中配置分词器为ik之后就可以让logstash使用ik分词器，但是5.x之后这种方式被取消了，这就显得很麻烦了。</p><p>在logstash-5.5.0目录新建一个template文件夹，然后新建一个logstash.json文件，注意配置这个文件的时候一定要小新，因为运行的时候会不会提示该文件有错误的。里面配置信息和上面的两个基本上差不多，这里就不做解释了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">50001</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index.refresh_interval&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5s&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;by_smart&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;by_sfr&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;by_max_word&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;by_sfr&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;by_sfr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;synonym&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;synonyms_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/local/elasticsearch-5.5.0/config/analysis/synonyms.txt&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_default_&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;norms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dynamic_templates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;message_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;path_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;match_mapping_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;mapping&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;norms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_smart&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;string_fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;match_mapping_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;mapping&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;norms&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;by_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;include_in_all&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;@version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;include_in_all&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后进入到配置logstash和mysql数据库同步的conf文件中，添加两行内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">input <span class="punctuation">&#123;</span></span><br><span class="line">    stdin <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    jdbc <span class="punctuation">&#123;</span></span><br><span class="line">      # mysql jdbc connection string to our backup databse</span><br><span class="line">      jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span></span><br><span class="line">      # the user we wish to excute our statement as</span><br><span class="line">      jdbc_user =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">      jdbc_password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">      # the path to our downloaded jdbc driver</span><br><span class="line">      jdbc_driver_library =&gt; <span class="string">&quot;/usr/local/logstash-5.5.0/mysql-connector-java-6.0.6.jar&quot;</span></span><br><span class="line">      # the name of the driver class for mysql</span><br><span class="line">      jdbc_driver_class =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      jdbc_paging_enabled =&gt; <span class="string">&quot;true&quot;</span></span><br><span class="line">      jdbc_page_size =&gt; <span class="string">&quot;50000&quot;</span></span><br><span class="line">      #statement_filepath =&gt; <span class="string">&quot;config-mysql/test02.sql&quot;</span></span><br><span class="line">      statement =&gt; <span class="string">&quot;select * from test02&quot;</span></span><br><span class="line">      schedule =&gt; <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">      type =&gt; <span class="string">&quot;test02&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">filter <span class="punctuation">&#123;</span></span><br><span class="line">    json <span class="punctuation">&#123;</span></span><br><span class="line">        source =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">        remove_field =&gt; <span class="punctuation">[</span><span class="string">&quot;message&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">output <span class="punctuation">&#123;</span></span><br><span class="line">    elasticsearch <span class="punctuation">&#123;</span></span><br><span class="line">        hosts =&gt; <span class="string">&quot;127.0.0.1:9200&quot;</span></span><br><span class="line">        index =&gt; <span class="string">&quot;test01&quot;</span></span><br><span class="line">        document_id =&gt; <span class="string">&quot;%&#123;id&#125;&quot;</span></span><br><span class="line">        #添加下面两行内容</span><br><span class="line">        template_overwrite =&gt; <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        #文件的位置</span><br><span class="line">        template =&gt; <span class="string">&quot;/usr/local/logstash-5.5.0/template/logstash.json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    stdout <span class="punctuation">&#123;</span></span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后重启一下logstash，就可以发现配置的信息已经加载进来了，</p><p>可以看一下默认的配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_template</span><br></pre></td></tr></table></figure><p>然后会得到大概长这样的文件，和刚刚那个配置的信息基本上是相同的，如果不同的话，便是刚刚json文件配置有错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;logstash&quot;: &#123;</span><br><span class="line">      &quot;order&quot;: 0,</span><br><span class="line">      &quot;version&quot;: 50001,</span><br><span class="line">      &quot;template&quot;: &quot;*&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">         &quot;index&quot;: &#123;</span><br><span class="line">            &quot;analysis&quot;: &#123;</span><br><span class="line">               &quot;filter&quot;: &#123;</span><br><span class="line">                  &quot;by_sfr&quot;: &#123;</span><br><span class="line">                     &quot;type&quot;: &quot;synonym&quot;,</span><br><span class="line">                     &quot;synonyms_path&quot;: &quot;/usr/local/elasticsearch-5.5.0/config/analysis/synonyms.txt&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;analyzer&quot;: &#123;</span><br><span class="line">                  &quot;by_smart&quot;: &#123;</span><br><span class="line">                     &quot;filter&quot;: [</span><br><span class="line">                        &quot;by_sfr&quot;</span><br><span class="line">                     ],</span><br><span class="line">                     &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">                     &quot;tokenizer&quot;: &quot;ik_smart&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;by_max_word&quot;: &#123;</span><br><span class="line">                     &quot;filter&quot;: [</span><br><span class="line">                        &quot;by_sfr&quot;</span><br><span class="line">                     ],</span><br><span class="line">                     &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">                     &quot;tokenizer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;refresh_interval&quot;: &quot;5s&quot;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;mappings&quot;: &#123;</span><br><span class="line">         &quot;_default_&quot;: &#123;</span><br><span class="line">            &quot;dynamic_templates&quot;: [</span><br><span class="line">               &#123;</span><br><span class="line">                  &quot;message_field&quot;: &#123;</span><br><span class="line">                     &quot;path_match&quot;: &quot;message&quot;,</span><br><span class="line">                     &quot;mapping&quot;: &#123;</span><br><span class="line">                        &quot;search_analyzer&quot;: &quot;by_smart&quot;,</span><br><span class="line">                        &quot;norms&quot;: false,</span><br><span class="line">                        &quot;analyzer&quot;: &quot;by_max_word&quot;,</span><br><span class="line">                        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &quot;match_mapping_type&quot;: &quot;string&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                  &quot;string_fields&quot;: &#123;</span><br><span class="line">                     &quot;mapping&quot;: &#123;</span><br><span class="line">                        &quot;search_analyzer&quot;: &quot;by_smart&quot;,</span><br><span class="line">                        &quot;norms&quot;: false,</span><br><span class="line">                        &quot;analyzer&quot;: &quot;by_max_word&quot;,</span><br><span class="line">                        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                        &quot;fields&quot;: &#123;</span><br><span class="line">                           &quot;keyword&quot;: &#123;</span><br><span class="line">                              &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                           &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;,</span><br><span class="line">                     &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">                     &quot;match&quot;: &quot;*&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;_all&quot;: &#123;</span><br><span class="line">               &quot;search_analyzer&quot;: &quot;by_smart&quot;,</span><br><span class="line">               &quot;norms&quot;: false,</span><br><span class="line">               &quot;analyzer&quot;: &quot;by_max_word&quot;,</span><br><span class="line">               &quot;enabled&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">               &quot;@timestamp&quot;: &#123;</span><br><span class="line">                  &quot;include_in_all&quot;: false,</span><br><span class="line">                  &quot;type&quot;: &quot;date&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;@version&quot;: &#123;</span><br><span class="line">                  &quot;include_in_all&quot;: false,</span><br><span class="line">                  &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aliases&quot;: &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以添加一下信息来测试了，这个根据自己数据库中的信息去测试，例如刚刚配置了中文，汉语的同义词，可以在数据库中添加和这两个词相关的记录，然后搜索一下中文或者汉语会发现新添加的两条就都可以被索引出来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（4）Head的安装</title>
      <link href="/post/50519/"/>
      <url>/post/50519/</url>
      
        <content type="html"><![CDATA[<p>在ElasticSearch5.x之后是不支持直接安装Head插件的，先看一下head插件长啥样：</p><p><img src="https://img.ncfl.tech/202305022131162.png" alt="这里写图片描述"></p><p>我主要是按照这个老哥的做的<a href="http://www.cnblogs.com/hunttown/p/6723286.html">http://www.cnblogs.com/hunttown/p/6723286.html</a>，把他的东西偷过来</p><p>现在基本上像sense，head插件都可以整合到Kidana，但是之前不知道这东西，我还是配置了一下这个东西，所以还是稍微做一下笔记。</p><h3 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a><strong>1、安装node.js</strong></h3><p>如果已安装自动忽略</p><p>下载安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>这是把项目压缩成tar，在压缩成xz的，一层一层解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v6.10.2-linux-x64.tar.xz</span><br><span class="line">tar xvf node-v6.10.2-linux-x64.tar</span><br></pre></td></tr></table></figure><p>配置node.js的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/node#node.js地址</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin</span><br></pre></td></tr></table></figure><p>立即生效刚刚修改的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>查看node.js的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>查看npm的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="2、下载插件包"><a href="#2、下载插件包" class="headerlink" title="2、下载插件包"></a><strong>2、下载插件包</strong></h3><p>安装git(root权限)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>clone项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mobz/elasticsearch-head.git</span><br></pre></td></tr></table></figure><h3 id="3、安装grunt"><a href="#3、安装grunt" class="headerlink" title="3、安装grunt"></a><strong>3、安装grunt</strong></h3><p>registry是修改为淘宝的库，原来的国外的镜像是访问不到的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-head</span><br><span class="line">npm install -g grunt --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="4、安装Head插件"><a href="#4、安装Head插件" class="headerlink" title="4、安装Head插件"></a><strong>4、安装Head插件</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在elasticsearch-head目录下node_modules&#x2F;grunt下如果没有grunt二进制程序，需要执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-head</span><br><span class="line">npm install grunt --save</span><br></pre></td></tr></table></figure><h3 id="5、修改配置"><a href="#5、修改配置" class="headerlink" title="5、修改配置"></a><strong>5、修改配置</strong></h3><p>修改elasticsearch-head下Gruntfile.js文件，默认监听在127.0.0.1下9200端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname: &#x27;106.14.112.215&#x27;,</span><br></pre></td></tr></table></figure><p>这位老哥说修改hostname为服务器的IP地址，但是我修改之后反而不能用了，于是，我直接把hostname删除了。</p><p>修改 _site&#x2F;app.js<br>修改<a href="http://localhost:9200字段到本机ES端口与IP：">http://localhost:9200字段到本机ES端口与IP：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://106.14.112.215:9200</span><br></pre></td></tr></table></figure><p>顺便说一下这个js文件最好下下来在本地去修改，因为这个文件一共4000+行，要改的地方在最后几行，在linux下修改简直要命，还很容易改错。</p><h3 id="6、修改Elasticsearch配置"><a href="#6、修改Elasticsearch配置" class="headerlink" title="6、修改Elasticsearch配置"></a><strong>6、修改Elasticsearch配置</strong></h3><p>修改elasticsearch.yml文件加入以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否支持跨域</span></span><br><span class="line"><span class="attr">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># *表示支持所有域名</span></span><br><span class="line"><span class="attr">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="7、启动服务"><a href="#7、启动服务" class="headerlink" title="7、启动服务"></a><strong>7、启动服务</strong></h3><p>如果需要后台运行，则需要在最后添加一个&amp;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/elasticsearch-head/node_modules/grunt/bin/grunt server </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/elasticsearch-head/node_modules/grunt/bin/grunt server &amp;</span><br></pre></td></tr></table></figure><p>8、用浏览器访问<a href="http://106.14.112.215:9100就可以看到最上面的图片。">http://106.14.112.215:9100就可以看到最上面的图片。</a></p><p>反正我在安装的时候，照着上面的流程走下来，基本上没有遇到任何的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（3）logstash安装和logstash-input-jdbc插件</title>
      <link href="/post/16057/"/>
      <url>/post/16057/</url>
      
        <content type="html"><![CDATA[<p>ElasticSearch的索引可以手动添加索引的，就是类似下面这样添加的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /movies/movie/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The Godfather&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;director&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Francis Ford Coppola&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;year&quot;</span><span class="punctuation">:</span> <span class="number">1972</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;genres&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Crime&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Drama&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果很多的信息，这样添加显然是不可能的，尤其是一般数据都在数据库中。</p><p>于是elasticsearch提供了可以直接和数据库关联，并且自动根据数据库中的数据更新索引logstash。</p><h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a><strong>安装logstash</strong></h2><p>logstash的安装和elasticsearch的安装是一样简单的，就是那种拆箱即用的。目前最新的版本是5.5.0，注意这个版本需要和elasticsearch的版本一致。</p><p>下载安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-5.5.0.zip</span><br></pre></td></tr></table></figure><p>下载完之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip logstash-5.5.0.zip</span><br></pre></td></tr></table></figure><p>之后将文件移动到自己存放的目录即可。</p><p>启动服务测试一下是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br><span class="line">./logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span><br></pre></td></tr></table></figure><p>如果出现下面的东西就表示成功：<br><img src="https://img.ncfl.tech/202305022127307.png" alt="这里写图片描述"><br>输入随便什么内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p>就会变成下面这样：<img src="https://img.ncfl.tech/202305022127624.png" alt="这里写图片描述"></p><p>基本上这样就算是安装成功了（其实好像并没有安转，只是下载而已）</p><h2 id="安装logstash-input-jdbc插件"><a href="#安装logstash-input-jdbc插件" class="headerlink" title="安装logstash-input-jdbc插件"></a><strong>安装logstash-input-jdbc插件</strong></h2><p>在我安装完这东西之后，看到好像可以不用安装这个就可以直接和数据库同步的，但是由于重新安装太麻烦了，而且没有其他的服务器给我试，就没有去试试看行不行。</p><p>我主要参考的是<a href="http://blog.csdn.net/yeyuma/article/details/50240595">http://blog.csdn.net/yeyuma/article/details/50240595</a>这位老铁的方法。</p><p>安装logstash是一件比较蛋疼的事，因为这东西适用ruby开发的，我对ruby这东西是一点也不懂，所以比较不好弄。<br>如果没有gem命令的话，需要先安装一下子（root用户才可以）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gem</span><br></pre></td></tr></table></figure><p>替换ruby镜像库为国内的库，因为国外的库，国内是访问不到的，然后国内有两个库，两个库都是可以用的：<br>1、替换成ruby-china的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p><img src="https://img.ncfl.tech/202305022127209.png" alt="这里写图片描述"></p><p>&#x3D;&#x3D;&#x3D;文章更新<br>但是由于目前<a href="https://gems.ruby-china.org/%E8%BF%99%E4%B8%AA%E5%9F%9F%E5%90%8D%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%BA%86%EF%BC%8C%E7%8E%B0%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%8B%E9%9D%A2%E6%9B%BF%E6%8D%A2ruby%E5%BA%93%E3%80%82%E5%90%8C%E6%97%B6%E4%B8%8B%E9%9D%A2taobao%E7%9A%84%E5%A5%BD%E5%83%8F%E4%B9%9F%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%86%EF%BC%8C%E5%90%8E%E7%BB%AD%E8%8B%A5%E9%81%87%E5%88%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E7%9B%B4%E6%8E%A5%E7%82%B9%E8%BF%9B%EF%BC%88%E6%AF%94%E5%A6%82[https://gems.ruby-china.org](https://gems.ruby-china.org)%EF%BC%89%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%EF%BC%8C%E7%BD%91%E7%AB%99%E4%BC%9A%E6%9C%89%E5%85%B7%E4%BD%93%E8%AF%B4%E6%98%8E%E5%8E%9F%E5%9B%A0%E7%9A%84">https://gems.ruby-china.org/这个域名无法使用了，现在使用下面替换ruby库。同时下面taobao的好像也不能用了，后续若遇到什么问题直接点进（比如[https://gems.ruby-china.org](https://gems.ruby-china.org)）进行访问，网站会有具体说明原因的</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>2、国内还有一个库，是淘宝的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>可以同样用gem sources -l查看是否替换成功。</p><p>替换完之后，进入logstash-5.5.0，修改Gemfile文件里面的数据源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi Gemfile</span><br></pre></td></tr></table></figure><p>修改成这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;https://gems.ruby-china.org&quot;</span><br></pre></td></tr></table></figure><p>如果用的用的是淘宝的库，就修改成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;https://ruby.taobao.org&quot;</span><br></pre></td></tr></table></figure><p>好了，这样ruby的安装环境就算是配好了。</p><p>进入到logstash的bin下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br><span class="line">./plugin install logstash-input-jdbc</span><br></pre></td></tr></table></figure><p>等待一整子，挺久的，如果成功那就安装成功了。</p><p>如果不成功，可以尝试一下下面这个东西，如果没记错的话，我好像就是用这种方法安装的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd logstash-5.5.0</span><br><span class="line">wget https://github.com/logstash-plugins/logstash-input-jdbc/archive/v1.0.0.zip</span><br><span class="line">unzip v1.0.0.zip</span><br><span class="line">cd logstash-input-jdbc-1.0.0/</span><br></pre></td></tr></table></figure><p>修改Gemfile里面的source，和上面修改是一样的。</p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi logstash-input-jdbc.gemspec</span><br></pre></td></tr></table></figure><p>再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.files = `git ls-files`.split($\)</span><br><span class="line">改为：</span><br><span class="line">s.files = [&quot;.gitignore&quot;, &quot;CHANGELOG.md&quot;, &quot;Gemfile&quot;, &quot;LICENSE&quot;, &quot;NOTICE.TXT&quot;, &quot;README.md&quot;, &quot;Rakefile&quot;, &quot;lib/logstash/inputs/jdbc.rb&quot;, &quot;lib/logstash/plugin_mixins/jdbc.rb&quot;, &quot;logstash-input-jdbc.gemspec&quot;, &quot;spec/inputs/jdbc_spec.rb&quot;]</span><br></pre></td></tr></table></figure><p>继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem build logstash-input-jdbc.gemspec</span><br></pre></td></tr></table></figure><p>得到<img src="https://img.ncfl.tech/202305022128667.png" alt="这里写图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">cd bin</span><br><span class="line">./logstash install ../logstash-input-jdbc-1.0.0/logstash-input-jdbc-1.0.0.gem</span><br></pre></td></tr></table></figure><p>然后等着就好了。如果提示成功了，就安装成功了，如果还是失败，多尝试几下第一种方式，我在另一个服务器尝试了几次第一种方式就莫名其妙成功了。如果还失败，就在查查资料吧。</p><p>测试一下安装成功了吗：</p><p>在此之前，需要一个mysql数据库连接包，mysql-connector-java-6.0.6.jar，随便什么版本应该都是可以的，可以使用wget下下来，也可以从本地下下来之后rz上传到服务器，这里就省略了。</p><p>在bin下新建一个目录config-mysql创建mysql.conf文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir config-mysql</span><br><span class="line">cd config-mysql</span><br><span class="line">vim mysql.conf </span><br></pre></td></tr></table></figure><p>在文件中输入下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    jdbc &#123;</span><br><span class="line">      # 数据库</span><br><span class="line">      jdbc_connection_string =&gt; &quot;jdbc:mysql://localhost:3306/test01&quot;</span><br><span class="line">      # 用户名密码</span><br><span class="line">      jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">      jdbc_password =&gt; &quot;123456&quot;</span><br><span class="line">      # jar包的位置</span><br><span class="line">      jdbc_driver_library =&gt; &quot;/usr/local/logstash-5.5.0/mysql-connector-java-6.0.6.jar&quot;</span><br><span class="line">      # mysql的Driver</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">      jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">      jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line">      #statement_filepath =&gt; &quot;config-mysql/test02.sql&quot;</span><br><span class="line">      statement =&gt; &quot;select * from test02&quot;</span><br><span class="line">      schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">  #索引的类型</span><br><span class="line">      type =&gt; &quot;test02&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">        remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; &quot;127.0.0.1:9200&quot;</span><br><span class="line">        # index名</span><br><span class="line">index =&gt; &quot;test01&quot;</span><br><span class="line"># 需要关联的数据库中有有一个id字段，对应索引的id号</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意关联的数据库表中需要有id字段用来映射形成的索引的id号。</p><p>终于把工作都做完了。</p><p>进入bin目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash -f config-mysql/mysql.conf</span><br></pre></td></tr></table></figure><p> 等一会之后，就会看到数据库中的数据被读取出来，然后加载进索引，在sense可以查询到刚刚添加的索引的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search  </span><br></pre></td></tr></table></figure><p>然后往数据库中添加一些新的数据之后等待大概30S之后重新索引，就会看到索引被更新了。回到linux下，会看到，没过一段时间，logstash就会重新扫描一下数据库，通过这样的方式，实现和mysql数据库的同步。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（2）IK分词器和拼音分词器的安装</title>
      <link href="/post/25857/"/>
      <url>/post/25857/</url>
      
        <content type="html"><![CDATA[<p>ElasticSearch是自带分词器的，但是自带的分词器一般就只能对英文分词，对英文的分词只要识别空格就好了，还是很好做的（ES的这个分词器和Lucene的分词器很想，是不是直接使用Lucene的就不知道），自带的分词器对于中文就只能分成一个字一个字，这个显然是不能满足在开发中的要求的。</p><p>先看看自带的分词器的分词效果（还是使用Sense工具）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;中华人民共和国国歌&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到的结果是下面这个：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;民&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;共&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="IK分词器的安装"><a href="#IK分词器的安装" class="headerlink" title="IK分词器的安装"></a><strong>IK分词器的安装</strong></h2><p>在ES中，从资料来看好像都是使用IK分词器的，所以这篇博客配的也是IK分词器，有兴趣的同学可以自己去试试其他的分词器（我是用过的有MMSeg4j ，NPL，jieba）。</p><p><strong>如果是在window下：</strong></p><p>从这个地址上把项目clone下来或者直接下载zip下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/medcl/elasticsearch-analysis-ik</span><br></pre></td></tr></table></figure><p>拉下来的项目是maven项目的，需要电脑上已经安装了maven。主意下载下来的elasticsearch的版本要和你正在用的同一个版本，或者在pom.xml修改成对应的版本号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Elasticsearch的版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>5.5.0<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JDK的版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span>$&#123;project.basedir&#125;/src/main/assemblies/plugin.xml<span class="tag">&lt;/<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.name</span>&gt;</span>analysis-ik<span class="tag">&lt;/<span class="name">elasticsearch.plugin.name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.classname</span>&gt;</span>org.elasticsearch.plugin.analysis.ik.AnalysisIkPlugin<span class="tag">&lt;/<span class="name">elasticsearch.plugin.classname</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.jvm</span>&gt;</span>true<span class="tag">&lt;/<span class="name">elasticsearch.plugin.jvm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tests.rest.load_packaged</span>&gt;</span>false<span class="tag">&lt;/<span class="name">tests.rest.load_packaged</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skip.unit.tests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip.unit.tests</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.keyname</span>&gt;</span>4E899B30<span class="tag">&lt;/<span class="name">gpg.keyname</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.useagent</span>&gt;</span>true<span class="tag">&lt;/<span class="name">gpg.useagent</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用下面的命令打包一下项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>如果成功的话会在target&#x2F;releases下有一个zip压缩包<span style="color:red">elasticsearch-analysis-ik-5.5.0.zip</span><br>这个压缩包就是我们待会要用的。</p><p>注意到上面的pom.xml文件中使用的JDK1.8，如果电脑是之前安装的maven，而且恰好使用的JDK1.7的maven，mvn package是会报错的，这个使用需要找到maven下的setting文件，然后将JDK版本改成1.8之后，重新mvn package应该就可以了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>       </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>再注意，这个不能像之前修改像之前修改elasticsearch版本号一样，直接在pom.xml文件中将jdk改成1.7，因为项目中使用到了jdk1.8的新特性，这样修改之后项目本身会报错的。</p><p>如果还是无法使用mvn package打包项目的话，可以把项目拉进eclipse中，然后右键run–&gt;maven install，可以达到同样的效果。</p><p>然后把刚刚得到的<span style="color:red">elasticsearch-analysis-ik-5.5.0.zip</span>上传到服务器。需要把这个文件elasticsearch-5.5.0&#x2F;plugins&#x2F;ik这个路径下；</p><p>解压压缩包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-5.5.0.zip</span><br></pre></td></tr></table></figure><p>到这一步基本上elasticsearch的ik分词器就安装好了。示例待会说，下面将一个可能遇到的问题：</p><p>如果服务器上没有安装unzip功能的话，可以使用下面的命令行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure><p>如果服务没有安装上传下载功能的，可以使用下面的方法安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure><p>然后输入下面命令行就会弹出一个窗口，选择文件上传到服务器上就可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p>顺便说一下，使用下面的命令可以将服务器上的文件下载到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz XXX(下载的文件名)</span><br></pre></td></tr></table></figure><hr><p><strong>如果是在linux下：</strong><br>之前的那些操作之所以在windows下完成是因为在linux环境下很多简单的操作都要输入很多命令行，如果有报错不容易调试，但是如果可以保证linux下的功能比较完整的话，服务器上起码安装了Git和maven的，可以直接在linux下完成这些功能的：<br>把项目从github克隆下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/medcl/elasticsearch-analysis-ik.git</span><br></pre></td></tr></table></figure><p>如果需要修改elasticsearch版本的，修改一下版本号，然后打包项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven package</span><br></pre></td></tr></table></figure><p>而后把target&#x2F;release下的压缩包移动到elasticsearch下plugins下解压就OK了。</p><p>接下来重启一下elasticsearch服务，如果出现下面的图片就基本上算是安装成功了。说明了elasticsearch就加载成功了。<br><img src="https://img.ncfl.tech/202305022123597.png" alt="这里写图片描述"></p><p>在sense中测试一下，IK中有两种分词器，一种是ik_max_word另一种是ik_smart，分别会最大粒度的分词和最小粒度的分词：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;中华人民共和国国歌&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中华人民共和国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中华人民&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中华&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华人&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人民共和国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人民&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;共和国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;共和&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;中华人民共和国国歌&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中华人民共和国&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国歌&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>基本上这样就把IK分词器安装成功了。</p><h2 id="拼音分词器的安装"><a href="#拼音分词器的安装" class="headerlink" title="拼音分词器的安装"></a><strong>拼音分词器的安装</strong></h2><p>拼音分词器的安装和Ik的安装基本上是相同的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/medcl/elasticsearch-analysis-pinyin</span><br></pre></td></tr></table></figure><p>讲项目拉下来，打包项目，将target&#x2F;release下的压缩包移动到elasticsearch-5.5.0下的plugins下，重启一下elasticsearch就可以了。</p><p>测试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;中华人民共和国国歌&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhong&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhrmghggg&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hua&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ren&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;min&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gong&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;he&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;guo&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;guo&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ge&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>顺便说一下，在这些分词结果在处理的时候，就会被存进索引，搜索的时候，如果输入“国歌”，“guoge”，“zhrmghggg”，“中国人民共和国国歌”，那么中华人民共和国国歌就会被索引到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES（1）安装</title>
      <link href="/post/45899/"/>
      <url>/post/45899/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h2><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><p>但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><p>不过，Elasticsearch不仅仅是Lucene和全文搜索，我们还能这样去描述它：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><p>而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。</p><p>上手Elasticsearch非常容易。它提供了许多合理的缺省值，并对初学者隐藏了复杂的搜索引擎理论。它开箱即用（安装即可使用），只需很少的学习既可在生产环境中使用。</p><p>ElasticSearch主要是放在服务器上使用的，在服务器上放一个搜索服务器之后，并可通过类似json的schema进行访问了；</p><p><a href="http://www.yiibai.com/elasticsearch/elasticsearch_index_apis.html">http://www.yiibai.com/elasticsearch/elasticsearch_index_apis.html</a><br>这个上面是关于这个语句的相关介绍，可以先去了解了解这个。感觉不看也是可以的，毕竟是类似json的，还是很容易看的懂得</p><h2 id="二、chrome插件Sense"><a href="#二、chrome插件Sense" class="headerlink" title="二、chrome插件Sense"></a><strong>二、chrome插件Sense</strong></h2><p>如果使用Chrome浏览器的，可以安装一下sense这个插件，这个是为了es特地开发的一个插件，还是很好用的。直接在谷歌网上应用店直接搜索安装就好了。es还自己提供了一个head插件，也挺好用的，待会介绍。</p><h2 id="三、安装es5-5-0（目前最新）"><a href="#三、安装es5-5-0（目前最新）" class="headerlink" title="三、安装es5.5.0（目前最新）"></a><strong>三、安装es5.5.0（目前最新）</strong></h2><p>elasticsearch主要还是基于linux命令的一个服务器，虽然在window下也可以本地用，但是会出现一下乱七八糟的问题。我是基于阿里云CentOS 7.2 64位的，jdk1.8。话不多说，开始吧。</p><p>下载elasticsearch-5.5.0.zip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">≈wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip</span><br></pre></td></tr></table></figure><p>解压elasticsearch-5.5.0.zip（需要服务器上已经安装了unzip）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-5.5.0.zip</span><br></pre></td></tr></table></figure><p>我比较喜欢吧东西放在一起，所以移动一下东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv elasticsearch-5.5.0 /data/home/es/lcoal</span><br></pre></td></tr></table></figure><p>因为elasticsearch这东西是开箱即用的，进入并目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-5.5.0/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure><p>如果出现下面这个东西就成功启动（我这里配置了一些其他的东西，反正长得差不多就好了）</p><p><img src="https://img.ncfl.tech/202305022117958.png" alt="这里写图片描述"></p><p>如果出现下面的错误，就说明你的服务器的内存不足（显然不足的可能性是比较大的，因为默认要求是2g的内存，作为大学生租的内存只有一共2G）</p><p><img src="https://img.ncfl.tech/202305022118879.png" alt="这里写图片描述"></p><p>进入config目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-5.5.0/config</span><br></pre></td></tr></table></figure><p>修改jvm.options文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi jvm.options </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms2g变成这样--------------&gt;-Xms512m</span><br><span class="line">-Xmx2g变成这样--------------&gt;-Xms512m</span><br></pre></td></tr></table></figure><p>这样就可以把内存变成512M了，重新进去bin目录下去启动服务<br>如果成功了就启动成功了，如果出现的是</p><p><img src="https://img.ncfl.tech/202305022119861.png" alt="这里写图片描述"></p><p>意思是说不能在root用户下启动，这个时候就需要新建一个用户，好像是elasticsearch为了什么安全什么。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd testes</span><br><span class="line">useradd testes -g elasticsearch  </span><br><span class="line">chown -R testes:elasticsearch elasticsearch-5.5.0/ </span><br></pre></td></tr></table></figure><p>添加用户的网上教程很多，这里简单解释一下<br>创建用户组elasticsearch<br>创建用户testes属于elasticsearch组<br>把elasticsearch-5.5.0&#x2F; 授权给用户testes</p><p>然后切换到用户testes下，进入bin目录启动服务，如果成功就成功，但是应该还是会报错滴</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su testes </span><br><span class="line">cd elasticsearch-5.5.0/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure><p>你以为会成功，嘿嘿嘿，想得美，反正我出现了下面这个：</p><p><img src="https://img.ncfl.tech/202305022119124.png" alt="这里写图片描述"></p><p>这个是为什么呢，我也不知道，查了一下资料，这么做是可以的。</p><p>切换到root用户下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>在最后添加下面内容，已经有了的话就覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.d/90-nproc.conf </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改如下内容：</span><br><span class="line">* soft nproc 1024</span><br><span class="line"></span><br><span class="line">#修改为</span><br><span class="line">* soft nproc 2048</span><br></pre></td></tr></table></figure><p>再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>把上面的流程走一遍，基本上就没什么问题了。<br>重新进入到并目录下启动下服务应该就可以了。记得切换到非root用户下；</p><p>如果是在Centos6下启动的服务，可能会出现这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: bootstrap checks failed</span><br><span class="line">system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</span><br></pre></td></tr></table></figure><p>因为Centos6不支持SecComp，而ES5.2.1默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</p><p>进入elasticsearch.yml目录下，找到这个注释，然后改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure><p>然后应该就可以了。</p><p>顺便说一下,-d表示在后台启动服务，要不然当前窗口关闭之后服务就停掉了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure><p>输入下面命令行检查是否真的成功启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost：9200</span><br></pre></td></tr></table></figure><p>如果得到下面的东西，就说明服务启动成功了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;D5XPIZy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ChxVh9fESbCcgJ03z3MDpQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;5.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;260387d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2017-06-30T23:16:05.735Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.6.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看服务是否正常启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep ela </span><br></pre></td></tr></table></figure><p><img src="https://img.ncfl.tech/202305022120744.png" alt="这里写图片描述"></p><p>这样就是成功启动服务的样子，如果要结束，就把这个进程kill掉就好了。</p><p>这个时候可以用外网访问以下9200端口，得到的东西和下面相同就成功了，但是应该还是不可以的，哈哈哈。惊不惊喜，意不意外。</p><p><img src="https://img.ncfl.tech/202305022120744.png" alt="这里写图片描述"></p><p>进入config目录，修改elasticsearch.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#network.host: 192.168.0.1</span><br><span class="line">改成</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><p>这个时候在sense输入最上面输入公网IP号和9200端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">106.14.112.215:9200</span><br></pre></td></tr></table></figure><p>这个时候应该就可以访问了，如果还不行，拿去阿里云配置一下安全组规则，把9200端口打开试一下，如果还不行，那就再去百度谷歌一下吧。</p><p>到这基本上elasticsearch就安装好了。</p><p>添加一个索引信息，索引为movies，类型为movie，ID为1<br>title，director，year，genres为索引的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /movies/movie/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The Godfather&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;director&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Francis Ford Coppola&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;year&quot;</span><span class="punctuation">:</span> <span class="number">1972</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;genres&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Crime&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Drama&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会在右边看到这个东西说明索引创建成功，索引为movies，类型为movie，id为1.版本号为1，因为是首次创建，所以result为created</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movies&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movie&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查找索引信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search   #搜索全部</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movies&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movie&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The Godfather&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;director&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Francis Ford Coppola&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;year&quot;</span><span class="punctuation">:</span> <span class="number">1972</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;genres&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;Crime&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="string">&quot;Drama&quot;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>刚刚添加的索引信息被搜索出来了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graphql（四）GraphQL和SpringMVC 的整合</title>
      <link href="/post/19256/"/>
      <url>/post/19256/</url>
      
        <content type="html"><![CDATA[<p>经过四天的奋战，终于把GraphQL和SpringMVC整合在了一起。这次主要采用的SpringMVC，和hibernate框架。一些和项目相关的简单的配置这里不做过多的介绍。话不多说，直接上代码吧。</p><hr><p>定义了两个实体类<br>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String truename;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Info</span><span class="params">(<span class="type">int</span> id, String truename, String address, User user)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.truename = truename;</span><br><span class="line"><span class="built_in">this</span>.address = address;</span><br><span class="line"><span class="built_in">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Info</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Info [id=&quot;</span> + id + <span class="string">&quot;, truename=&quot;</span> + truename + <span class="string">&quot;, address=&quot;</span> + address + <span class="string">&quot;, user=&quot;</span> + user + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTruename</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> truename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTruename</span><span class="params">(String truename)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.truename = truename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, username=&quot;</span> + username + <span class="string">&quot;, password=&quot;</span> + password  + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后从数据库中将info数据取出，当时方法名取错了，不要在意这些细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Info <span class="title function_">getUserInfo</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> hibernateTemplate.getSessionFactory().getCurrentSession();</span><br><span class="line"><span class="type">String</span> <span class="variable">hql</span> <span class="operator">=</span> <span class="string">&quot;from Info i where i.id = ?&quot;</span>;</span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(hql).setParameter(<span class="number">0</span>, id);</span><br><span class="line"><span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> (Info) query.uniqueResult();</span><br><span class="line">System.out.println(info);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的这些部分都是实现基本上的在SpringMVC框架上的是实现最基本的获取数据库数据，不做过多的介绍，接下来是本次的重头戏：<br>新建一个雷，专门用来生成每个实体对应的类型的GraphQLObjectType，这样每次就可以直接来这个类取，也增加了代码的复用性，后来去graphql-java中查看了一下源代码，它应该也是这样做的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphQLObject</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">GraphQLObjectType</span> <span class="variable">user</span> <span class="operator">=</span> newObject().name(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;id&quot;</span>).type(Scalars.GraphQLInt).build())<span class="comment">// 类型一定要与结构类字段的类型相对应</span></span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;username&quot;</span>).type(Scalars.GraphQLString).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;password&quot;</span>).type(Scalars.GraphQLString).build()).build();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">GraphQLObjectType</span> <span class="variable">info</span> <span class="operator">=</span> newObject().name(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;id&quot;</span>).type(Scalars.GraphQLInt).build())<span class="comment">// 类型一定要与结构类字段的类型相对应</span></span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;truename&quot;</span>).type(Scalars.GraphQLString).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;address&quot;</span>).type(Scalars.GraphQLString).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;user&quot;</span>).type(user).build()).build();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在查询对应的方法中生成对应的搜索域和执行搜索就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String ghql)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">GraphQLFieldDefinition</span> <span class="variable">findforid</span> <span class="operator">=</span> GraphQLFieldDefinition.newFieldDefinition().name(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">.argument(<span class="comment">// 这里用GraphQL些查询语句时传入的参数</span></span><br><span class="line">newArgument().name(<span class="string">&quot;id&quot;</span>)<span class="comment">// 参数名为id</span></span><br><span class="line">.type(Scalars.GraphQLInt)<span class="comment">// 参数类型</span></span><br><span class="line">.build())</span><br><span class="line">.type(GraphQLObject.info)<span class="comment">// 绑定GraphQL的一个结构，就是上面的那段代码</span></span><br><span class="line">.dataFetcher(environment -&gt; &#123;</span><br><span class="line"><span class="comment">// 获取查询参数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> environment.getArgument(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> userDAO.getUserInfo(id);</span><br><span class="line">&#125;).build();</span><br><span class="line"></span><br><span class="line"><span class="type">GraphQLSchema</span> <span class="variable">schema</span> <span class="operator">=</span> GraphQLSchema.newSchema().query(newObject().name(<span class="string">&quot;_123&quot;</span>).field(findforid).build())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;&#123;info(id:1)&#123;id,truename,address,user&#123;id,username,password&#125;&#125;&#125;&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="type">ExecutionResult</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphQL</span>(schema).execute(ghql);</span><br><span class="line">Map&lt;String, Object&gt; result = (Map&lt;String, Object&gt;) re.getData();</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后将map转化为就送数据就可以了；<br>我在前端的文本框中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;info(id:1)&#123;id,truename,address,user&#123;id,username,password&#125;&#125;&#125;&quot;;</span><br></pre></td></tr></table></figure><p>就可以得到一下的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;truename&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>最后简单说一下心得体会，这种东西对后端还是比较友好的，毕竟根据一定的条件，就可以返回前端所需要的数据，对后端的维护什么的还是比较方便的<br>但是呢，查询条件对应的接口还是都要有的，本文是以ID为查找条件，若改为以truename为查询条件则需要在写一个借口。<br>而且这种做法个人感觉有点不太安全，相当于是把后台的数据，设置是数据库的数据直接暴露在前台，感觉不是很安全的样子。<br>而且，由于一开始不知道前端会需要查询结果有哪些，所以在查询的时候只能将与该信息相关的所有信息都顺带查询出来供前端选择，这样对数据库的压力还是很大的，在想有没有什么办法可以将数据查询出来之后就只接保存在内存或者服务器中，下次在需要就重新调用就好了，可是感觉这样的话就好像没有什么要数据库的必要了，感觉这个问题还是有必要好好研究或者解决的。</p><p>顺便提一下，今天下午再整这东西的时候，发现graphql-java在5个小时之前还稍稍更新了一下</p><hr><p>文章讲的不是很清楚，大家可以看看源码：<a href="http://download.csdn.net/detail/q15150676766/9891144">http://download.csdn.net/detail/q15150676766/9891144</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graphql（三）一些和GraphQL相关</title>
      <link href="/post/11813/"/>
      <url>/post/11813/</url>
      
        <content type="html"><![CDATA[<p>今天在老大的指导下，稍微看了一下graphql-java，稍微有点了解，但是还不是很了解，本篇文章不介绍。今天还进一步了解了一下Restful API，对这东西有了更深的了解，越来越感受到是一种代码风格，今天还把PUT，POST，GET和DELETE方法都测试了一下，但是距离熟练运用在项目中，还是有很大差距的。今天接触的东西比较零散，故这篇博客不讲这些东西。</p><hr><p>这篇博客主要是介绍之前接触的一下和GraphQL相关的东西。</p><h2 id="一、GraphQL一个在线的示例网站"><a href="#一、GraphQL一个在线的示例网站" class="headerlink" title="一、GraphQL一个在线的示例网站"></a><strong>一、GraphQL一个在线的示例网站</strong></h2><p>这里主要介绍一个GraphQL一个在线的示例网站<a href="https://sandbox.learngraphql.com/">https://sandbox.learngraphql.com/</a>，不知道这个网站是公开的还是个人的，里面自带了一些数据，可以通过右侧的Docs查看，主要涉及到以下几个表，内部也自带一下数据，主要提供的是Query和mutation两个功能，GraphQL涉及到的也就是这两个功能。</p><ul><li>posts</li><li>latestPost</li><li>recentPosts</li><li>post</li><li>authors</li><li>author</li></ul><p>在左侧输入schema语句，即可在右侧输出查询到的结果，对于其他的查询也可自己试试，下面的示例主要是查询posts表下的数据，同时级联查询author和comments表下的数据，这样就使得查询很简单，同时前端传递是十分易于扩展：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  post:posts&#123;</span><br><span class="line">    _id</span><br><span class="line">    author&#123;</span><br><span class="line">      _id</span><br><span class="line">      name</span><br><span class="line">      twitterHandle</span><br><span class="line">    &#125;</span><br><span class="line">    comments&#123;</span><br><span class="line">      _id</span><br><span class="line">      content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出以下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0176413761b289e6d64c2c14a758c1c7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;indi&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kasun Indi&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@indi&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;03390abb5570ce03ae524397d215713b&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pahan&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pahan Sarathchandra&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@pahans&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0be4bea0330ccb5ecf781a9f69a64bc8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19085291c89f0d04943093c4ff16b664&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1afff9dfb0b97b5882c72cb60844e034&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1bd16dfab1de982317d2ba4382ec8c86&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;285292901bb38be8f57dd2885c517826&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2f6b59fd0b182dc6e2f0051696c70d70&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3d7a3853bf435c0f00e46e15257a94d9&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arunoda&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Arunoda Susiripala&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;twitterHandle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@arunoda&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-46907332&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a very good blog post&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cid-59329432&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep up the good work&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="java示例"><a href="#java示例" class="headerlink" title="java示例"></a><strong>java示例</strong></h2><p>网上很火的一个java实现GraphQL服务器的Demo，但是我自己测试的时候有一点小Bug，以下是我修改过的，直接复制即可使用（起码在我的IDE上是这样的）；<br><br/></p><p><span style="color:red">User.java</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">// getter, setter... </span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></br><span style="color:red">Test.java</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLFieldDefinition.newFieldDefinition;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLObjectType.newObject;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLArgument.newArgument;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> graphql.GraphQL;</span><br><span class="line"><span class="keyword">import</span> graphql.Scalars;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLFieldDefinition;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLList;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLOutputType;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLSchema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">private</span> GraphQLOutputType userType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initOutputType</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会员对象结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">userType = newObject().name(<span class="string">&quot;User&quot;</span>).field(newFieldDefinition().name(<span class="string">&quot;id&quot;</span>).type(Scalars.GraphQLInt).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;age&quot;</span>).type(Scalars.GraphQLInt).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;sex&quot;</span>).type(Scalars.GraphQLInt).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;name&quot;</span>).type(Scalars.GraphQLString).build())</span><br><span class="line">.field(newFieldDefinition().name(<span class="string">&quot;pic&quot;</span>).type(Scalars.GraphQLString).build()).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询单个用户信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> GraphQLFieldDefinition <span class="title function_">createUserField</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> GraphQLFieldDefinition.newFieldDefinition().name(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">.argument(newArgument().name(<span class="string">&quot;id&quot;</span>).type(Scalars.GraphQLInt).build()).type(userType)</span><br><span class="line">.dataFetcher(environment -&gt; &#123;</span><br><span class="line"><span class="comment">// 获取查询参数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> environment.getArgument(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询, 这里随便用一些测试数据来说明问题</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(id);</span><br><span class="line">user.setAge(id + <span class="number">15</span>);</span><br><span class="line">user.setSex(id % <span class="number">2</span>);</span><br><span class="line">user.setName(<span class="string">&quot;Name_&quot;</span> + id);</span><br><span class="line">user.setPic(<span class="string">&quot;pic_&quot;</span> + id + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询多个会员信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> GraphQLFieldDefinition <span class="title function_">createUsersField</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> GraphQLFieldDefinition.newFieldDefinition().name(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">.argument(newArgument().name(<span class="string">&quot;page&quot;</span>).type(Scalars.GraphQLInt).build())</span><br><span class="line">.argument(newArgument().name(<span class="string">&quot;size&quot;</span>).type(Scalars.GraphQLInt).build())</span><br><span class="line">.argument(newArgument().name(<span class="string">&quot;name&quot;</span>).type(Scalars.GraphQLString).build())</span><br><span class="line">.type(<span class="keyword">new</span> <span class="title class_">GraphQLList</span>(userType)).dataFetcher(environment -&gt; &#123;</span><br><span class="line"><span class="comment">// 获取查询参数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> environment.getArgument(<span class="string">&quot;page&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> environment.getArgument(<span class="string">&quot;size&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getArgument(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询, 这里随便用一些测试数据来说明问题</span></span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(size);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(i);</span><br><span class="line">user.setAge(i + <span class="number">15</span>);</span><br><span class="line">user.setSex(i % <span class="number">2</span>);</span><br><span class="line">user.setName(name + <span class="string">&quot;_&quot;</span> + page + <span class="string">&quot;_&quot;</span> + i);</span><br><span class="line">user.setPic(<span class="string">&quot;pic_&quot;</span> + i + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">list.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> GraphQLSchema schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">initOutputType();</span><br><span class="line">schema = GraphQLSchema.newSchema()</span><br><span class="line">.query(newObject().name(<span class="string">&quot;GraphQuery&quot;</span>).field(createUsersField()).field(createUserField()).build())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">GraphQLSchema</span> <span class="variable">schema</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>().schema;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">query1</span> <span class="operator">=</span> <span class="string">&quot;&#123;users(page:2,size:5,name:\&quot;john\&quot;) &#123;id,sex,name,pic&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">query2</span> <span class="operator">=</span> <span class="string">&quot;&#123;user(id:6) &#123;id,sex,name,pic&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">query3</span> <span class="operator">=</span> <span class="string">&quot;&#123;user(id:6) &#123;id,sex,name,pic&#125;,users(page:2,size:5,name:\&quot;john\&quot;) &#123;id,sex,name,pic&#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; result1 = (Map&lt;String, Object&gt;) <span class="keyword">new</span> <span class="title class_">GraphQL</span>(schema).execute(query1).getData();</span><br><span class="line">Map&lt;String, Object&gt; result2 = (Map&lt;String, Object&gt;) <span class="keyword">new</span> <span class="title class_">GraphQL</span>(schema).execute(query2).getData();</span><br><span class="line">Map&lt;String, Object&gt; result3 = (Map&lt;String, Object&gt;) <span class="keyword">new</span> <span class="title class_">GraphQL</span>(schema).execute(query3).getData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询用户列表</span></span><br><span class="line">System.out.println(result1);</span><br><span class="line"><span class="comment">// 查询单个用户</span></span><br><span class="line">System.out.println(result2);</span><br><span class="line"><span class="comment">// 单个用户、跟用户列表一起查</span></span><br><span class="line">System.out.println(result3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/>运行结果：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    users=<span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_0<span class="punctuation">,</span></span><br><span class="line">            pic=pic_0.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_1<span class="punctuation">,</span></span><br><span class="line">            pic=pic_1.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_2<span class="punctuation">,</span></span><br><span class="line">            pic=pic_2.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_3<span class="punctuation">,</span></span><br><span class="line">            pic=pic_3.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_4<span class="punctuation">,</span></span><br><span class="line">            pic=pic_4.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    user=<span class="punctuation">&#123;</span></span><br><span class="line">        id=<span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        name=Name_6<span class="punctuation">,</span></span><br><span class="line">        pic=pic_6.jpg</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    user=<span class="punctuation">&#123;</span></span><br><span class="line">        id=<span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        name=Name_6<span class="punctuation">,</span></span><br><span class="line">        pic=pic_6.jpg</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    users=<span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_0<span class="punctuation">,</span></span><br><span class="line">            pic=pic_0.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_1<span class="punctuation">,</span></span><br><span class="line">            pic=pic_1.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_2<span class="punctuation">,</span></span><br><span class="line">            pic=pic_2.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_3<span class="punctuation">,</span></span><br><span class="line">            pic=pic_3.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            id=<span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            sex=<span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            name=john_2_4<span class="punctuation">,</span></span><br><span class="line">            pic=pic_4.jpg</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graphql（二）Restful API的初步认识</title>
      <link href="/post/611/"/>
      <url>/post/611/</url>
      
        <content type="html"><![CDATA[<p>今天对GraphQL进一步的学习，本来打算看一下graphql-java源码，但是由于源码中包括了groovy和kotlin语言，这两种语言虽然听说和java像，但是毕竟还是新语言，不能很敢尝试。</p><p>graphql和restful在之前搜索资料的时候，这两种语言总是拿过来比较。为了更好地认识graphql，再加上目前对于graphq在java Web项目中究竟是怎么用的，还是一头雾水，希望通过对restful 的学习可以有进一步的认识。</p><hr><p>这次的学习主要是基于<a href="http://edu.51cto.com/course/course_id-4715.html">Spring搭建RESTful web Service</a>这个视频和网上其他的一些资料，毕竟相对于graphl，restful还是比较成熟的，网上的材料较多，但也都良莠不齐的。</p><p>这篇博客也主要是关于SpringMVC和Restful的，对于SpringMVC基础将不做介绍。</p><hr><h2 id="一、RESTful简介"><a href="#一、RESTful简介" class="headerlink" title="一、RESTful简介"></a><strong>一、RESTful简介</strong></h2><p>restful在graphql出现之前是一直和webService进行比较的。两者的区别的区别这里不做讨论。<br>准确来说，restful不是一种类似SSH的框架，只是一种风格而已。主要是将后台和服务器进行分离。<br>REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。<br>Spring官方文档中有对于RestFul很具体的介绍和使用，可以参考<a href="https://spring.io/understanding/rest">https://spring.io/understanding/rest</a>和<a href="https://spring.io/guides/gs/rest-service/">https://spring.io/guides/gs/rest-service/</a>这两个链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Principles of REST</span><br><span class="line"></span><br><span class="line">- Resources expose easily understood directory structure URIs.</span><br><span class="line">- Representations transfer JSON or XML to represent data objects and attributes.</span><br><span class="line">- Messages use HTTP methods explicitly (for example, GET, POST, PUT, and DELETE).</span><br><span class="line">- Stateless interactions store no client context on the server between requests. State dependencies limit and restrict scalability. The client holds session state.</span><br></pre></td></tr></table></figure><p>在HTTP中主要是有POST，DELETE，PUT和GET四种方式（PATCH不常用）来分别指定为增删改查四种方式。<br>同时响应码使用的也是基于HTTP 的 状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1XX - informational消息</span><br><span class="line">2XX - success成功</span><br><span class="line">3XX - redirection重定向</span><br><span class="line">4XX - client error客户端错误</span><br><span class="line">5XX - server error服务器错误</span><br></pre></td></tr></table></figure><hr><h2 id="二、GraphQL和RESTful的区别"><a href="#二、GraphQL和RESTful的区别" class="headerlink" title="二、GraphQL和RESTful的区别"></a><strong>二、GraphQL和RESTful的区别</strong></h2><p>–<br>对于graphql和restful的区别，毕竟自己都是刚接触，还有很多需要学习的东西，而且就算初步使用，也是无法体会两者之间的差别；故区别这种东西还是听听前辈的。<br>个人感觉<a href="http://blog.csdn.net/changruihe/article/details/54630976">http://blog.csdn.net/changruihe/article/details/54630976</a>讲的是比较好，起码看上去比较有自己的个人体会。</p><hr><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a><strong>三、代码</strong></h2><p>&#x3D;&#x3D;<br>在本次中，使用类似的方式之后，SpringMVC的IOC自动注入不能用了，很奇怪，就是我在测试的时候无法访问数据库了。</p><hr><p>1、相关的包<br>SpringMVC的基础包之上，还需要引入Jackson相关的包。</p><ul><li>jackson-annotation</li><li>jackson-core</li><li>Jackson-databind</li></ul><p>在Spring的配置文件中需要加入一下的这一段配置信息，其他的与之前的配置信息相同,主要是将返回的数据自动封装成JSON格式的数据。但是今天测试了一下，发现不用配置下面的信息，只要是RestController就可以直接返回JSON格式的数据。（昨天测试的时候明明会报没有配置这个信息的错误，很奇怪，可能当时用的是Controller吧）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.ByteArrayHttpMessageConverter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=gbk<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、实体层Entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter和setter...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、由于无法访问数据库，在这里直接自定义一些测试数据<br>同时，这里的Controller层主要使用的是RestController这个标签。关于RestController可以<a href="http://docs.spring.io/spring/docs/current/javadoc-api//org/springframework/web/bind/annotation/RestController.html">http://docs.spring.io/spring/docs/current/javadoc-api//org/springframework/web/bind/annotation/RestController.html</a>参考这篇文档，主要就是说@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。此时视图解析器就不在起作用，返回的为JSON格式的数据或者XML的数据，上部分的在配置文件中配置的信息即是将返回的参数封装成JSON格式的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestController_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/rest_2/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">System.out.println(id);</span><br><span class="line"><span class="type">UserSerivce</span> <span class="variable">userSerivce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">List&lt;User&gt; user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//user = userSerivce.getUser(id);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(i,i+<span class="string">&quot;&quot;</span>,i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">user.add(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时启动服务器之后即可在网页中访问到返回的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>4、客户端,主要是使用RestTemplate 进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Unknown</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Unknown.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">User[] users = restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/MicroResource/rest_2/user/1&quot;</span>, User[].class);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graphql（一）graphql-java文档初步阅读</title>
      <link href="/post/27307/"/>
      <url>/post/27307/</url>
      
        <content type="html"><![CDATA[<p>由于公司的原因，最近在学习GraphQL。</p><p>这次的学习主要是从<a href="http://graphql-java.readthedocs.io/en/stable/getting_started.html">graphql-java文档</a>上入手，对语言的文档有初步的认识；</p><h2 id="GraphQL简介"><a href="#GraphQL简介" class="headerlink" title="GraphQL简介"></a><strong>GraphQL简介</strong></h2><p>在 2015 React 欧洲大会上，Lee Byron 介绍了 Facebook 的 GraphQL ，包含 GraphQL 背后的故事，查询语句的示例，还有核心的概念。GraphQL 非常易懂，直接看查询语句就能知道查询出来的数据是什么样的。你可以把 GraphQL 的查询语句想成是没有值，只有属性的对象，返回的结果就是对应的属性还有对应值的对象。<br>故事</p><p>从 2011 开始，Facebook 开始越来越重视移动端，一支很小的团队开始去做 Android 与 iOS 应用。Facebook 的强项是 Web，也非常的了解 Web ，而且在这方面储备了大量的技术。当年 Facebook 的主要平台就是传统的 浏览器 Web 服务器 数据服务 的组合，Web 服务器响应浏览器的请求，到数据服务那里提供出数据，然后再交给浏览器去显示。</p><p>他们打算尽可能的使用现有的代码去实施移动端的应用，所以一开始 Facebook 的移动应用就是一个浏览器，加上了一个本地的壳，内容基本上就是简单的定制以后的移动 Web 网站。这样的好处就是可以使用所有的现有的 Web 平台上的东西。这样工程师们也可以使用平时创建东西的方法。这种方法在短时间内也得到了很大的成功，并且让公司把重点放在移动端上。</p><p>一开始都还好，不过在移动应用上添加越来越多的功能以后，就有点吃力了，移动浏览器经常会消耗掉所有的内存，让应用崩溃。另一面，在 Web 上，Facebook 仍然快速的生成，而移动端有点跟不上脚步了。这让他们决定要去做真正的本地的移动应用。</p><p>2012 年开始，Facebook 要开始开发真正的本地应用。 这跟 Web 很不一样，所以开始重新思考应用的平台。Web 就是请求一个 URL ，返回一堆 HTML。而本地移动应用，为了给应用提供需要的数据，填充数据模型 ，显示视图，要想的问题是，怎么去请求，准备，传递这些数据。而当时 Facebook 现有的服务器主要功能还是只提供 HTML。</p><p>工程师们试了一些方法，比如 RESTful API，对于 Facebook 这种复杂的应用，可能需要定义很多的端点，不同的端点返回来的数据只是略有不同，造成了资源浪费，而且还需要大量的逻辑去处理这些数据。后来他们又试了 FQL， 这是 Facebook 的公共接口，应该是一种查询语言。功能很强大，而且返回来的数据也有很好的结构。不好的地方是，查询用的语言非常难理解，比如多个 JOIN ，主键什么的，所以经常会出错。</p><p>除了这些表面上遇到的问题，工程师们也非常不喜欢这些方法表达数据的形式，比如我们平时想像的数据并不是一大堆查询语言，LEFT JOIN，RIGHT JOIN ..   也不是资源的地址。而对象的形式非常适合表达数据，一个对象，里面有一些属性，不同的属性对应不同的值。几个工程师开始了现在的 GraphQL，一种用对象，属性，关系的，有点像图形的方式来表达想要的数据。</p><p>三年前，Facebook 用了 GraphQL 做了第一款真正的本地移动应用，现在，应用每天会接受 260 亿的请求。</p><p>关于GraphQL的简介主要是从<a href="https://ninghao.net/blog/2857">https://ninghao.net/blog/2857</a>上复制过来的。</p><hr><h2 id="GraphQL-java文档相关"><a href="#GraphQL-java文档相关" class="headerlink" title="GraphQL-java文档相关"></a><strong>GraphQL-java文档相关</strong></h2><p>&#x2F;&#x2F;以下全是个人的理解，目前只是初学，如果有错误欢迎指正。</p><hr><p>jdk1.8以上才支持graphql-java</p><p>1、maven拉取所需要的graphql-java包，现在已经更新到3.0.0版本了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.graphql-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>graphql-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>2、这是官网给出的，也是很多博客网站给出的graphql最经典的java例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphql.GraphQL;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLObjectType;</span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLSchema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.Scalars.GraphQLString;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLFieldDefinition.newFieldDefinition;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLObjectType.newObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphQLObjectType</span> <span class="variable">queryType</span> <span class="operator">=</span> newObject()</span><br><span class="line">                .name(<span class="string">&quot;helloWorldQuery&quot;</span>)</span><br><span class="line">                .field(newFieldDefinition()</span><br><span class="line">                        .type(GraphQLString)</span><br><span class="line">                        .name(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">                        .staticValue(<span class="string">&quot;world&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">GraphQLSchema</span> <span class="variable">schema</span> <span class="operator">=</span> GraphQLSchema.newSchema()</span><br><span class="line">                .query(queryType)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">GraphQL</span> <span class="variable">graphQL</span> <span class="operator">=</span> GraphQL.newGraphQL(schema).build();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; result = graphQL.execute(<span class="string">&quot;&#123;hello&#125;&quot;</span>).getData();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// Prints: &#123;hello=world&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3、graphql-java定义了两种schema语言，一种是标准的java语言的，一种是<a href="https://facebook.github.io/graphql/#sec-Overview">IDL</a>，类似json格式的语言；<br>下面是两种的示例：<br>IDL（目前个人的理解是用于前端的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Foo &#123;</span><br><span class="line">    bar: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java（目前个人理解是用于后台）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLObjectType</span> <span class="variable">fooType</span> <span class="operator">=</span> newObject()</span><br><span class="line">    .name(<span class="string">&quot;Foo&quot;</span>)</span><br><span class="line">    .field(newFieldDefinition()</span><br><span class="line">            .name(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">            .type(GraphQLString))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>比较一下两种语言还是很好理解，这里需要说一下，newFieldDefinition和newObject都是静态方法，需要引入或者声明变量调用，感觉graphql中都是用引入的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLFieldDefinition.newFieldDefinition;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLObjectType.newObject;</span><br></pre></td></tr></table></figure><p>方法属于哪个包中，在eclipse中可以通过ctrl+H查找；idea中还没有试过；</p><hr><p>4、DataFetcher和TypeResolver<br>DataFetcher有点不是很理解，每一个搜索域可以指定DataFetcher，如果没有指定的话，就是用默认的PropertyDataFetcher， PropertyDataFetcher主要是Map或者JavaBeans中获取数据，与Map中的Key对应，和JavaBeans中的变量名对应；<br>TypeResolver就是数据的类型<br>官网给出的IDL示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">schema &#123;</span><br><span class="line">    query: QueryType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type QueryType &#123;</span><br><span class="line">    hero(episode: Episode): Character</span><br><span class="line">    human(id : String) : Human</span><br><span class="line">    droid(id: ID!): Droid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enum Episode &#123;</span><br><span class="line">    NEWHOPE</span><br><span class="line">    EMPIRE</span><br><span class="line">    JEDI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Character &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">    friends: [Character]</span><br><span class="line">    appearsIn: [Episode]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Human implements Character &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">    friends: [Character]</span><br><span class="line">    appearsIn: [Episode]!</span><br><span class="line">    homePlanet: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Droid implements Character &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">    friends: [Character]</span><br><span class="line">    appearsIn: [Episode]!</span><br><span class="line">    primaryFunction: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java代码<br>目前这里面的内容不懂的部分还是很多的<br>①loadSchema这个方法是在哪里定义的至今没有找到；<br>②starWarsSchema.graphqls这个文件怎么定义的？里面的内容是什么；<br>③StarWarsData理解上应该是一个entity类，但是为什么没有申明变量就可以直接使用里面getter和setter，还是需要申明了，但是文档觉得没有必要给出这部分代码；<br>④CustomScalar定义在哪里？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SchemaParser</span> <span class="variable">schemaParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemaParser</span>();</span><br><span class="line"><span class="type">SchemaGenerator</span> <span class="variable">schemaGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemaGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">schemaFile</span> <span class="operator">=</span> loadSchema(<span class="string">&quot;starWarsSchema.graphqls&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">TypeDefinitionRegistry</span> <span class="variable">typeRegistry</span> <span class="operator">=</span> schemaParser.parse(schemaFile);</span><br><span class="line"><span class="type">RuntimeWiring</span> <span class="variable">wiring</span> <span class="operator">=</span> buildRuntimeWiring();</span><br><span class="line"><span class="type">GraphQLSchema</span> <span class="variable">graphQLSchema</span> <span class="operator">=</span> schemaGenerator.makeExecutableSchema(typeRegistry, wiring);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RuntimeWiring <span class="title function_">buildRuntimeWiring</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> RuntimeWiring.newRuntimeWiring()</span><br><span class="line">            .scalar(CustomScalar)</span><br><span class="line">            <span class="comment">// this uses builder function lambda syntax</span></span><br><span class="line">            .type(<span class="string">&quot;QueryType&quot;</span>, typeWiring -&gt; typeWiring</span><br><span class="line">                    .dataFetcher(<span class="string">&quot;hero&quot;</span>, <span class="keyword">new</span> <span class="title class_">StaticDataFetcher</span>(StarWarsData.getArtoo()))</span><br><span class="line">                    .dataFetcher(<span class="string">&quot;human&quot;</span>, StarWarsData.getHumanDataFetcher())</span><br><span class="line">                    .dataFetcher(<span class="string">&quot;droid&quot;</span>, StarWarsData.getDroidDataFetcher())</span><br><span class="line">            )</span><br><span class="line">            .type(<span class="string">&quot;Human&quot;</span>, typeWiring -&gt; typeWiring</span><br><span class="line">                    .dataFetcher(<span class="string">&quot;friends&quot;</span>, StarWarsData.getFriendsDataFetcher())</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// you can use builder syntax if you don&#x27;t like the lambda syntax</span></span><br><span class="line">            .type(<span class="string">&quot;Droid&quot;</span>, typeWiring -&gt; typeWiring</span><br><span class="line">                    .dataFetcher(<span class="string">&quot;friends&quot;</span>, StarWarsData.getFriendsDataFetcher())</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// or full builder syntax if that takes your fancy</span></span><br><span class="line">            .type(</span><br><span class="line">                    newTypeWiring(<span class="string">&quot;Character&quot;</span>)</span><br><span class="line">                            .typeResolver(StarWarsData.getCharacterTypeResolver())</span><br><span class="line">                            .build()</span><br><span class="line">            )</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官网还给出了另外一种buildDynamicRuntimeWiring，根据名字为动态的RuntimeWiring，但是里面的方法也不是很懂，有人懂得望告知：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">RuntimeWiring buildDynamicRuntimeWiring() &#123;</span><br><span class="line">    WiringFactory dynamicWiringFactory = new WiringFactory() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean providesTypeResolver(TypeDefinitionRegistry registry, InterfaceTypeDefinition definition) &#123;</span><br><span class="line">            return getDirective(definition,&quot;specialMarker&quot;) != null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean providesTypeResolver(TypeDefinitionRegistry registry, UnionTypeDefinition definition) &#123;</span><br><span class="line">            return getDirective(definition,&quot;specialMarker&quot;) != null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public TypeResolver getTypeResolver(TypeDefinitionRegistry registry, InterfaceTypeDefinition definition) &#123;</span><br><span class="line">            Directive directive  = getDirective(definition,&quot;specialMarker&quot;);</span><br><span class="line">            return createTypeResolver(definition,directive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public TypeResolver getTypeResolver(TypeDefinitionRegistry registry, UnionTypeDefinition definition) &#123;</span><br><span class="line">            Directive directive  = getDirective(definition,&quot;specialMarker&quot;);</span><br><span class="line">            return createTypeResolver(definition,directive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean providesDataFetcher(TypeDefinitionRegistry registry, FieldDefinition definition) &#123;</span><br><span class="line">            return getDirective(definition,&quot;dataFetcher&quot;) != null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public DataFetcher getDataFetcher(TypeDefinitionRegistry registry, FieldDefinition definition) &#123;</span><br><span class="line">            Directive directive = getDirective(definition, &quot;dataFetcher&quot;);</span><br><span class="line">            return createDataFetcher(definition,directive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return RuntimeWiring.newRuntimeWiring()</span><br><span class="line">            .wiringFactory(dynamicWiringFactory).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>5、类型：<br>GraphQL提供一下类型：</p><ul><li>Scalar</li><li>Object</li><li>Interface</li><li>Union</li><li>InputObject</li><li>Enum</li></ul><p><strong>Scalar</strong></p><ul><li>GraphQLString</li><li>GraphQLBoolean</li><li>GraphQLInt</li><li>GraphQLFloat</li><li>GraphQLID</li><li>GraphQLLong</li><li>GraphQLShort</li><li>GraphQLByte</li><li>GraphQLFloat</li><li>GraphQLBigDecimal</li><li>GraphQLBigInteger</li></ul><p><strong>Object</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type SimpsonCharacter &#123;</span><br><span class="line">    name: String</span><br><span class="line">    mainCharacter: Boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLObjectType</span> <span class="variable">simpsonCharacter</span> <span class="operator">=</span> newObject()</span><br><span class="line">.name(<span class="string">&quot;SimpsonCharacter&quot;</span>)</span><br><span class="line">.description(<span class="string">&quot;A Simpson character&quot;</span>)</span><br><span class="line">.field(newFieldDefinition()</span><br><span class="line">        .name(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;The name of the character.&quot;</span>)</span><br><span class="line">        .type(GraphQLString))</span><br><span class="line">.field(newFieldDefinition()</span><br><span class="line">        .name(<span class="string">&quot;mainCharacter&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;One of the main Simpson characters?&quot;</span>)</span><br><span class="line">        .type(GraphQLBoolean))</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><p><strong>Interface</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface ComicCharacter &#123;</span><br><span class="line">    name: String;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLInterfaceType</span> <span class="variable">comicCharacter</span> <span class="operator">=</span> newInterface()</span><br><span class="line">    .name(<span class="string">&quot;ComicCharacter&quot;</span>)</span><br><span class="line">    .description(<span class="string">&quot;A abstract comic character.&quot;</span>)</span><br><span class="line">    .field(newFieldDefinition()</span><br><span class="line">            .name(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;The name of the character.&quot;</span>)</span><br><span class="line">            .type(GraphQLString))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p><strong>Union</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface ComicCharacter &#123;</span><br><span class="line">    name: String;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLUnionType</span> <span class="variable">PetType</span> <span class="operator">=</span> newUnionType()</span><br><span class="line">    .name(<span class="string">&quot;Pet&quot;</span>)</span><br><span class="line">    .possibleType(CatType)</span><br><span class="line">    .possibleType(DogType)</span><br><span class="line">    .typeResolver(<span class="keyword">new</span> <span class="title class_">TypeResolver</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> GraphQLObjectType <span class="title function_">getType</span><span class="params">(TypeResolutionEnvironment env)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.getObject() <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">                <span class="keyword">return</span> CatType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (env.getObject() <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">                <span class="keyword">return</span> DogType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p><strong>Enum</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    RED</span><br><span class="line">    GREEN</span><br><span class="line">    BLUE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLEnumType</span> <span class="variable">colorEnum</span> <span class="operator">=</span> newEnum()</span><br><span class="line">    .name(<span class="string">&quot;Color&quot;</span>)</span><br><span class="line">    .description(<span class="string">&quot;Supported colors.&quot;</span>)</span><br><span class="line">    .value(<span class="string">&quot;RED&quot;</span>)</span><br><span class="line">    .value(<span class="string">&quot;GREEN&quot;</span>)</span><br><span class="line">    .value(<span class="string">&quot;BLUE&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p><strong>ObjectInputType</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input Character &#123;</span><br><span class="line">    name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GraphQLInputObjectType</span> <span class="variable">inputObjectType</span> <span class="operator">=</span> newInputObject()</span><br><span class="line">    .name(<span class="string">&quot;inputObjectType&quot;</span>)</span><br><span class="line">    .field(newInputObjectField()</span><br><span class="line">            .name(<span class="string">&quot;field&quot;</span>)</span><br><span class="line">            .type(GraphQLString))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><hr><p>6、递归类型<br>每个人都是有朋友的，每个人的朋友都是人，然后每个人又都有朋友，朋友又会有朋友的朋友，就是一直递归下去，graphql-java不会出现这种情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GraphQLObjectType person = newObject()</span><br><span class="line">    .name(&quot;Person&quot;)</span><br><span class="line">    .field(newFieldDefinition()</span><br><span class="line">            .name(&quot;friends&quot;)</span><br><span class="line">            .type(new GraphQLList(new GraphQLTypeReference(&quot;Person&quot;))))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>7、对于查询的类可进行扩展<br>java代码上是这样是实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SchemaParser</span> <span class="variable">schemaParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemaCompiler</span>();</span><br><span class="line"><span class="type">SchemaGenerator</span> <span class="variable">schemaGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchemaGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">schemaFile1</span> <span class="operator">=</span> loadSchema(<span class="string">&quot;starWarsSchemaPart1.graphqls&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">schemaFile2</span> <span class="operator">=</span> loadSchema(<span class="string">&quot;starWarsSchemaPart2.graphqls&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">schemaFile3</span> <span class="operator">=</span> loadSchema(<span class="string">&quot;starWarsSchemaPart3.graphqls&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">TypeDefinitionRegistry</span> <span class="variable">typeRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeDefinitionRegistry</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// each registry is merged into the main registry</span></span><br><span class="line">typeRegistry.merge(schemaParser.compile(schemaFile1));</span><br><span class="line">typeRegistry.merge(schemaParser.compile(schemaFile2));</span><br><span class="line">typeRegistry.merge(schemaParser.compile(schemaFile3));</span><br><span class="line"></span><br><span class="line"><span class="type">GraphQLSchema</span> <span class="variable">graphQLSchema</span> <span class="operator">=</span> schemaGenerator.makeExecutableSchema(typeRegistry, buildRuntimeWiring());</span><br></pre></td></tr></table></figure><p>在IDL中大概就是下面这种情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">type Human &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">&#125;</span><br><span class="line">#Another part of your system can extend this type to add more shape to it.</span><br><span class="line">extend type Human implements Character &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">    friends: [Character]</span><br><span class="line">    appearsIn: [Episode]!</span><br><span class="line">&#125;</span><br><span class="line">#You can have as many extensions as you think sensible. </span><br><span class="line">extend type Human &#123;</span><br><span class="line">    homePlanet: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#With all these type extensions in place the Human type now looks like this at runtime.</span><br><span class="line">type Human implements Character &#123;</span><br><span class="line">    id: ID!</span><br><span class="line">    name: String!</span><br><span class="line">    friends: [Character]</span><br><span class="line">    appearsIn: [Episode]!</span><br><span class="line">    homePlanet: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天的工作暂时就这么多，明天研究研究graphql-java源代码，再看看IDL语言，看看能不能对graphq-java有更深的了解，目前了解的情况还无法根本无法用来写代码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
